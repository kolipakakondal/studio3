/* The following code was generated by JFlex 1.4.3 on 6/22/17 12:40 PM */

// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.editor.js.text;

import java.io.Reader;
import java.io.StringReader;

import beaver.Symbol;
import beaver.Scanner;

import com.aptana.core.util.StringUtil;
import com.aptana.js.core.parsing.JSTokenType;
import com.aptana.editor.common.parsing.ForceReturnException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/22/17 12:40 PM from the specification file
 * <tt>/Users/cwilliams/repos/studio3/plugins/com.aptana.editor.js/parsing/JSPartitioning.flex</tt>
 */
public class JSPartitioningFlexScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REGEX = 4;
  public static final int DIVISION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\11\1\2\1\40\1\41\1\1\16\14\4\0\1\11\1\71"+
    "\1\43\1\0\1\13\1\4\1\72\1\37\1\100\1\101\1\36\1\24"+
    "\1\102\1\74\1\22\1\31\1\16\11\21\1\103\1\77\1\3\1\70"+
    "\1\5\1\6\1\0\4\20\1\23\1\20\21\12\1\17\2\12\1\26"+
    "\1\30\1\27\1\75\1\12\1\25\1\46\1\44\1\50\1\60\1\35"+
    "\1\34\1\66\1\53\1\56\1\32\1\47\1\61\1\67\1\55\1\54"+
    "\1\64\1\32\1\45\1\51\1\52\1\57\1\65\1\63\1\33\1\62"+
    "\1\32\1\7\1\73\1\10\1\76\6\14\1\42\32\14\2\0\4\12"+
    "\4\0\1\12\2\0\1\14\7\0\1\12\4\0\1\12\5\0\27\12"+
    "\1\0\37\12\1\0\u01ca\12\4\0\14\12\16\0\5\12\7\0\1\12"+
    "\1\0\1\12\21\0\160\14\5\12\1\0\2\12\2\0\4\12\10\0"+
    "\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0\123\12\1\0"+
    "\213\12\1\0\5\14\2\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\7\0\1\12\1\0\55\14\1\0\1\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\10\0\33\12\5\0\3\12\15\0\5\14\6\0"+
    "\1\12\4\0\13\14\5\0\53\12\25\14\12\15\4\0\2\12\1\14"+
    "\143\12\1\0\1\12\10\14\1\0\6\14\2\12\2\14\1\0\4\14"+
    "\2\12\12\15\3\12\2\0\1\12\17\0\1\14\1\12\1\14\36\12"+
    "\33\14\2\0\131\12\13\14\1\12\16\0\12\15\41\12\11\14\2\12"+
    "\4\0\1\12\5\0\26\12\4\14\1\12\11\14\1\12\3\14\1\12"+
    "\5\14\22\0\31\12\3\14\104\0\1\12\1\0\13\12\67\0\33\14"+
    "\1\0\4\14\66\12\3\14\1\12\22\14\1\12\7\14\12\12\2\14"+
    "\2\0\12\15\1\0\7\12\1\0\7\12\1\0\3\14\1\0\10\12"+
    "\2\0\2\12\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12"+
    "\2\0\1\14\1\12\7\14\2\0\2\14\2\0\3\14\1\12\10\0"+
    "\1\14\4\0\2\12\1\0\3\12\2\14\2\0\12\15\4\12\7\0"+
    "\1\12\5\0\3\14\1\0\6\12\4\0\2\12\2\0\26\12\1\0"+
    "\7\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\14\1\0"+
    "\5\14\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\12\1\0"+
    "\1\12\7\0\12\15\2\14\3\12\1\14\13\0\3\14\1\0\11\12"+
    "\1\0\3\12\1\0\26\12\1\0\7\12\1\0\2\12\1\0\5\12"+
    "\2\0\1\14\1\12\10\14\1\0\3\14\1\0\3\14\2\0\1\12"+
    "\17\0\2\12\2\14\2\0\12\15\1\0\1\12\17\0\3\14\1\0"+
    "\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\5\12\2\0\1\14\1\12\7\14\2\0\2\14\2\0\3\14\10\0"+
    "\2\14\4\0\2\12\1\0\3\12\2\14\2\0\12\15\1\0\1\12"+
    "\20\0\1\14\1\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0"+
    "\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0"+
    "\14\12\4\0\5\14\3\0\3\14\1\0\4\14\2\0\1\12\6\0"+
    "\1\14\16\0\12\15\11\0\1\12\7\0\3\14\1\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\7\14"+
    "\1\0\3\14\1\0\4\14\7\0\2\14\1\0\2\12\6\0\2\12"+
    "\2\14\2\0\12\15\22\0\2\14\1\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\2\0\1\14\1\12\7\14\1\0"+
    "\3\14\1\0\4\14\7\0\2\14\7\0\1\12\1\0\2\12\2\14"+
    "\2\0\12\15\1\0\2\12\17\0\2\14\1\0\10\12\1\0\3\12"+
    "\1\0\51\12\2\0\1\12\7\14\1\0\3\14\1\0\4\14\1\12"+
    "\10\0\1\14\10\0\2\12\2\14\2\0\12\15\12\0\6\12\2\0"+
    "\2\14\1\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\3\0\1\14\4\0\6\14\1\0\1\14\1\0\10\14\22\0"+
    "\2\14\15\0\60\12\1\14\2\12\7\14\4\0\10\12\10\14\1\0"+
    "\12\15\47\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0"+
    "\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0"+
    "\1\12\2\0\2\12\1\0\4\12\1\14\2\12\6\14\1\0\2\14"+
    "\1\12\2\0\5\12\1\0\1\12\1\0\6\14\2\0\12\15\2\0"+
    "\4\12\40\0\1\12\27\0\2\14\6\0\12\15\13\0\1\14\1\0"+
    "\1\14\1\0\1\14\4\0\2\14\10\12\1\0\44\12\4\0\24\14"+
    "\1\0\2\14\5\12\13\14\1\0\44\14\11\0\1\14\71\0\53\12"+
    "\24\14\1\12\12\15\6\0\6\12\4\14\4\12\3\14\1\12\3\14"+
    "\2\12\7\14\3\12\4\14\15\12\14\14\1\12\1\14\12\15\4\14"+
    "\2\0\46\12\1\0\1\12\5\0\1\12\2\0\53\12\1\0\u014d\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\51\12"+
    "\1\0\4\12\2\0\41\12\1\0\4\12\2\0\7\12\1\0\1\12"+
    "\1\0\4\12\2\0\17\12\1\0\71\12\1\0\4\12\2\0\103\12"+
    "\2\0\3\14\40\0\20\12\20\0\125\12\14\0\u026c\12\2\0\21\12"+
    "\1\0\32\12\5\0\113\12\3\0\3\12\17\0\15\12\1\0\4\12"+
    "\3\14\13\0\22\12\3\14\13\0\22\12\2\14\14\0\15\12\1\0"+
    "\3\12\1\0\2\14\14\0\64\12\40\14\3\0\1\12\3\0\2\12"+
    "\1\14\2\0\12\15\41\0\3\14\2\0\12\15\6\0\130\12\10\0"+
    "\51\12\1\14\1\12\5\0\106\12\12\0\35\12\3\0\14\14\4\0"+
    "\14\14\12\0\12\15\36\12\2\0\5\12\13\0\54\12\4\0\21\14"+
    "\7\12\2\14\6\0\12\15\46\0\27\12\5\14\4\0\65\12\12\14"+
    "\1\0\35\14\2\0\1\14\12\15\6\0\12\15\15\0\1\12\130\0"+
    "\5\14\57\12\21\14\7\12\4\0\12\15\21\0\11\14\14\0\3\14"+
    "\36\12\15\14\2\12\12\15\54\12\16\14\14\0\44\12\24\14\10\0"+
    "\12\15\3\0\3\12\12\15\44\12\122\0\3\14\1\0\25\14\4\12"+
    "\1\14\4\12\3\14\2\12\11\0\300\12\47\14\25\0\4\14\u0116\12"+
    "\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0\7\12"+
    "\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12"+
    "\4\0\15\12\5\0\3\12\1\0\7\12\16\0\5\14\30\0\2\40"+
    "\5\14\20\0\2\12\23\0\1\12\13\0\5\14\5\0\6\14\1\0"+
    "\1\12\15\0\1\12\20\0\15\12\3\0\33\12\25\0\15\14\4\0"+
    "\1\14\3\0\14\14\21\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\21\0"+
    "\51\12\u0a77\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\14"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\17\0\1\14\27\12\11\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12"+
    "\1\0\40\14\57\0\1\12\u01d5\0\3\12\31\0\11\12\6\14\1\0"+
    "\5\12\2\0\5\12\4\0\126\12\2\0\2\14\2\0\3\12\1\0"+
    "\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0\33\12\65\0"+
    "\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0\56\12\2\0"+
    "\u010d\12\3\0\20\12\12\15\2\12\24\0\57\12\1\14\4\0\12\14"+
    "\1\0\31\12\7\0\1\14\120\12\2\14\45\0\11\12\2\0\147\12"+
    "\2\0\4\12\1\0\4\12\14\0\13\12\115\0\12\12\1\14\3\12"+
    "\1\14\4\12\1\14\27\12\5\14\20\0\1\12\7\0\64\12\14\0"+
    "\2\14\62\12\21\14\13\0\12\15\6\0\22\14\6\12\3\0\1\12"+
    "\4\0\12\15\34\12\10\14\2\0\27\12\15\14\14\0\35\12\3\0"+
    "\4\14\57\12\16\14\16\0\1\12\12\15\46\0\51\12\16\14\11\0"+
    "\3\12\1\14\10\12\2\14\2\0\12\15\6\0\27\12\3\0\1\12"+
    "\1\14\4\0\60\12\1\14\1\12\3\14\2\12\2\14\5\12\2\14"+
    "\1\12\1\14\1\12\30\0\3\12\2\0\13\12\5\14\2\0\3\12"+
    "\2\14\12\0\6\12\2\0\6\12\2\0\6\12\11\0\7\12\1\0"+
    "\7\12\221\0\43\12\10\14\1\0\2\14\2\0\12\15\6\0\u2ba4\12"+
    "\14\0\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12"+
    "\14\0\5\12\5\0\1\12\1\14\12\12\1\0\15\12\1\0\5\12"+
    "\1\0\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12"+
    "\22\0\100\12\2\0\66\12\50\0\15\12\3\0\20\14\20\0\7\14"+
    "\14\0\2\12\30\0\3\12\31\0\1\12\6\0\5\12\1\0\207\12"+
    "\2\0\1\14\4\0\1\12\13\0\12\15\7\0\32\12\4\0\1\12"+
    "\1\0\32\12\13\0\131\12\3\0\6\12\2\0\6\12\2\0\6\12"+
    "\2\0\3\12\3\0\2\12\3\0\2\12\22\0\3\14\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\1\1\1\15\1\16"+
    "\1\17\2\11\1\20\2\1\17\11\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\2\1\1\35\1\1\1\35\2\0\1\36\2\0"+
    "\1\37\1\40\1\41\1\42\3\0\1\43\1\12\2\0"+
    "\1\44\1\45\2\0\1\46\1\47\1\0\6\11\1\50"+
    "\1\0\2\51\1\1\1\52\1\51\1\0\2\53\1\1"+
    "\1\53\1\54\16\11\1\55\2\11\1\56\1\57\2\11"+
    "\1\60\7\11\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\3\0\1\72\1\73\2\0"+
    "\1\74\1\75\1\0\1\76\2\0\1\12\1\0\1\12"+
    "\1\77\2\0\2\47\2\0\1\11\1\100\5\11\1\0"+
    "\1\101\1\0\1\102\7\11\1\103\4\11\1\104\4\11"+
    "\1\105\5\11\1\106\3\11\1\107\1\11\1\110\1\111"+
    "\1\112\1\113\1\0\1\114\1\0\1\43\1\76\1\0"+
    "\1\46\1\77\2\0\1\115\1\0\5\11\1\116\3\11"+
    "\1\117\7\11\1\120\2\11\1\121\1\11\1\122\6\11"+
    "\1\123\1\124\1\115\1\125\1\126\4\11\1\127\1\11"+
    "\1\130\1\131\1\132\1\11\1\133\1\11\1\134\2\11"+
    "\1\135\5\11\1\136\1\137\3\11\1\140\1\141\1\11"+
    "\1\142\1\143\1\144\1\145\1\11\1\146\1\11\1\147"+
    "\1\150\1\11\1\151\2\11\1\152\1\153\1\154\2\11"+
    "\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\314\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\314\0\314\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990"+
    "\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\u0b6c\0\u0220\0\u0bb0\0\u0bf4"+
    "\0\u0c38\0\u0b6c\0\u0220\0\u0c7c\0\u0cc0\0\u0d04\0\314\0\314"+
    "\0\u0d48\0\314\0\u0d8c\0\u0264\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\314\0\314\0\u03fc\0\u0f24\0\u0f68\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\314\0\u11cc"+
    "\0\u1210\0\314\0\u1254\0\314\0\u11cc\0\u1298\0\u12dc\0\314"+
    "\0\u1320\0\u1298\0\314\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474"+
    "\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694"+
    "\0\u16d8\0\u02a8\0\u171c\0\u1760\0\u02a8\0\u17a4\0\u17e8\0\u182c"+
    "\0\u02a8\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u1a4c\0\u1a90\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\314\0\314\0\u1ad4\0\u1b18\0\u1b5c\0\u1ad4\0\314\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\314\0\u1c6c\0\u1cb0\0\u0e14\0\u1cf4\0\u1d38"+
    "\0\u1d38\0\u0ee0\0\u1d7c\0\u0f68\0\u1dc0\0\u1e04\0\314\0\u1e48"+
    "\0\u1e8c\0\u1ed0\0\u02a8\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024"+
    "\0\u1254\0\314\0\u1320\0\314\0\u2068\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u02a8\0\u2244\0\u2288\0\u22cc\0\u2310"+
    "\0\u02a8\0\u2354\0\u2398\0\u23dc\0\u2420\0\u02a8\0\u2464\0\u24a8"+
    "\0\u24ec\0\u2530\0\u2574\0\u02a8\0\u25b8\0\u25fc\0\u2640\0\u02a8"+
    "\0\u2684\0\u02a8\0\314\0\314\0\u26c8\0\u270c\0\314\0\u1cb0"+
    "\0\314\0\314\0\u1d7c\0\314\0\314\0\u2750\0\u2794\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u02a8\0\u2970"+
    "\0\u29b4\0\u29f8\0\u02a8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c"+
    "\0\u2b90\0\u2bd4\0\u02a8\0\u2c18\0\u2c5c\0\u02a8\0\u2ca0\0\u02a8"+
    "\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u02a8\0\u02a8"+
    "\0\314\0\314\0\u02a8\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u02a8"+
    "\0\u2f8c\0\u02a8\0\u02a8\0\u02a8\0\u2fd0\0\u02a8\0\u3014\0\u02a8"+
    "\0\u3058\0\u309c\0\u02a8\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0"+
    "\0\u02a8\0\u02a8\0\u3234\0\u3278\0\u32bc\0\u02a8\0\u02a8\0\u3300"+
    "\0\u02a8\0\u02a8\0\u02a8\0\u02a8\0\u3344\0\u02a8\0\u3388\0\u02a8"+
    "\0\u02a8\0\u33cc\0\u02a8\0\u3410\0\u3454\0\u02a8\0\u02a8\0\u02a8"+
    "\0\u3498\0\u34dc\0\u02a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\5\2\14\1\4\1\15\1\16\2\14\1\15\1\17"+
    "\1\14\1\20\1\21\1\22\1\23\1\4\1\24\2\14"+
    "\1\25\1\26\1\27\1\30\1\4\1\5\1\4\1\31"+
    "\1\32\1\33\1\34\1\14\1\35\1\36\1\37\1\14"+
    "\1\40\1\41\1\42\1\14\1\43\1\44\1\45\1\46"+
    "\1\14\1\47\1\50\1\14\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\4\2\5\1\65\3\4\1\66\1\4\1\5\17\4"+
    "\1\67\5\4\1\70\1\4\1\5\1\4\1\70\41\4"+
    "\2\5\1\65\3\4\1\66\1\4\1\5\17\4\1\71"+
    "\5\4\1\70\1\4\1\5\1\4\1\70\40\4\105\0"+
    "\2\5\1\72\3\0\1\73\1\0\1\5\27\0\1\5"+
    "\45\0\1\74\1\75\1\0\1\76\61\0\1\77\103\0"+
    "\1\100\20\0\1\101\62\0\1\102\17\0\1\103\77\0"+
    "\13\104\1\105\11\104\1\106\56\104\12\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\24\14\31\0"+
    "\2\15\2\0\1\15\1\107\1\110\11\0\1\110\63\0"+
    "\2\15\1\111\1\0\1\15\1\107\1\110\7\0\1\111"+
    "\1\0\1\110\63\0\2\107\2\0\1\107\106\0\1\112"+
    "\43\0\1\113\13\0\13\114\1\115\11\114\1\116\56\114"+
    "\31\0\1\117\4\0\1\120\57\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\2\14\1\121\5\14"+
    "\1\122\1\14\1\123\1\124\10\14\26\0\10\14\1\0"+
    "\1\14\6\0\1\14\1\125\2\14\4\0\1\14\1\0"+
    "\15\14\1\126\6\14\104\0\1\127\13\0\1\130\1\131"+
    "\1\132\25\130\1\133\6\130\1\134\3\135\41\130\1\136"+
    "\1\137\1\140\25\136\1\141\7\136\3\142\1\143\40\136"+
    "\12\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\1\14\1\144\22\14\26\0\10\14\1\0\1\14"+
    "\6\0\3\14\1\145\4\0\1\14\1\0\24\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\17\14\1\146\4\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\2\14\1\147\5\14\1\150"+
    "\4\14\1\151\6\14\26\0\10\14\1\0\1\14\6\0"+
    "\3\14\1\152\4\0\1\14\1\0\6\14\1\153\4\14"+
    "\1\154\3\14\1\155\4\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\1\14\1\156\1\157"+
    "\4\14\1\160\6\14\1\161\5\14\26\0\10\14\1\0"+
    "\1\14\6\0\2\14\1\162\1\14\4\0\1\14\1\0"+
    "\24\14\26\0\10\14\1\0\1\14\6\0\3\14\1\163"+
    "\4\0\1\14\1\0\13\14\1\164\10\14\26\0\10\14"+
    "\1\0\1\14\6\0\2\14\1\165\1\14\4\0\1\14"+
    "\1\0\11\14\1\166\11\14\1\167\26\0\10\14\1\0"+
    "\1\14\6\0\3\14\1\170\4\0\1\14\1\0\10\14"+
    "\1\171\13\14\26\0\10\14\1\0\1\14\6\0\3\14"+
    "\1\172\4\0\1\14\1\0\24\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\12\14\1\173"+
    "\11\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\7\14\1\174\2\14\1\175\11\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\2\14\1\176\5\14\1\177\13\14\26\0\10\14\1\0"+
    "\1\14\6\0\3\14\1\200\4\0\1\14\1\0\24\14"+
    "\104\0\1\201\103\0\1\202\103\0\1\203\1\0\1\204"+
    "\101\0\1\205\2\0\1\206\100\0\1\207\3\0\1\210"+
    "\77\0\1\211\17\0\1\75\1\0\1\76\165\0\1\212"+
    "\43\0\1\4\53\0\1\213\2\0\23\213\1\214\1\213"+
    "\1\215\1\0\36\213\1\216\13\213\70\0\1\217\13\0"+
    "\4\75\1\220\77\75\6\76\1\221\75\76\5\0\1\222"+
    "\62\0\1\223\13\0\4\103\1\224\77\103\7\104\1\225"+
    "\3\104\1\105\11\104\1\106\56\104\13\226\1\227\70\226"+
    "\15\0\2\107\2\0\1\107\1\0\1\110\11\0\1\110"+
    "\63\0\2\230\2\0\1\230\2\0\1\231\47\0\1\231"+
    "\25\0\1\232\1\0\2\232\1\0\1\232\10\0\2\232"+
    "\6\0\1\232\1\0\1\232\1\0\1\232\7\0\1\232"+
    "\23\0\7\114\1\233\3\114\1\115\11\114\1\116\56\114"+
    "\13\234\1\235\70\234\1\117\1\236\1\237\101\117\36\240"+
    "\1\241\45\240\12\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\15\14\1\242\6\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\1\14"+
    "\1\243\22\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\11\14\1\244\12\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\11\14"+
    "\1\245\12\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\6\14\1\246\11\14\1\247\3\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\5\14\1\250\16\14\14\0\1\130\1\131\1\132"+
    "\25\130\1\251\6\130\1\134\3\135\41\130\2\0\1\252"+
    "\101\0\104\130\1\136\1\137\1\140\25\136\1\253\7\136"+
    "\3\142\1\143\40\136\2\0\1\254\101\0\104\136\12\0"+
    "\10\14\1\0\1\14\6\0\3\14\1\255\4\0\1\14"+
    "\1\0\24\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\6\14\1\256\15\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\2\14"+
    "\1\257\21\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\5\14\1\260\1\261\15\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\11\14\1\262\12\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\2\14\1\263\21\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\6\14\1\264\15\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\2\14\1\265\21\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\20\14\1\266\3\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\12\14\1\267\11\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\13\14\1\270\2\14\1\271\5\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\1\14\1\272"+
    "\22\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\1\14\1\273\10\14\1\274\11\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\20\14\1\275\3\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\17\14\1\276\4\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\15\14\1\277\6\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\5\14\1\300\16\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\20\14\1\301\3\14\26\0\10\14\1\0\1\14\6\0"+
    "\2\14\1\302\1\14\4\0\1\14\1\0\15\14\1\303"+
    "\6\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\6\14\1\304\15\14\26\0\10\14\1\0"+
    "\1\14\6\0\3\14\1\305\4\0\1\14\1\0\24\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\12\14\1\306\11\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\6\14\1\307\15\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\1\14\1\310\22\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\12\14\1\311\11\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\6\14\1\312\15\14\104\0\1\313\103\0\1\314"+
    "\13\0\1\213\2\0\23\213\1\214\1\213\1\215\1\315"+
    "\52\213\1\214\2\0\24\214\1\213\1\316\53\214\1\213"+
    "\2\0\101\213\4\75\1\220\1\5\76\75\5\76\1\5"+
    "\1\221\75\76\70\0\1\317\13\0\4\103\1\224\3\103"+
    "\1\5\73\103\25\320\1\321\56\320\7\226\1\322\3\226"+
    "\1\227\70\226\15\0\2\230\2\0\1\230\62\0\25\323"+
    "\1\324\56\323\7\234\1\325\3\234\1\235\70\234\2\0"+
    "\1\237\101\0\36\240\1\326\45\240\31\327\1\330\4\327"+
    "\1\331\45\327\12\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\5\14\1\332\16\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\2\14"+
    "\1\333\21\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\4\14\1\334\17\14\26\0\10\14"+
    "\1\0\1\14\6\0\3\14\1\335\4\0\1\14\1\0"+
    "\24\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\10\14\1\336\13\14\26\0\10\14\1\0"+
    "\1\14\6\0\3\14\1\337\4\0\1\14\1\0\24\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\2\14\1\340\21\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\13\14\1\341\10\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\12\14\1\342\11\14\26\0\10\14\1\0\1\14"+
    "\6\0\3\14\1\343\4\0\1\14\1\0\24\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\4\14\1\344\17\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\5\14\1\345\1\346\15\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\5\14\1\347\16\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\6\14\1\350\15\14"+
    "\26\0\10\14\1\0\1\14\6\0\3\14\1\351\4\0"+
    "\1\14\1\0\24\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\6\14\1\352\15\14\26\0"+
    "\10\14\1\0\1\14\6\0\3\14\1\353\4\0\1\14"+
    "\1\0\24\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\22\14\1\354\1\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\10\14"+
    "\1\355\13\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\5\14\1\356\16\14\26\0\10\14"+
    "\1\0\1\14\6\0\3\14\1\357\4\0\1\14\1\0"+
    "\24\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\15\14\1\360\6\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\6\14\1\361"+
    "\15\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\10\14\1\362\13\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\2\14\1\363"+
    "\21\14\26\0\10\14\1\0\1\14\6\0\3\14\1\364"+
    "\4\0\1\14\1\0\24\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\15\14\1\365\6\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\15\14\1\366\6\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\7\14\1\367\14\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\14\14\1\370\7\14\46\0\4\315\6\0\24\315"+
    "\14\0\1\214\2\0\101\214\31\240\1\371\4\240\1\326"+
    "\45\240\36\327\1\331\76\327\1\372\4\327\1\331\45\327"+
    "\12\0\10\14\1\0\1\14\6\0\3\14\1\373\4\0"+
    "\1\14\1\0\24\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\15\14\1\374\6\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\6\14\1\375\15\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\11\14\1\376\12\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\1\14\1\377\22\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\3\14\1\u0100\20\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\1\14\1\u0101\22\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\6\14\1\u0102\15\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\7\14\1\u0103\14\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\6\14\1\u0104\15\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\12\14\1\u0105\11\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\5\14\1\u0106\16\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\12\14\1\u0107\11\14\26\0\10\14\1\0\1\14\6\0"+
    "\4\14\4\0\1\14\1\0\1\14\1\u0108\22\14\26\0"+
    "\10\14\1\0\1\14\6\0\4\14\4\0\1\14\1\0"+
    "\4\14\1\u0109\17\14\26\0\10\14\1\0\1\14\6\0"+
    "\3\14\1\u010a\4\0\1\14\1\0\24\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\17\14"+
    "\1\u010b\4\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\10\14\1\u010c\13\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\2\14"+
    "\1\u010d\21\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\1\14\1\u010e\22\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\13\14"+
    "\1\u010f\10\14\26\0\10\14\1\0\1\14\6\0\4\14"+
    "\4\0\1\14\1\0\6\14\1\u0110\15\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\14\14"+
    "\1\u0111\7\14\26\0\10\14\1\0\1\14\6\0\3\14"+
    "\1\u0112\4\0\1\14\1\0\24\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\15\14\1\u0113"+
    "\6\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\12\14\1\u0114\11\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\14\14\1\u0115"+
    "\7\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\6\14\1\u0116\15\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\11\14\1\u0117"+
    "\12\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\11\14\1\u0118\12\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\4\14\1\u0119"+
    "\17\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\7\14\1\u011a\14\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\6\14\1\u011b"+
    "\15\14\26\0\10\14\1\0\1\14\6\0\2\14\1\u011c"+
    "\1\14\4\0\1\14\1\0\24\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\11\14\1\u011d"+
    "\12\14\26\0\10\14\1\0\1\14\6\0\4\14\4\0"+
    "\1\14\1\0\6\14\1\u011e\15\14\26\0\10\14\1\0"+
    "\1\14\6\0\4\14\4\0\1\14\1\0\15\14\1\u011f"+
    "\6\14\26\0\10\14\1\0\1\14\6\0\3\14\1\u0120"+
    "\4\0\1\14\1\0\24\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\16\14\1\u0121\5\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\10\14\1\u0122\13\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\5\14\1\u0123\16\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\13\14\1\u0124\10\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\4\14\1\u0125\17\14"+
    "\26\0\10\14\1\0\1\14\6\0\4\14\4\0\1\14"+
    "\1\0\6\14\1\u0126\15\14\26\0\10\14\1\0\1\14"+
    "\6\0\4\14\4\0\1\14\1\0\11\14\1\u0127\12\14"+
    "\26\0\10\14\1\0\1\14\6\0\3\14\1\u0128\4\0"+
    "\1\14\1\0\24\14\26\0\10\14\1\0\1\14\6\0"+
    "\3\14\1\u0129\4\0\1\14\1\0\24\14\26\0\10\14"+
    "\1\0\1\14\6\0\4\14\4\0\1\14\1\0\10\14"+
    "\1\u012a\13\14\26\0\10\14\1\0\1\14\6\0\2\14"+
    "\1\u012b\1\14\4\0\1\14\1\0\24\14\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\10\1\2\11\33\1\6\11"+
    "\5\1\2\0\1\1\2\0\2\11\1\1\1\11\3\0"+
    "\2\1\2\0\2\11\2\0\2\1\1\0\6\1\1\11"+
    "\1\0\1\1\1\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\37\1\10\11\3\0\1\1\1\11"+
    "\2\0\1\1\1\11\1\0\1\1\2\0\1\1\1\0"+
    "\2\1\2\0\1\1\1\11\2\0\7\1\1\0\1\11"+
    "\1\0\1\11\36\1\2\11\1\1\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\2\0\1\1\1\0\37\1\2\11"+
    "\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // last token used for look behind. Also needed when implementing the ITokenScanner interface
    private Symbol _lastToken;

    public JSPartitioningFlexScanner()
    {
        this((Reader) null);
    }

    public Symbol getLastToken()
    {
        return _lastToken;
    }

    private Symbol newToken(JSTokenType id, Object value)
    {
        return new JSTokenTypeSymbol(id, yychar, yychar + yylength() - 1, value);
    }

    public Symbol nextToken() throws java.io.IOException, Scanner.Exception
    {
        try
        {
            // get next token
            _lastToken = yylex();
        } 
        catch (Scanner.Exception e)
        {
            if (e instanceof ForceReturnException)
            {
                //Ok, we have a 'forced return', meaning we should consume everything until the end
                //of the file and return the token that was forced.
                ForceReturnException forceReturnException = (ForceReturnException) e;
                int start = yychar;
                boolean eof;
                do
                {
                    eof = zzRefill();
                }
                while (!eof);

                _lastToken = new JSTokenTypeSymbol((JSTokenType) forceReturnException.type, start, start + zzEndRead
                        - 1, "");
                yyclose();
            }
            else
            {
                int end = yychar + yylength() - 1;
                _lastToken = new JSTokenTypeSymbol(JSTokenType.EOF, yychar, end, "");
            }
        }

        return _lastToken;
    }

    private boolean isValidDivisionStart()
    {
        if (_lastToken != null)
        {
            switch (((JSTokenTypeSymbol) _lastToken).token)
            {
                case IDENTIFIER:
                case NUMBER:
                case REGEX:
                case STRING_SINGLE:
                case STRING_DOUBLE:
                case RPAREN:
                case PLUS_PLUS:
                case MINUS_MINUS:
                case RBRACKET:
                case RCURLY:
                case FALSE:
                case NULL:
                case THIS:
                case TRUE:
                    return true;
            }
        }

        return false;
    }


    public void setSource(String source)
    {
        yyreset(new StringReader(source));

        // clear last token
        _lastToken = null;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSPartitioningFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JSPartitioningFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2278) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { return newToken(JSTokenType.LESS_LESS_EQUAL, StringUtil.EMPTY);
          }
        case 110: break;
        case 29: 
          { yybegin(YYINITIAL);
                        return newToken(JSTokenType.FORWARD_SLASH, StringUtil.EMPTY);
          }
        case 111: break;
        case 81: 
          { return newToken(JSTokenType.THIS, StringUtil.EMPTY);
          }
        case 112: break;
        case 52: 
          { return newToken(JSTokenType.AMPERSAND_AMPERSAND, StringUtil.EMPTY);
          }
        case 113: break;
        case 68: 
          { return newToken(JSTokenType.TRY, StringUtil.EMPTY);
          }
        case 114: break;
        case 58: 
          { yybegin(YYINITIAL);
                        return newToken(JSTokenType.FORWARD_SLASH_EQUAL, StringUtil.EMPTY);
          }
        case 115: break;
        case 62: 
          { return newToken(JSTokenType.TEMPLATE_MIDDLE, StringUtil.EMPTY);
          }
        case 116: break;
        case 3: 
          { return newToken(JSTokenType.LESS, StringUtil.EMPTY);
          }
        case 117: break;
        case 60: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER, StringUtil.EMPTY);
          }
        case 118: break;
        case 101: 
          { return newToken(JSTokenType.TYPEOF, StringUtil.EMPTY);
          }
        case 119: break;
        case 8: 
          { return newToken(JSTokenType.RCURLY, StringUtil.EMPTY);
          }
        case 120: break;
        case 78: 
          { return newToken(JSTokenType.ELSE, StringUtil.EMPTY);
          }
        case 121: break;
        case 99: 
          { return newToken(JSTokenType.SWITCH, StringUtil.EMPTY);
          }
        case 122: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
                yybegin(YYINITIAL);
                throw new Scanner.Exception("Unexpected character '" + "" + "' around offset " + yychar);
          }
        case 123: break;
        case 39: 
          { return newToken(JSTokenType.SINGLELINE_COMMENT, StringUtil.EMPTY);
          }
        case 124: break;
        case 26: 
          { return newToken(JSTokenType.RPAREN, StringUtil.EMPTY);
          }
        case 125: break;
        case 9: 
          { return newToken(JSTokenType.IDENTIFIER, StringUtil.EMPTY);
          }
        case 126: break;
        case 76: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER_EQUAL, StringUtil.EMPTY);
          }
        case 127: break;
        case 93: 
          { return newToken(JSTokenType.THROW, StringUtil.EMPTY);
          }
        case 128: break;
        case 79: 
          { return newToken(JSTokenType.CASE, StringUtil.EMPTY);
          }
        case 129: break;
        case 18: 
          { return newToken(JSTokenType.EXCLAMATION, StringUtil.EMPTY);
          }
        case 130: break;
        case 74: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL_EQUAL, StringUtil.EMPTY);
          }
        case 131: break;
        case 47: 
          { return newToken(JSTokenType.IN, StringUtil.EMPTY);
          }
        case 132: break;
        case 98: 
          { return newToken(JSTokenType.STATIC, StringUtil.EMPTY);
          }
        case 133: break;
        case 95: 
          { return newToken(JSTokenType.WHILE, StringUtil.EMPTY);
          }
        case 134: break;
        case 35: 
          { return newToken(JSTokenType.TEMPLATE_TAIL, StringUtil.EMPTY);
          }
        case 135: break;
        case 37: 
          { return newToken(JSTokenType.PLUS_EQUAL, StringUtil.EMPTY);
          }
        case 136: break;
        case 105: 
          { return newToken(JSTokenType.EXTENDS, StringUtil.EMPTY);
          }
        case 137: break;
        case 7: 
          { return newToken(JSTokenType.LCURLY, StringUtil.EMPTY);
          }
        case 138: break;
        case 53: 
          { return newToken(JSTokenType.PIPE_EQUAL, StringUtil.EMPTY);
          }
        case 139: break;
        case 61: 
          { return newToken(JSTokenType.GREATER_GREATER_EQUAL, StringUtil.EMPTY);
          }
        case 140: break;
        case 11: 
          { return newToken(JSTokenType.DOT, StringUtil.EMPTY);
          }
        case 141: break;
        case 109: 
          { return newToken(JSTokenType.INSTANCEOF, StringUtil.EMPTY);
          }
        case 142: break;
        case 92: 
          { return newToken(JSTokenType.SUPER, StringUtil.EMPTY);
          }
        case 143: break;
        case 43: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return newToken(JSTokenType.STRING_DOUBLE, StringUtil.EMPTY);
          }
        case 144: break;
        case 44: 
          { return newToken(JSTokenType.STRING_DOUBLE, StringUtil.EMPTY);
          }
        case 145: break;
        case 66: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return newToken(JSTokenType.STRING_DOUBLE, StringUtil.EMPTY);
          }
        case 146: break;
        case 56: 
          { return newToken(JSTokenType.MINUS_MINUS, StringUtil.EMPTY);
          }
        case 147: break;
        case 25: 
          { return newToken(JSTokenType.LPAREN, StringUtil.EMPTY);
          }
        case 148: break;
        case 13: 
          { return newToken(JSTokenType.LBRACKET, StringUtil.EMPTY);
          }
        case 149: break;
        case 12: 
          { return newToken(JSTokenType.PLUS, StringUtil.EMPTY);
          }
        case 150: break;
        case 28: 
          { return newToken(JSTokenType.COLON, StringUtil.EMPTY);
          }
        case 151: break;
        case 87: 
          { return newToken(JSTokenType.BREAK, StringUtil.EMPTY);
          }
        case 152: break;
        case 16: 
          { return newToken(JSTokenType.STAR, StringUtil.EMPTY);
          }
        case 153: break;
        case 30: 
          { return newToken(JSTokenType.LESS_LESS, StringUtil.EMPTY);
          }
        case 154: break;
        case 77: 
          { return newToken(JSTokenType.MULTILINE_COMMENT, StringUtil.EMPTY);
          }
        case 155: break;
        case 22: 
          { return newToken(JSTokenType.CARET, StringUtil.EMPTY);
          }
        case 156: break;
        case 102: 
          { return newToken(JSTokenType.IMPORT, StringUtil.EMPTY);
          }
        case 157: break;
        case 48: 
          { return newToken(JSTokenType.DO, StringUtil.EMPTY);
          }
        case 158: break;
        case 83: 
          { return newToken(JSTokenType.WITH, StringUtil.EMPTY);
          }
        case 159: break;
        case 34: 
          { return newToken(JSTokenType.GREATER_EQUAL, StringUtil.EMPTY);
          }
        case 160: break;
        case 51: 
          { return newToken(JSTokenType.AMPERSAND_EQUAL, StringUtil.EMPTY);
          }
        case 161: break;
        case 96: 
          { return newToken(JSTokenType.EXPORT, StringUtil.EMPTY);
          }
        case 162: break;
        case 33: 
          { return newToken(JSTokenType.GREATER_GREATER, StringUtil.EMPTY);
          }
        case 163: break;
        case 97: 
          { return newToken(JSTokenType.RETURN, StringUtil.EMPTY);
          }
        case 164: break;
        case 36: 
          { return newToken(JSTokenType.PLUS_PLUS, StringUtil.EMPTY);
          }
        case 165: break;
        case 46: 
          { return newToken(JSTokenType.IF, StringUtil.EMPTY);
          }
        case 166: break;
        case 54: 
          { return newToken(JSTokenType.PIPE_PIPE, StringUtil.EMPTY);
          }
        case 167: break;
        case 55: 
          { return newToken(JSTokenType.MINUS_EQUAL, StringUtil.EMPTY);
          }
        case 168: break;
        case 100: 
          { return newToken(JSTokenType.TARGET, StringUtil.EMPTY);
          }
        case 169: break;
        case 14: 
          { return newToken(JSTokenType.RBRACKET, StringUtil.EMPTY);
          }
        case 170: break;
        case 40: 
          { return newToken(JSTokenType.STAR_EQUAL, StringUtil.EMPTY);
          }
        case 171: break;
        case 6: 
          { return newToken(JSTokenType.QUESTION, StringUtil.EMPTY);
          }
        case 172: break;
        case 67: 
          { return newToken(JSTokenType.SET, StringUtil.EMPTY);
          }
        case 173: break;
        case 69: 
          { return newToken(JSTokenType.NEW, StringUtil.EMPTY);
          }
        case 174: break;
        case 85: 
          { return newToken(JSTokenType.SDOC, StringUtil.EMPTY);
          }
        case 175: break;
        case 49: 
          { return newToken(JSTokenType.EQUAL_EQUAL, StringUtil.EMPTY);
          }
        case 176: break;
        case 84: 
          { return newToken(JSTokenType.VOID, StringUtil.EMPTY);
          }
        case 177: break;
        case 75: 
          { yybegin(YYINITIAL);
                        return newToken(JSTokenType.REGEX, StringUtil.EMPTY);
          }
        case 178: break;
        case 63: 
          { return newToken(JSTokenType.TEMPLATE_HEAD, StringUtil.EMPTY);
          }
        case 179: break;
        case 19: 
          { return newToken(JSTokenType.AMPERSAND, StringUtil.EMPTY);
          }
        case 180: break;
        case 64: 
          { return newToken(JSTokenType.FOR, StringUtil.EMPTY);
          }
        case 181: break;
        case 50: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL, StringUtil.EMPTY);
          }
        case 182: break;
        case 72: 
          { return newToken(JSTokenType.GET, StringUtil.EMPTY);
          }
        case 183: break;
        case 70: 
          { return newToken(JSTokenType.LET, StringUtil.EMPTY);
          }
        case 184: break;
        case 21: 
          { return newToken(JSTokenType.MINUS, StringUtil.EMPTY);
          }
        case 185: break;
        case 82: 
          { return newToken(JSTokenType.NULL, StringUtil.EMPTY);
          }
        case 186: break;
        case 91: 
          { return newToken(JSTokenType.CLASS, StringUtil.EMPTY);
          }
        case 187: break;
        case 24: 
          { return newToken(JSTokenType.SEMICOLON, StringUtil.EMPTY);
          }
        case 188: break;
        case 41: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return newToken(JSTokenType.STRING_SINGLE, StringUtil.EMPTY);
          }
        case 189: break;
        case 42: 
          { return newToken(JSTokenType.STRING_SINGLE, StringUtil.EMPTY);
          }
        case 190: break;
        case 65: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { return newToken(JSTokenType.STRING_SINGLE, StringUtil.EMPTY);
          }
        case 191: break;
        case 4: 
          { return newToken(JSTokenType.PERCENT, StringUtil.EMPTY);
          }
        case 192: break;
        case 45: 
          { return newToken(JSTokenType.OF, StringUtil.EMPTY);
          }
        case 193: break;
        case 106: 
          { return newToken(JSTokenType.DEFAULT, StringUtil.EMPTY);
          }
        case 194: break;
        case 73: 
          { return newToken(JSTokenType.EQUAL_EQUAL_EQUAL, StringUtil.EMPTY);
          }
        case 195: break;
        case 86: 
          { return newToken(JSTokenType.FALSE, StringUtil.EMPTY);
          }
        case 196: break;
        case 80: 
          { return newToken(JSTokenType.TRUE, StringUtil.EMPTY);
          }
        case 197: break;
        case 2: 
          { /* ignore */
          }
        case 198: break;
        case 15: 
          { char c = '\0';
                        char c2 = '\0';
                        try{
                            c = yycharat(1);
                        }catch(RuntimeException e){}
                        
                        try{
                            c2 = yycharat(2);
                        }catch(RuntimeException e){}
                        
                        // If we actually have a /* but didn't match it, this means we have a comment
                        // until the end of the file.
                        if(c == '*'){
                            if(c2 == '*')
                            {
                                throw new ForceReturnException(0, 0, "Forcing SDOC to end of document.", JSTokenType.SDOC);
                            }
                            else
                            {
                                throw new ForceReturnException(0, 0, "Forcing MULTILINE_COMMENT to end of document.", JSTokenType.MULTILINE_COMMENT);
                            }
                            
                        }else{
                            yypushback(1);
                            if (isValidDivisionStart())
                            {
                                yybegin(DIVISION);
                            }
                            else
                            {
                                yybegin(REGEX);
                            }
                        }
          }
        case 199: break;
        case 27: 
          { return newToken(JSTokenType.COMMA, StringUtil.EMPTY);
          }
        case 200: break;
        case 10: 
          { return newToken(JSTokenType.NUMBER, StringUtil.EMPTY);
          }
        case 201: break;
        case 104: 
          { return newToken(JSTokenType.FINALLY, StringUtil.EMPTY);
          }
        case 202: break;
        case 23: 
          { return newToken(JSTokenType.TILDE, StringUtil.EMPTY);
          }
        case 203: break;
        case 107: 
          { return newToken(JSTokenType.FUNCTION, StringUtil.EMPTY);
          }
        case 204: break;
        case 20: 
          { return newToken(JSTokenType.PIPE, StringUtil.EMPTY);
          }
        case 205: break;
        case 108: 
          { return newToken(JSTokenType.CONTINUE, StringUtil.EMPTY);
          }
        case 206: break;
        case 94: 
          { return newToken(JSTokenType.YIELD, StringUtil.EMPTY);
          }
        case 207: break;
        case 32: 
          { return newToken(JSTokenType.PERCENT_EQUAL, StringUtil.EMPTY);
          }
        case 208: break;
        case 31: 
          { return newToken(JSTokenType.LESS_EQUAL, StringUtil.EMPTY);
          }
        case 209: break;
        case 57: 
          { return newToken(JSTokenType.CARET_EQUAL, StringUtil.EMPTY);
          }
        case 210: break;
        case 71: 
          { return newToken(JSTokenType.VAR, StringUtil.EMPTY);
          }
        case 211: break;
        case 38: 
          { return newToken(JSTokenType.NO_SUB_TEMPLATE, StringUtil.EMPTY);
          }
        case 212: break;
        case 103: 
          { return newToken(JSTokenType.DELETE, StringUtil.EMPTY);
          }
        case 213: break;
        case 88: 
          { return newToken(JSTokenType.AWAIT, StringUtil.EMPTY);
          }
        case 214: break;
        case 90: 
          { return newToken(JSTokenType.CONST, StringUtil.EMPTY);
          }
        case 215: break;
        case 17: 
          { return newToken(JSTokenType.EQUAL, StringUtil.EMPTY);
          }
        case 216: break;
        case 89: 
          { return newToken(JSTokenType.CATCH, StringUtil.EMPTY);
          }
        case 217: break;
        case 5: 
          { return newToken(JSTokenType.GREATER, StringUtil.EMPTY);
          }
        case 218: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return newToken(JSTokenType.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
