/* The following code was generated by JFlex 1.4.3 on 6/26/17 10:33 AM */

// $codepro.audit.disable
/**
 * Aptana Studio
 * Copyright (c) 2005-2012 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the GNU Public License (GPL) v3 (with exceptions).
 * Please see the license.html included with this distribution for details.
 * Any modifications to this file must keep this entire header intact.
 */
package com.aptana.js.core.parsing;

import java.io.Reader;
import java.io.StringReader;

import java.util.ArrayList;
import java.util.List;

import beaver.Symbol;
import beaver.Scanner;

import org.eclipse.core.internal.utils.StringPool;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/26/17 10:33 AM from the specification file
 * <tt>/Users/cwilliams/repos/studio3/plugins/com.aptana.js.core/parsing/JS.flex</tt>
 */
public class JSFlexScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int REGEX = 4;
  public static final int DIVISION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\13\1\10\1\1\1\0\1\10\1\1\16\13\4\0\1\10\1\65"+
    "\1\24\1\0\1\12\1\3\1\66\1\26\1\74\1\75\1\31\1\23"+
    "\1\76\1\70\1\21\1\30\1\15\11\20\1\77\1\73\1\2\1\64"+
    "\1\4\1\5\1\0\4\17\1\22\1\17\21\11\1\16\2\11\1\32"+
    "\1\25\1\33\1\71\1\11\1\27\1\42\1\40\1\44\1\54\1\37"+
    "\1\36\1\55\1\47\1\52\1\34\1\43\1\56\1\63\1\51\1\50"+
    "\1\61\1\34\1\41\1\45\1\46\1\53\1\62\1\60\1\35\1\57"+
    "\1\34\1\6\1\67\1\7\1\72\41\13\2\0\4\11\4\0\1\11"+
    "\2\0\1\13\7\0\1\11\4\0\1\11\5\0\27\11\1\0\37\11"+
    "\1\0\u01ca\11\4\0\14\11\16\0\5\11\7\0\1\11\1\0\1\11"+
    "\21\0\160\13\5\11\1\0\2\11\2\0\4\11\10\0\1\11\1\0"+
    "\3\11\1\0\1\11\1\0\24\11\1\0\123\11\1\0\213\11\1\0"+
    "\5\13\2\0\236\11\11\0\46\11\2\0\1\11\7\0\47\11\7\0"+
    "\1\11\1\0\55\13\1\0\1\13\1\0\2\13\1\0\2\13\1\0"+
    "\1\13\10\0\33\11\5\0\3\11\15\0\5\13\6\0\1\11\4\0"+
    "\13\13\5\0\53\11\25\13\12\14\4\0\2\11\1\13\143\11\1\0"+
    "\1\11\10\13\1\0\6\13\2\11\2\13\1\0\4\13\2\11\12\14"+
    "\3\11\2\0\1\11\17\0\1\13\1\11\1\13\36\11\33\13\2\0"+
    "\131\11\13\13\1\11\16\0\12\14\41\11\11\13\2\11\4\0\1\11"+
    "\5\0\26\11\4\13\1\11\11\13\1\11\3\13\1\11\5\13\22\0"+
    "\31\11\3\13\104\0\1\11\1\0\13\11\67\0\33\13\1\0\4\13"+
    "\66\11\3\13\1\11\22\13\1\11\7\13\12\11\2\13\2\0\12\14"+
    "\1\0\7\11\1\0\7\11\1\0\3\13\1\0\10\11\2\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\1\11\3\0\4\11\2\0\1\13"+
    "\1\11\7\13\2\0\2\13\2\0\3\13\1\11\10\0\1\13\4\0"+
    "\2\11\1\0\3\11\2\13\2\0\12\14\4\11\7\0\1\11\5\0"+
    "\3\13\1\0\6\11\4\0\2\11\2\0\26\11\1\0\7\11\1\0"+
    "\2\11\1\0\2\11\1\0\2\11\2\0\1\13\1\0\5\13\4\0"+
    "\2\13\2\0\3\13\3\0\1\13\7\0\4\11\1\0\1\11\7\0"+
    "\12\14\2\13\3\11\1\13\13\0\3\13\1\0\11\11\1\0\3\11"+
    "\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0\1\13"+
    "\1\11\10\13\1\0\3\13\1\0\3\13\2\0\1\11\17\0\2\11"+
    "\2\13\2\0\12\14\1\0\1\11\17\0\3\13\1\0\10\11\2\0"+
    "\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11\2\0"+
    "\1\13\1\11\7\13\2\0\2\13\2\0\3\13\10\0\2\13\4\0"+
    "\2\11\1\0\3\11\2\13\2\0\12\14\1\0\1\11\20\0\1\13"+
    "\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11\1\0"+
    "\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11\4\0"+
    "\5\13\3\0\3\13\1\0\4\13\2\0\1\11\6\0\1\13\16\0"+
    "\12\14\11\0\1\11\7\0\3\13\1\0\10\11\1\0\3\11\1\0"+
    "\27\11\1\0\12\11\1\0\5\11\3\0\1\11\7\13\1\0\3\13"+
    "\1\0\4\13\7\0\2\13\1\0\2\11\6\0\2\11\2\13\2\0"+
    "\12\14\22\0\2\13\1\0\10\11\1\0\3\11\1\0\27\11\1\0"+
    "\12\11\1\0\5\11\2\0\1\13\1\11\7\13\1\0\3\13\1\0"+
    "\4\13\7\0\2\13\7\0\1\11\1\0\2\11\2\13\2\0\12\14"+
    "\1\0\2\11\17\0\2\13\1\0\10\11\1\0\3\11\1\0\51\11"+
    "\2\0\1\11\7\13\1\0\3\13\1\0\4\13\1\11\10\0\1\13"+
    "\10\0\2\11\2\13\2\0\12\14\12\0\6\11\2\0\2\13\1\0"+
    "\22\11\3\0\30\11\1\0\11\11\1\0\1\11\2\0\7\11\3\0"+
    "\1\13\4\0\6\13\1\0\1\13\1\0\10\13\22\0\2\13\15\0"+
    "\60\11\1\13\2\11\7\13\4\0\10\11\10\13\1\0\12\14\47\0"+
    "\2\11\1\0\1\11\2\0\2\11\1\0\1\11\2\0\1\11\6\0"+
    "\4\11\1\0\7\11\1\0\3\11\1\0\1\11\1\0\1\11\2\0"+
    "\2\11\1\0\4\11\1\13\2\11\6\13\1\0\2\13\1\11\2\0"+
    "\5\11\1\0\1\11\1\0\6\13\2\0\12\14\2\0\4\11\40\0"+
    "\1\11\27\0\2\13\6\0\12\14\13\0\1\13\1\0\1\13\1\0"+
    "\1\13\4\0\2\13\10\11\1\0\44\11\4\0\24\13\1\0\2\13"+
    "\5\11\13\13\1\0\44\13\11\0\1\13\71\0\53\11\24\13\1\11"+
    "\12\14\6\0\6\11\4\13\4\11\3\13\1\11\3\13\2\11\7\13"+
    "\3\11\4\13\15\11\14\13\1\11\1\13\12\14\4\13\2\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\53\11\1\0\u014d\11\1\0\4\11"+
    "\2\0\7\11\1\0\1\11\1\0\4\11\2\0\51\11\1\0\4\11"+
    "\2\0\41\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0\4\11"+
    "\2\0\17\11\1\0\71\11\1\0\4\11\2\0\103\11\2\0\3\13"+
    "\40\0\20\11\20\0\125\11\14\0\u026c\11\2\0\21\11\1\0\32\11"+
    "\5\0\113\11\3\0\3\11\17\0\15\11\1\0\4\11\3\13\13\0"+
    "\22\11\3\13\13\0\22\11\2\13\14\0\15\11\1\0\3\11\1\0"+
    "\2\13\14\0\64\11\40\13\3\0\1\11\3\0\2\11\1\13\2\0"+
    "\12\14\41\0\3\13\2\0\12\14\6\0\130\11\10\0\51\11\1\13"+
    "\1\11\5\0\106\11\12\0\35\11\3\0\14\13\4\0\14\13\12\0"+
    "\12\14\36\11\2\0\5\11\13\0\54\11\4\0\21\13\7\11\2\13"+
    "\6\0\12\14\46\0\27\11\5\13\4\0\65\11\12\13\1\0\35\13"+
    "\2\0\1\13\12\14\6\0\12\14\15\0\1\11\130\0\5\13\57\11"+
    "\21\13\7\11\4\0\12\14\21\0\11\13\14\0\3\13\36\11\15\13"+
    "\2\11\12\14\54\11\16\13\14\0\44\11\24\13\10\0\12\14\3\0"+
    "\3\11\12\14\44\11\122\0\3\13\1\0\25\13\4\11\1\13\4\11"+
    "\3\13\2\11\11\0\300\11\47\13\25\0\4\13\u0116\11\2\0\6\11"+
    "\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11\1\0\1\11"+
    "\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11\4\0\15\11"+
    "\5\0\3\11\1\0\7\11\16\0\5\13\32\0\5\13\20\0\2\11"+
    "\23\0\1\11\13\0\5\13\5\0\6\13\1\0\1\11\15\0\1\11"+
    "\20\0\15\11\3\0\33\11\25\0\15\13\4\0\1\13\3\0\14\13"+
    "\21\0\1\11\4\0\1\11\2\0\12\11\1\0\1\11\3\0\5\11"+
    "\6\0\1\11\1\0\1\11\1\0\1\11\1\0\4\11\1\0\13\11"+
    "\2\0\4\11\5\0\5\11\4\0\1\11\21\0\51\11\u0a77\0\57\11"+
    "\1\0\57\11\1\0\205\11\6\0\4\11\3\13\2\11\14\0\46\11"+
    "\1\0\1\11\5\0\1\11\2\0\70\11\7\0\1\11\17\0\1\13"+
    "\27\11\11\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\40\13\57\0"+
    "\1\11\u01d5\0\3\11\31\0\11\11\6\13\1\0\5\11\2\0\5\11"+
    "\4\0\126\11\2\0\2\13\2\0\3\11\1\0\132\11\1\0\4\11"+
    "\5\0\51\11\3\0\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11"+
    "\112\0\u51cd\11\63\0\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11"+
    "\12\14\2\11\24\0\57\11\1\13\4\0\12\13\1\0\31\11\7\0"+
    "\1\13\120\11\2\13\45\0\11\11\2\0\147\11\2\0\4\11\1\0"+
    "\4\11\14\0\13\11\115\0\12\11\1\13\3\11\1\13\4\11\1\13"+
    "\27\11\5\13\20\0\1\11\7\0\64\11\14\0\2\13\62\11\21\13"+
    "\13\0\12\14\6\0\22\13\6\11\3\0\1\11\4\0\12\14\34\11"+
    "\10\13\2\0\27\11\15\13\14\0\35\11\3\0\4\13\57\11\16\13"+
    "\16\0\1\11\12\14\46\0\51\11\16\13\11\0\3\11\1\13\10\11"+
    "\2\13\2\0\12\14\6\0\27\11\3\0\1\11\1\13\4\0\60\11"+
    "\1\13\1\11\3\13\2\11\2\13\5\11\2\13\1\11\1\13\1\11"+
    "\30\0\3\11\2\0\13\11\5\13\2\0\3\11\2\13\12\0\6\11"+
    "\2\0\6\11\2\0\6\11\11\0\7\11\1\0\7\11\221\0\43\11"+
    "\10\13\1\0\2\13\2\0\12\14\6\0\u2ba4\11\14\0\27\11\4\0"+
    "\61\11\u2104\0\u016e\11\2\0\152\11\46\0\7\11\14\0\5\11\5\0"+
    "\1\11\1\13\12\11\1\0\15\11\1\0\5\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\154\11\41\0\u016b\11\22\0\100\11\2\0"+
    "\66\11\50\0\15\11\3\0\20\13\20\0\7\13\14\0\2\11\30\0"+
    "\3\11\31\0\1\11\6\0\5\11\1\0\207\11\2\0\1\13\4\0"+
    "\1\11\13\0\12\14\7\0\32\11\4\0\1\11\1\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\3\0"+
    "\2\11\3\0\2\11\22\0\3\13\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\2\12\1\13\1\14\3\1\1\15\1\16"+
    "\1\17\1\20\22\11\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\1"+
    "\2\35\2\0\1\36\2\0\1\37\1\40\1\41\1\42"+
    "\3\0\1\43\1\12\3\0\1\44\1\45\1\0\1\46"+
    "\1\1\1\0\1\1\2\0\1\47\1\50\1\0\1\51"+
    "\12\11\1\52\14\11\1\53\2\11\1\54\1\55\2\11"+
    "\1\56\12\11\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\3\0\1\71\1\72"+
    "\2\0\1\73\1\74\1\0\1\75\2\0\1\12\1\0"+
    "\1\12\1\76\2\0\1\77\2\0\1\50\1\100\2\0"+
    "\2\11\1\101\15\11\1\102\4\11\1\103\4\11\1\104"+
    "\7\11\1\105\1\106\7\11\1\107\1\11\1\110\1\111"+
    "\1\112\1\0\1\113\1\0\1\43\1\75\1\0\1\47"+
    "\1\77\2\0\1\114\1\0\1\115\5\11\1\116\1\117"+
    "\3\11\1\120\7\11\1\121\2\11\1\122\1\11\1\123"+
    "\11\11\1\124\4\11\1\125\1\114\1\126\1\127\4\11"+
    "\1\130\1\11\1\131\1\132\1\133\1\11\1\134\1\11"+
    "\1\135\2\11\1\136\10\11\1\137\1\140\7\11\1\141"+
    "\1\142\1\11\1\143\1\144\1\145\1\146\2\11\1\147"+
    "\3\11\1\150\3\11\1\151\1\152\1\11\1\153\4\11"+
    "\1\154\2\11\1\155\1\156\1\157\1\160\3\11\1\161"+
    "\2\11\1\162\1\11\1\163\1\164\1\165";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\300\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\300\0\300\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\u0b00\0\u0200\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0b00\0\u0200\0\u0c00\0\u0c40\0\u0c80\0\300"+
    "\0\300\0\u0cc0\0\300\0\u0d00\0\u0240\0\u0d40\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\u0e80\0\300\0\300\0\u0ec0\0\300\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0440\0\u0fc0\0\u1000\0\u1040\0\u1080\0\300"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u0280\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u0280"+
    "\0\u1640\0\u1680\0\u0280\0\u16c0\0\u1700\0\u1740\0\u0280\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\300\0\u1a00\0\u1a40\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\u1a80\0\u1ac0\0\u1b00\0\u1a80"+
    "\0\300\0\u1b40\0\u1b80\0\u1bc0\0\300\0\u1c00\0\u1c40\0\u0d80"+
    "\0\u1c80\0\u1cc0\0\u1cc0\0\u0e40\0\300\0\u0f00\0\u0f80\0\u1d00"+
    "\0\u1000\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0"+
    "\0\u0280\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u0280\0\u2240"+
    "\0\u2280\0\u22c0\0\u2300\0\u0280\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\u0280\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0"+
    "\0\u0280\0\u0280\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740"+
    "\0\u2780\0\u0280\0\u27c0\0\300\0\300\0\u2800\0\u2840\0\300"+
    "\0\u1c40\0\300\0\300\0\u1d00\0\300\0\300\0\u2880\0\u28c0"+
    "\0\u28c0\0\u2900\0\u0280\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40"+
    "\0\u0280\0\u0280\0\u2a80\0\u2ac0\0\u2b00\0\u0280\0\u2b40\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u0280\0\u2d00\0\u2d40"+
    "\0\u0280\0\u2d80\0\u0280\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0"+
    "\0\u2f00\0\u2f40\0\u2f80\0\u2fc0\0\u0280\0\u3000\0\u3040\0\u3080"+
    "\0\u30c0\0\u0280\0\300\0\300\0\u0280\0\u3100\0\u3140\0\u3180"+
    "\0\u31c0\0\u0280\0\u3200\0\u0280\0\u0280\0\u0280\0\u3240\0\u0280"+
    "\0\u3280\0\u0280\0\u32c0\0\u3300\0\u0280\0\u3340\0\u3380\0\u33c0"+
    "\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u0280\0\u0280\0\u3540"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u0280\0\u0280"+
    "\0\u3700\0\u0280\0\u0280\0\u0280\0\u0280\0\u3740\0\u3780\0\u0280"+
    "\0\u37c0\0\u3800\0\u3840\0\u0280\0\u3880\0\u38c0\0\u3900\0\u0280"+
    "\0\u0280\0\u3940\0\u0280\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u0280"+
    "\0\u3a80\0\u3ac0\0\u0280\0\u0280\0\u0280\0\u0280\0\u3b00\0\u3b40"+
    "\0\u3b80\0\u0280\0\u3bc0\0\u3c00\0\u0280\0\u3c40\0\u0280\0\u0280"+
    "\0\u0280";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\5\2\14\1\4\1\15\1\16\2\14\1\15\1\17"+
    "\1\14\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\14\1\30\1\31\1\32\1\33\1\34"+
    "\1\14\1\35\1\36\1\37\1\14\1\40\1\41\1\42"+
    "\1\14\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\14\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\4\1\5\1\66"+
    "\3\4\1\67\1\4\1\5\13\4\1\70\1\4\1\70"+
    "\1\4\1\71\50\4\1\5\1\66\3\4\1\67\1\4"+
    "\1\5\13\4\1\70\1\4\1\70\1\4\1\72\47\4"+
    "\101\0\1\5\1\73\3\0\1\74\1\0\1\5\71\0"+
    "\1\75\1\76\1\0\1\77\56\0\1\100\77\0\1\101"+
    "\17\0\1\102\57\0\1\103\16\0\1\104\74\0\12\105"+
    "\1\106\14\105\1\107\50\105\11\0\10\14\1\0\1\14"+
    "\11\0\30\14\30\0\2\15\2\0\1\15\1\110\1\111"+
    "\14\0\1\111\54\0\2\15\1\112\1\0\1\15\1\110"+
    "\1\111\12\0\1\112\1\0\1\111\54\0\2\110\2\0"+
    "\1\110\1\113\101\0\1\114\40\0\1\115\13\0\1\116"+
    "\1\0\22\116\1\117\1\120\52\116\1\121\1\0\23\121"+
    "\1\122\1\117\51\121\12\123\1\124\14\123\1\125\50\123"+
    "\30\0\1\126\1\127\132\0\1\130\24\0\10\14\1\0"+
    "\1\14\11\0\5\14\1\131\1\132\5\14\1\133\1\14"+
    "\1\134\1\135\10\14\25\0\10\14\1\0\1\14\11\0"+
    "\1\14\1\136\13\14\1\137\4\14\1\140\5\14\25\0"+
    "\10\14\1\0\1\14\11\0\5\14\1\141\22\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\142\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\11\14\1\143\12\14\1\144"+
    "\3\14\25\0\10\14\1\0\1\14\11\0\6\14\1\145"+
    "\5\14\1\146\5\14\1\147\5\14\25\0\10\14\1\0"+
    "\1\14\11\0\3\14\1\150\6\14\1\151\4\14\1\152"+
    "\4\14\1\153\3\14\25\0\10\14\1\0\1\14\11\0"+
    "\5\14\1\154\1\155\4\14\1\156\7\14\1\157\4\14"+
    "\25\0\10\14\1\0\1\14\11\0\2\14\1\160\25\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\161\13\14"+
    "\1\162\10\14\25\0\10\14\1\0\1\14\11\0\2\14"+
    "\1\163\12\14\1\164\11\14\1\165\25\0\10\14\1\0"+
    "\1\14\11\0\3\14\1\166\10\14\1\167\13\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\170\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\171\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\16\14\1\172\11\14\25\0"+
    "\10\14\1\0\1\14\11\0\13\14\1\173\2\14\1\174"+
    "\11\14\25\0\10\14\1\0\1\14\11\0\5\14\1\175"+
    "\1\176\10\14\1\177\10\14\25\0\10\14\1\0\1\14"+
    "\11\0\6\14\1\200\5\14\1\201\13\14\20\0\1\202"+
    "\57\0\1\203\77\0\1\204\77\0\1\205\1\0\1\206"+
    "\75\0\1\207\2\0\1\210\74\0\1\211\3\0\1\212"+
    "\73\0\1\213\16\0\1\76\1\0\1\77\117\0\1\4"+
    "\136\0\1\214\13\0\1\215\1\0\23\215\1\216\2\215"+
    "\1\0\1\215\1\217\31\215\1\220\13\215\64\0\1\221"+
    "\13\0\3\76\1\222\74\76\5\77\1\223\72\77\4\0"+
    "\1\224\57\0\1\225\13\0\3\104\1\226\74\104\6\105"+
    "\1\227\3\105\1\106\14\105\1\107\50\105\12\230\1\231"+
    "\65\230\14\0\2\110\2\0\1\110\1\0\1\111\14\0"+
    "\1\111\54\0\2\232\2\0\1\232\2\0\1\233\44\0"+
    "\1\233\24\0\1\234\1\0\2\234\1\0\1\234\13\0"+
    "\3\234\1\0\1\234\1\0\1\234\7\0\1\234\44\0"+
    "\1\235\56\0\1\116\1\0\22\116\1\117\1\236\152\116"+
    "\1\121\1\0\23\121\1\237\1\117\151\121\6\123\1\240"+
    "\3\123\1\124\14\123\1\125\50\123\12\241\1\242\65\241"+
    "\1\243\1\0\26\243\1\244\47\243\31\245\1\246\46\245"+
    "\11\0\10\14\1\0\1\14\11\0\14\14\1\247\13\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\250\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\251\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\252\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\253\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\254\12\14"+
    "\1\255\2\14\25\0\10\14\1\0\1\14\11\0\17\14"+
    "\1\256\10\14\25\0\10\14\1\0\1\14\11\0\11\14"+
    "\1\257\16\14\25\0\10\14\1\0\1\14\11\0\3\14"+
    "\1\260\24\14\25\0\10\14\1\0\1\14\11\0\12\14"+
    "\1\261\15\14\25\0\10\14\1\0\1\14\11\0\6\14"+
    "\1\262\21\14\25\0\10\14\1\0\1\14\11\0\11\14"+
    "\1\263\1\264\15\14\25\0\10\14\1\0\1\14\11\0"+
    "\15\14\1\265\12\14\25\0\10\14\1\0\1\14\11\0"+
    "\6\14\1\266\21\14\25\0\10\14\1\0\1\14\11\0"+
    "\12\14\1\267\15\14\25\0\10\14\1\0\1\14\11\0"+
    "\6\14\1\270\21\14\25\0\10\14\1\0\1\14\11\0"+
    "\25\14\1\271\2\14\25\0\10\14\1\0\1\14\11\0"+
    "\16\14\1\272\11\14\25\0\10\14\1\0\1\14\11\0"+
    "\17\14\1\273\3\14\1\274\4\14\25\0\10\14\1\0"+
    "\1\14\11\0\5\14\1\275\22\14\25\0\10\14\1\0"+
    "\1\14\11\0\5\14\1\276\10\14\1\277\11\14\25\0"+
    "\10\14\1\0\1\14\11\0\25\14\1\300\2\14\25\0"+
    "\10\14\1\0\1\14\11\0\24\14\1\301\3\14\25\0"+
    "\10\14\1\0\1\14\11\0\22\14\1\302\5\14\25\0"+
    "\10\14\1\0\1\14\11\0\11\14\1\303\1\304\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\25\14\1\305\2\14"+
    "\25\0\10\14\1\0\1\14\11\0\2\14\1\306\1\14"+
    "\1\307\15\14\1\310\5\14\25\0\10\14\1\0\1\14"+
    "\11\0\12\14\1\311\15\14\25\0\10\14\1\0\1\14"+
    "\11\0\12\14\1\312\15\14\25\0\10\14\1\0\1\14"+
    "\11\0\3\14\1\313\24\14\25\0\10\14\1\0\1\14"+
    "\11\0\16\14\1\314\11\14\25\0\10\14\1\0\1\14"+
    "\11\0\12\14\1\315\15\14\25\0\10\14\1\0\1\14"+
    "\11\0\14\14\1\316\1\14\1\317\11\14\25\0\10\14"+
    "\1\0\1\14\11\0\10\14\1\320\17\14\25\0\10\14"+
    "\1\0\1\14\11\0\4\14\1\321\23\14\25\0\10\14"+
    "\1\0\1\14\11\0\5\14\1\322\22\14\25\0\10\14"+
    "\1\0\1\14\11\0\16\14\1\323\11\14\100\0\1\324"+
    "\77\0\1\325\13\0\1\215\1\0\23\215\1\216\2\215"+
    "\1\326\1\215\1\217\46\215\1\0\76\215\1\217\1\0"+
    "\23\217\1\327\5\217\1\215\44\217\3\76\1\222\1\5"+
    "\73\76\4\77\1\5\1\223\72\77\64\0\1\330\13\0"+
    "\3\104\1\226\3\104\1\5\70\104\27\331\1\332\50\331"+
    "\6\230\1\333\3\230\1\231\65\230\14\0\2\232\2\0"+
    "\1\232\57\0\27\334\1\335\50\334\6\241\1\336\3\241"+
    "\1\242\65\241\1\243\1\0\76\243\1\244\1\0\76\244"+
    "\31\245\1\337\46\245\30\340\1\341\1\342\46\340\11\0"+
    "\10\14\1\0\1\14\11\0\27\14\1\343\25\0\10\14"+
    "\1\0\1\14\11\0\11\14\1\344\16\14\25\0\10\14"+
    "\1\0\1\14\11\0\6\14\1\345\21\14\25\0\10\14"+
    "\1\0\1\14\11\0\10\14\1\346\17\14\25\0\10\14"+
    "\1\0\1\14\11\0\3\14\1\347\24\14\25\0\10\14"+
    "\1\0\1\14\11\0\14\14\1\350\13\14\25\0\10\14"+
    "\1\0\1\14\11\0\27\14\1\351\25\0\10\14\1\0"+
    "\1\14\11\0\3\14\1\352\24\14\25\0\10\14\1\0"+
    "\1\14\11\0\6\14\1\353\21\14\25\0\10\14\1\0"+
    "\1\14\11\0\17\14\1\354\10\14\25\0\10\14\1\0"+
    "\1\14\11\0\16\14\1\355\11\14\25\0\10\14\1\0"+
    "\1\14\11\0\3\14\1\356\24\14\25\0\10\14\1\0"+
    "\1\14\11\0\10\14\1\357\17\14\25\0\10\14\1\0"+
    "\1\14\11\0\11\14\1\360\1\361\15\14\25\0\10\14"+
    "\1\0\1\14\11\0\11\14\1\362\16\14\25\0\10\14"+
    "\1\0\1\14\11\0\12\14\1\363\15\14\25\0\10\14"+
    "\1\0\1\14\11\0\3\14\1\364\24\14\25\0\10\14"+
    "\1\0\1\14\11\0\12\14\1\365\15\14\25\0\10\14"+
    "\1\0\1\14\11\0\3\14\1\366\24\14\25\0\10\14"+
    "\1\0\1\14\11\0\21\14\1\367\6\14\25\0\10\14"+
    "\1\0\1\14\11\0\14\14\1\370\13\14\25\0\10\14"+
    "\1\0\1\14\11\0\11\14\1\371\16\14\25\0\10\14"+
    "\1\0\1\14\11\0\3\14\1\372\24\14\25\0\10\14"+
    "\1\0\1\14\11\0\22\14\1\373\5\14\25\0\10\14"+
    "\1\0\1\14\11\0\12\14\1\374\15\14\25\0\10\14"+
    "\1\0\1\14\11\0\3\14\1\375\24\14\25\0\10\14"+
    "\1\0\1\14\11\0\14\14\1\376\5\14\1\377\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\6\14\1\u0100\21\14"+
    "\25\0\10\14\1\0\1\14\11\0\17\14\1\u0101\10\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\u0102\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\u0103\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\u0104\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\13\14\1\u0105\14\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0106\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\26\14\1\u0107\1\14"+
    "\25\0\10\14\1\0\1\14\11\0\7\14\1\u0108\20\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\u0109\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\20\14\1\u010a\7\14"+
    "\50\0\30\326\14\0\1\217\1\0\76\217\30\245\1\u010b"+
    "\1\337\46\245\31\340\1\342\76\340\1\u010c\1\342\46\340"+
    "\11\0\10\14\1\0\1\14\11\0\3\14\1\u010d\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\u010e\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u010f\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\u0110\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\u0111\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\7\14\1\u0112\20\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\u0113\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0114\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\13\14\1\u0115\14\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0116\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\16\14\1\u0117\11\14"+
    "\25\0\10\14\1\0\1\14\11\0\11\14\1\u0118\16\14"+
    "\25\0\10\14\1\0\1\14\11\0\16\14\1\u0119\11\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\u011a\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\10\14\1\u011b\17\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\u011c\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\24\14\1\u011d\3\14"+
    "\25\0\10\14\1\0\1\14\11\0\14\14\1\u011e\13\14"+
    "\25\0\10\14\1\0\1\14\11\0\6\14\1\u011f\21\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\u0120\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\5\14\1\u0121\22\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\u0122\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\17\14\1\u0123\10\14"+
    "\25\0\10\14\1\0\1\14\11\0\21\14\1\u0124\6\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0125\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\20\14\1\u0126\7\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\u0127\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\3\14\1\u0128\24\14"+
    "\25\0\10\14\1\0\1\14\11\0\6\14\1\u0129\21\14"+
    "\25\0\10\14\1\0\1\14\11\0\6\14\1\u012a\21\14"+
    "\25\0\10\14\1\0\1\14\11\0\16\14\1\u012b\11\14"+
    "\25\0\10\14\1\0\1\14\11\0\22\14\1\u012c\5\14"+
    "\25\0\10\14\1\0\1\14\11\0\16\14\1\u012d\11\14"+
    "\25\0\10\14\1\0\1\14\11\0\20\14\1\u012e\7\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u012f\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\u0130\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\u0131\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\10\14\1\u0132\17\14"+
    "\25\0\10\14\1\0\1\14\11\0\13\14\1\u0133\14\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0134\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\2\14\1\u0135\25\14"+
    "\25\0\10\14\1\0\1\14\11\0\15\14\1\u0136\12\14"+
    "\25\0\10\14\1\0\1\14\11\0\2\14\1\u0137\25\14"+
    "\25\0\10\14\1\0\1\14\11\0\12\14\1\u0138\15\14"+
    "\25\0\10\14\1\0\1\14\11\0\27\14\1\u0139\25\0"+
    "\10\14\1\0\1\14\11\0\22\14\1\u013a\5\14\25\0"+
    "\10\14\1\0\1\14\11\0\21\14\1\u013b\6\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u013c\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\10\14\1\u013d\17\14\25\0"+
    "\10\14\1\0\1\14\11\0\12\14\1\u013e\15\14\25\0"+
    "\10\14\1\0\1\14\11\0\21\14\1\u013f\6\14\25\0"+
    "\10\14\1\0\1\14\11\0\10\14\1\u0140\17\14\25\0"+
    "\10\14\1\0\1\14\11\0\23\14\1\u0141\4\14\25\0"+
    "\10\14\1\0\1\14\11\0\14\14\1\u0142\13\14\25\0"+
    "\10\14\1\0\1\14\11\0\11\14\1\u0143\16\14\25\0"+
    "\10\14\1\0\1\14\11\0\17\14\1\u0144\10\14\25\0"+
    "\10\14\1\0\1\14\11\0\10\14\1\u0145\17\14\25\0"+
    "\10\14\1\0\1\14\11\0\6\14\1\u0146\21\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u0147\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\12\14\1\u0148\15\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u0149\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\12\14\1\u014a\15\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u014b\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u014c\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\15\14\1\u014d\12\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u014e\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u014f\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\10\14\1\u0150\17\14\25\0"+
    "\10\14\1\0\1\14\11\0\15\14\1\u0151\12\14\25\0"+
    "\10\14\1\0\1\14\11\0\5\14\1\u0152\22\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u0153\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\14\14\1\u0154\13\14\25\0"+
    "\10\14\1\0\1\14\11\0\3\14\1\u0155\24\14\25\0"+
    "\10\14\1\0\1\14\11\0\12\14\1\u0156\15\14\25\0"+
    "\10\14\1\0\1\14\11\0\20\14\1\u0157\7\14\25\0"+
    "\10\14\1\0\1\14\11\0\2\14\1\u0158\25\14\25\0"+
    "\10\14\1\0\1\14\11\0\11\14\1\u0159\16\14\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15488];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\14\1\2\11\30\1\6\11"+
    "\5\1\2\0\1\1\2\0\2\11\1\1\1\11\3\0"+
    "\2\1\3\0\2\11\1\0\1\11\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\11\51\1\1\11\2\1\10\11"+
    "\3\0\1\1\1\11\2\0\1\1\1\11\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\1\11\2\0\1\1\2\0"+
    "\2\1\2\0\55\1\2\11\1\1\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\2\0\1\1\1\0\50\1\2\11"+
    "\115\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	// last token used for look behind. Also needed when implementing the ITokenScanner interface
	private Symbol _lastToken;
	
	private StringPool _stringPool;

	// flag indicating if we should collect comments or not
	private boolean _collectComments = true;

	// accumulator of consecutive vsdoc lines, later added to vsdocComments as a single entity
	private List<Symbol> _vsdocAccumulator = new ArrayList<Symbol>();

	// comment collections, by type
	private List<Symbol> _sdocComments = new ArrayList<Symbol>();
	private List<Symbol> _vsdocComments = new ArrayList<Symbol>();
	private List<Symbol> _singleLineComments = new ArrayList<Symbol>();
	private List<Symbol> _multiLineComments = new ArrayList<Symbol>();

	public JSFlexScanner()
	{
		this((Reader) null);
	}

	public Symbol getLastToken()
	{
		return _lastToken;
	}

	public List<Symbol> getSDocComments()
	{
		return _sdocComments;
	}

	public List<Symbol> getVSDocComments()
	{
		return _vsdocComments;
	}

	public List<Symbol> getSingleLineComments()
	{
		return _singleLineComments;
	}

	public List<Symbol> getMultiLineComments()
	{
		return _multiLineComments;
	}

	private Symbol newToken(JSTokenType type, Object value)
	{
		return newToken(type.getIndex(), value);
	}

	private Symbol newToken(JSTokenType type)
	{
		return newToken(type.getIndex(), type.getName());
	}
	
	private String pool(String value)
	{
		return _stringPool.add(value);
	}

	private Symbol newToken(short id, Object value)
	{
		return new Symbol(id, yychar, yychar + yylength() - 1, value);
	}

	public Symbol nextToken() throws java.io.IOException, Scanner.Exception
	{
		// clear accumulators
		_vsdocAccumulator.clear();

		try
		{
			// get next token
			_lastToken = yylex();
		} 
		catch (Scanner.Exception e)
		{
			// create default token type
			String text = yytext();
			int end = yychar + text.length() - 1;

			_lastToken = new Symbol(JSTokenType.EOF.getIndex(), yychar, end, text);
		}
		finally
		{
			// process any accumulated vsdoc lines
			if (!_vsdocAccumulator.isEmpty())
			{
				Symbol vsdoc = newToken(JSTokenType.VSDOC, new ArrayList<Symbol>(_vsdocAccumulator));

				_vsdocComments.add(vsdoc);
			}
		}

		return _lastToken;
	}

	private boolean isValidDivisionStart()
	{
		if (_lastToken != null)
		{
			switch (_lastToken.getId())
			{
				case Terminals.IDENTIFIER:
				case Terminals.NUMBER:
				case Terminals.REGEX:
				case Terminals.STRING:
				case Terminals.RPAREN:
				case Terminals.PLUS_PLUS:
				case Terminals.MINUS_MINUS:
				case Terminals.RBRACKET:
				case Terminals.RCURLY:
				case Terminals.FALSE:
				case Terminals.NULL:
				case Terminals.THIS:
				case Terminals.TRUE:
					return true;
			}
		}

		return false;
	}

	public void setCollectComments(boolean flag)
	{
		_collectComments = flag;
	}

	public void setSource(String source)
	{
		yyreset(new StringReader(source));

		_stringPool = new StringPool();

		// clear last token
		_lastToken = null;

		// reset comment collection lists
		_singleLineComments.clear();
		_multiLineComments.clear();
		_sdocComments.clear();
		_vsdocComments.clear();
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JSFlexScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JSFlexScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 97: 
          { return newToken(JSTokenType.EXPORT);
          }
        case 118: break;
        case 78: 
          { return newToken(JSTokenType.ENUM);
          }
        case 119: break;
        case 13: 
          { yypushback(1);
						if (isValidDivisionStart())
						{
							yybegin(DIVISION);
						}
						else
						{
							yybegin(REGEX);
						}
          }
        case 120: break;
        case 40: 
          { if (_collectComments)
							{
								_singleLineComments.add(newToken(JSTokenType.SINGLELINE_COMMENT, yytext()));
							}
          }
        case 121: break;
        case 57: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH_EQUAL);
          }
        case 122: break;
        case 52: 
          { return newToken(JSTokenType.PIPE_EQUAL);
          }
        case 123: break;
        case 65: 
          { return newToken(JSTokenType.FOR);
          }
        case 124: break;
        case 115: 
          { return newToken(JSTokenType.PROTECTED);
          }
        case 125: break;
        case 24: 
          { return newToken(JSTokenType.SEMICOLON);
          }
        case 126: break;
        case 68: 
          { return newToken(JSTokenType.NEW);
          }
        case 127: break;
        case 36: 
          { return newToken(JSTokenType.PLUS_PLUS);
          }
        case 128: break;
        case 59: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER);
          }
        case 129: break;
        case 98: 
          { return newToken(JSTokenType.RETURN);
          }
        case 130: break;
        case 87: 
          { return newToken(JSTokenType.FALSE);
          }
        case 131: break;
        case 61: 
          { return newToken(Terminals.TEMPLATE_MIDDLE, pool(yytext()));
          }
        case 132: break;
        case 15: 
          { return newToken(JSTokenType.LBRACKET);
          }
        case 133: break;
        case 102: 
          { return newToken(JSTokenType.TYPEOF);
          }
        case 134: break;
        case 95: 
          { return newToken(JSTokenType.YIELD);
          }
        case 135: break;
        case 111: 
          { return newToken(JSTokenType.FUNCTION);
          }
        case 136: break;
        case 45: 
          { return newToken(JSTokenType.IN);
          }
        case 137: break;
        case 114: 
          { return newToken(JSTokenType.INTERFACE);
          }
        case 138: break;
        case 41: 
          { return newToken(JSTokenType.STAR_EQUAL);
          }
        case 139: break;
        case 55: 
          { return newToken(JSTokenType.MINUS_MINUS);
          }
        case 140: break;
        case 10: 
          { return newToken(Terminals.NUMBER, pool(yytext()));
          }
        case 141: break;
        case 50: 
          { return newToken(JSTokenType.AMPERSAND_EQUAL);
          }
        case 142: break;
        case 88: 
          { return newToken(JSTokenType.BREAK);
          }
        case 143: break;
        case 67: 
          { return newToken(JSTokenType.TRY);
          }
        case 144: break;
        case 66: 
          { return newToken(JSTokenType.SET);
          }
        case 145: break;
        case 34: 
          { return newToken(JSTokenType.GREATER_EQUAL);
          }
        case 146: break;
        case 77: 
          { return newToken(JSTokenType.FROM);
          }
        case 147: break;
        case 117: 
          { return newToken(JSTokenType.IMPLEMENTS);
          }
        case 148: break;
        case 75: 
          { return newToken(JSTokenType.GREATER_GREATER_GREATER_EQUAL);
          }
        case 149: break;
        case 63: 
          { return newToken(Terminals.TEMPLATE_HEAD, pool(yytext()));
          }
        case 150: break;
        case 54: 
          { return newToken(JSTokenType.MINUS_EQUAL);
          }
        case 151: break;
        case 37: 
          { return newToken(JSTokenType.PLUS_EQUAL);
          }
        case 152: break;
        case 64: 
          { if (_collectComments)
							{
								_vsdocAccumulator.add(newToken(JSTokenType.VSDOC, yytext()));
							}
          }
        case 153: break;
        case 73: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL_EQUAL);
          }
        case 154: break;
        case 99: 
          { return newToken(JSTokenType.STATIC);
          }
        case 155: break;
        case 11: 
          { return newToken(JSTokenType.DOT);
          }
        case 156: break;
        case 93: 
          { return newToken(JSTokenType.SUPER);
          }
        case 157: break;
        case 80: 
          { return newToken(JSTokenType.CASE);
          }
        case 158: break;
        case 21: 
          { return newToken(JSTokenType.MINUS);
          }
        case 159: break;
        case 16: 
          { return newToken(JSTokenType.RBRACKET);
          }
        case 160: break;
        case 38: 
          { return newToken(Terminals.STRING, pool(yytext()));
          }
        case 161: break;
        case 17: 
          { return newToken(JSTokenType.EQUAL);
          }
        case 162: break;
        case 18: 
          { return newToken(JSTokenType.EXCLAMATION);
          }
        case 163: break;
        case 14: 
          { return newToken(JSTokenType.STAR);
          }
        case 164: break;
        case 44: 
          { return newToken(JSTokenType.IF);
          }
        case 165: break;
        case 105: 
          { return newToken(JSTokenType.PUBLIC);
          }
        case 166: break;
        case 107: 
          { return newToken(JSTokenType.EXTENDS);
          }
        case 167: break;
        case 28: 
          { return newToken(JSTokenType.COLON);
          }
        case 168: break;
        case 26: 
          { return newToken(JSTokenType.RPAREN);
          }
        case 169: break;
        case 85: 
          { return newToken(JSTokenType.VOID);
          }
        case 170: break;
        case 23: 
          { return newToken(JSTokenType.TILDE);
          }
        case 171: break;
        case 30: 
          { return newToken(JSTokenType.LESS_LESS);
          }
        case 172: break;
        case 72: 
          { return newToken(JSTokenType.EQUAL_EQUAL_EQUAL);
          }
        case 173: break;
        case 69: 
          { return newToken(JSTokenType.GET);
          }
        case 174: break;
        case 112: 
          { return newToken(JSTokenType.CONTINUE);
          }
        case 175: break;
        case 53: 
          { return newToken(JSTokenType.PIPE_PIPE);
          }
        case 176: break;
        case 101: 
          { return newToken(JSTokenType.TARGET);
          }
        case 177: break;
        case 43: 
          { return newToken(JSTokenType.OF);
          }
        case 178: break;
        case 3: 
          { return newToken(JSTokenType.LESS);
          }
        case 179: break;
        case 70: 
          { return newToken(JSTokenType.LET);
          }
        case 180: break;
        case 5: 
          { return newToken(JSTokenType.GREATER);
          }
        case 181: break;
        case 96: 
          { return newToken(JSTokenType.WHILE);
          }
        case 182: break;
        case 79: 
          { return newToken(JSTokenType.ELSE);
          }
        case 183: break;
        case 90: 
          { return newToken(JSTokenType.CATCH);
          }
        case 184: break;
        case 86: 
          { if (_collectComments)
							{
								_sdocComments.add(newToken(JSTokenType.SDOC, yytext()));
							}
          }
        case 185: break;
        case 33: 
          { return newToken(JSTokenType.GREATER_GREATER);
          }
        case 186: break;
        case 27: 
          { return newToken(JSTokenType.COMMA);
          }
        case 187: break;
        case 71: 
          { return newToken(JSTokenType.VAR);
          }
        case 188: break;
        case 31: 
          { return newToken(JSTokenType.LESS_EQUAL);
          }
        case 189: break;
        case 29: 
          { yybegin(YYINITIAL);
						return newToken(JSTokenType.FORWARD_SLASH);
          }
        case 190: break;
        case 100: 
          { return newToken(JSTokenType.SWITCH);
          }
        case 191: break;
        case 22: 
          { return newToken(JSTokenType.CARET);
          }
        case 192: break;
        case 25: 
          { return newToken(JSTokenType.LPAREN);
          }
        case 193: break;
        case 116: 
          { return newToken(JSTokenType.INSTANCEOF);
          }
        case 194: break;
        case 60: 
          { return newToken(JSTokenType.GREATER_GREATER_EQUAL);
          }
        case 195: break;
        case 8: 
          { return newToken(JSTokenType.RCURLY);
          }
        case 196: break;
        case 4: 
          { return newToken(JSTokenType.PERCENT);
          }
        case 197: break;
        case 104: 
          { return newToken(JSTokenType.DELETE);
          }
        case 198: break;
        case 32: 
          { return newToken(JSTokenType.PERCENT_EQUAL);
          }
        case 199: break;
        case 56: 
          { return newToken(JSTokenType.CARET_EQUAL);
          }
        case 200: break;
        case 109: 
          { return newToken(JSTokenType.PRIVATE);
          }
        case 201: break;
        case 48: 
          { return newToken(JSTokenType.EQUAL_EQUAL);
          }
        case 202: break;
        case 113: 
          { return newToken(JSTokenType.DEBUGGER);
          }
        case 203: break;
        case 42: 
          { return newToken(JSTokenType.AS);
          }
        case 204: break;
        case 106: 
          { return newToken(JSTokenType.FINALLY);
          }
        case 205: break;
        case 110: 
          { return newToken(JSTokenType.PACKAGE);
          }
        case 206: break;
        case 103: 
          { return newToken(JSTokenType.IMPORT);
          }
        case 207: break;
        case 9: 
          { return newToken(Terminals.IDENTIFIER, pool(yytext()));
          }
        case 208: break;
        case 20: 
          { return newToken(JSTokenType.PIPE);
          }
        case 209: break;
        case 89: 
          { return newToken(JSTokenType.AWAIT);
          }
        case 210: break;
        case 49: 
          { return newToken(JSTokenType.EXCLAMATION_EQUAL);
          }
        case 211: break;
        case 58: 
          { return newToken(JSTokenType.LESS_LESS_EQUAL);
          }
        case 212: break;
        case 76: 
          { if (_collectComments)
							{
								_multiLineComments.add(newToken(JSTokenType.MULTILINE_COMMENT, yytext()));
							}
          }
        case 213: break;
        case 2: 
          { /* ignore */
          }
        case 214: break;
        case 81: 
          { return newToken(JSTokenType.TRUE);
          }
        case 215: break;
        case 47: 
          { return newToken(JSTokenType.ARROW);
          }
        case 216: break;
        case 74: 
          { yybegin(YYINITIAL);
						return newToken(Terminals.REGEX, pool(yytext()));
          }
        case 217: break;
        case 51: 
          { return newToken(JSTokenType.AMPERSAND_AMPERSAND);
          }
        case 218: break;
        case 108: 
          { return newToken(JSTokenType.DEFAULT);
          }
        case 219: break;
        case 94: 
          { return newToken(JSTokenType.THROW);
          }
        case 220: break;
        case 83: 
          { return newToken(JSTokenType.NULL);
          }
        case 221: break;
        case 35: 
          { return newToken(Terminals.TEMPLATE_TAIL, pool(yytext()));
          }
        case 222: break;
        case 84: 
          { return newToken(JSTokenType.WITH);
          }
        case 223: break;
        case 7: 
          { return newToken(JSTokenType.LCURLY);
          }
        case 224: break;
        case 12: 
          { return newToken(JSTokenType.PLUS);
          }
        case 225: break;
        case 1: 
          { // make sure we reset the lexer state for next (potential) scan
				yybegin(YYINITIAL);
				throw new Scanner.Exception("Unexpected character '" + yytext() + "' around offset " + yychar);
          }
        case 226: break;
        case 39: 
          { return newToken(Terminals.NO_SUB_TEMPLATE, pool(yytext()));
          }
        case 227: break;
        case 6: 
          { return newToken(JSTokenType.QUESTION);
          }
        case 228: break;
        case 62: 
          { return newToken(JSTokenType.DOT_DOT_DOT);
          }
        case 229: break;
        case 19: 
          { return newToken(JSTokenType.AMPERSAND);
          }
        case 230: break;
        case 91: 
          { return newToken(JSTokenType.CONST);
          }
        case 231: break;
        case 92: 
          { return newToken(JSTokenType.CLASS);
          }
        case 232: break;
        case 82: 
          { return newToken(JSTokenType.THIS);
          }
        case 233: break;
        case 46: 
          { return newToken(JSTokenType.DO);
          }
        case 234: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
