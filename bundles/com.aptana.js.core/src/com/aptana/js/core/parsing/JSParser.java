package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 100;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy5CNtVpEN2WaGceGYDVGUGYZstaN0ygFRkoO8M554x80YHOeYeWXI1QHP006HeYW" +
		"TH7gJBeWWnPt$TsOdjtkNsylbSdUW$zjytixipBmtt$VcpTkPtRiBKRE5z3bDOLUpNZI6nj" +
		"8u6ayJQ29DeWNiHKxKY1hJ7NGdJ#NbU5NUWARH5pILb#QDUHEMnggnwgm6gqhjw2xw7ntYw" +
		"Jo3b#4NyBAyAQ$FI$8KNeKtvALu8sCfzQLxQOWGF846ynAy0YzEQsaDhQFrD9DMqmpgIJ$H" +
		"2lgPVg6Lj8fVICjeEI$FnhFPz0hrfpTf4Br3xr8VUfdwHG8nPPk8sSJy8HQ6ByJi9MhDCta" +
		"p9fYXkRlRkQcRvAR7w5cwbMwanwaJtKotq66gGCcKH8bKc8fGKIf6ALISIb19AaMbwG8gGw" +
		"bqalwMEhDbh0cLPpTHMPP1YzWdL8uAqVTKYIMp7cmSpUIpQ8QOngwa1#aW$u9FuRFfOTf1E" +
		"#a0LKRfTdOLLPTsfSzeifTTjx4xsVsykV4otHTcFPvWbx6hB3rONNw5r8DTWLBeOVH6dzDf" +
		"1a#ZD9h76h5BQOdWMWzLe$JmgOKnbRRnhrW3remrXnubgBNNQ8PG3pwTLw9lREFnDVjDwi5" +
		"RqfVyf$3spJPGPpxLrlSSkb$vGhQh64lc9#bFjemlvpzIDalXbr8y#moUFfk#OkcqaL$Enh" +
		"6k$0Q#rCRFwG4gn$$cI$WFd1cj#PVKI#odJ#XJzWnxcjKEhpOKGt4KQ$E87dH4UKGSy2Upj" +
		"gmTIsNjwH5sZVA1Woo6jM6pK5U5$mdFzktFsTAVgHVqXXRqZ36ApGZpcCInMwYcpQOleM#f" +
		"nQVi2QL5LsZHbjtA#Yb$FWY4zx5PF8sreIUTj63BbHRVoNX6jQWEfRCbuTR2#8Yjj8t5Uto" +
		"6wLbi54isnjCBo7t1lgNAj0Jw7MI$ieFGeXhosKvQy9RcMB2JEHx5YuHPYp$PGjZQvb7iBp" +
		"KMRQH7OKRqOgaAoykcHz4yUCe#vIa$q84mnutAV2F$rSA6cJXJnOqONXD#qfLwyLeI2Uy4$" +
		"ryg$OHNOeNvkov2J0ipDbSXleNtjM7RmXzGTbkexFOKVuRtvn#giPP$1$bd$0Ps8H#7scvX" +
		"jzkhj9T$QfjVlzD#YStub6zcoM8Q7UMxgBAOndztnT5Vm7Q2ph0Rw2m9BiADZH5VnU9j$fR" +
		"82Ycx9R6Y6DEoh3ohmEgpYgmMgylgODRKXmU#fZomNjYnDMJfBDE6hOKhGM6xY7RZFdMjyP" +
		"931CLAYpRahBJOP7gEvjAFvagBsj3jr3RtIeikPE#mGUmD#eCLOH$IAVg7CLQ9DMOrMKdsE" +
		"DyWZl67kSiLp#RmPQmfkuvTJzNLVSftzBjHnWqsctNXHz1k1Ul6kY6EFqRL3QISiuTebs0v" +
		"COLSORvBrUHRMPP7J7bAsR4twuCnVfMzpjvYRxF#vae5wvPtsM2vKc7l#rjniH5y4zsdOtk" +
		"3C7l2C3QIVMpJO3GRhpGOmyP2W$7iSpQLJMTViaLifZ68DN9OOqrIqTptY4qAhmR61EDpup" +
		"ER1elP3qg3fUn7bemej9gjnGetZUrcUusXJXg8SNuq#8a$5Am6$1P#ColDR#AtIWruQzw6j" +
		"vKQy3lvNVn$l1sTvFU8iQmRByGVTLg$yiTuAtuRlvtVmHyFSpnDOgLuiYtM5pKcgpkzO9cK" +
		"80xI6LvD$2xMirfY3MijLl57Z1SY4Id4prILgeaL$69sExi3aU9ArjHXNN6r6iSgh3w$nfX" +
		"XVCbcYtH#H3H6f0YhvKGZqL0qi2mdwejwqdAYhgX32M7kkxQe9MohJ553L5Tzf$4Eb62y4e" +
		"aHubtuVSPXKSvORip7#dKEzN0Q8UCREKB6jrAoAC#psMoZLqGGPl5knZRUmzZAdwSNuKCz7" +
		"Nte9RNllPQ$p5ytjl0tiQ#F1Bxh#11ZjFHlOxFnAvjZh7V4DrHPy3TZax71s6YiYmm#h3ad" +
		"6vyOFVaSVfKXxRVA4Tyloduh#Hg#sdZKU212zbl7VpD6KokUPcJ3##Rm7Qmf$uP$o#VoUNm" +
		"#$uulu0lv8luzNynt6bbIgl64yRZn6DyR6NpYcF6KCTheoe$IYx3T77xCqNx7#L#k65UYAz" +
		"Q5TQAhQ6JmiQb48fNqWHbCJlZ8wuYG$#70#Fw7yB7MaSJ7xc7tIdmomhZnsQtq7PkF7I#vd" +
		"$3Cq#Lp8uIlXm$xuU29QZ$kuuYi$UGA1F7v0RK2wMgpdyzdqkmsr3zBqYjs0zzxz3uDen6w" +
		"xxTe98sIVRirQOLrwgFq4NrC0#Xj6aYZQJYzJhrfA7r0Rz27QD9NJAKXRB1y9aslGUwhvlv" +
		"070FtTYSKydblm4$HIMm7uaEcN2V4x6AgodO0XUb7VX6hf#ZRD682Ok$n#yMTMyykjrNaGb" +
		"omzJU$qV$wsvTlUHp7hVLtf2A9pKgvPkgvdWaoagZU72E95xf$tBa8HMBsIlxiP#4xjvx6E" +
		"rkULZ0aTAA0IEuE5H9Ml8187WmPae45HF9io91yK40alKE6P5q1aRmLCYIR2eZadP0XsLf0" +
		"90D3XkJt0Y8P5Z8aXmg8P6J8a1mj89BH8KDIq1WxDcH8JWU0n64lelRg4$9SuP1Sp$BzM7d" +
		"ADs8EgqDZ8jbNBtvNX#mk6a97aSFga8rKgqDpvMaTItIgPF8zkjxdUjONOh5Lhi3vFh61TZ" +
		"kkmCsdxFNpGint0t47h6VVDH5RAt3gnKegcpYjgjS6YjWO9LRclG8ttfJsa2jm8bT27Yjm0" +
		"kAYDiJax0diSlNaD5ysTXKMlwXTZb$4iaknskKAn2iaOjNAqyRaRvUZsWVi5MfVbeUD#INv" +
		"sEL86s$JY7tiSdWVT#vj$xkSWDR6iQ7SMs1SzeQoLzwTFyUVuEtvlLwzHaApywMFClyHFQ9" +
		"zHFk8zX7j8uAn$Rpl8y3O$b#v3vxtun7j8zh7$zC#2lQP4bOwZq#suJ1Ei0lyli6iATlWx6" +
		"CNvRtFo6lVnxTXtrUJgdlj#ypTUId7J$O7lelAsKSwxllqamlvzc2AsXbjo$jzdEAnxwsTS" +
		"Dgq2HrYVZrvx#Vy8dPn2p5F0#9vVX3Nj3sDoIzY4XjnSaPiVyxZ$CIbKZvj73nYVyylb2y4" +
		"XfYydr#GxVb5NfzK21InuJ7UVcUU#2Cen3b7g12VbetvVYAd9uSsn0U2HynQEo7cUu913Bv" +
		"zVcnSbTHpBVCTg5y$Fa1zsJO76ykZOaw6RoVl8$VtoGhsIS8JUNmQk63tbE9XbVvcMAKF3A" +
		"lq3y8gVLrOfMyAg$IjOPN#UrYb7mghzADXbHxUI73wtni9#9Dvh8mTrlQqDNzhU#C0#zdFV" +
		"TQKPzxPvaXvlA9RdbbgoRCTpf#moJy#xlJ9SVDutjtd76l5uF1snWWzFlCDcE#3JmnLBqhS" +
		"af19ysVFpVHhgFfXd3RpM5EiEEH$9IT2rgifprN4vuWuVSSyk5usEu#zFZg4USo26PEyZf3" +
		"vcU7q3UWWnzJt4RfUedZ3YpTFpyF1kfrlCoO0qEuu8DRzVntRA5wFG$9dKhC0UmdaayRNkM" +
		"LVJpTG4ygWfjISMj15T35TGfVIPNGvNKLNqpLqBTNZndatYw9o$XjoxZdFy4JbHEL4vKJbH" +
		"EL4vKJbHEL4vKH6pbE1FTrc##nFjzcAN3kbNUJ#hhTP8Bz5wlucwKvsnchAkdktLQL30iN2" +
		"XtjYaT$rbczGvJT9rVUf9Hr3cVaxIPsKUFaxINUZbnvy43kZFc5l7G#XlBFxU#4LYVWB0MC" +
		"vw$7KttQmZZav$edlNJ1hecfFiuo0H#4vZzu2nLWd62wlznaBFQ1lLFYxUkwIeOjxb3aZnt" +
		"V#V2klQudYth#mS0LVWrtobSWruFK2sILJIoLd4wX6SDh1duFbSppOqE36Xmq$zphaZ0zRv" +
		"QoVQbVRGVSrvru7DvPT0SlSv25pptcWms$QpYy6x4jnTfcyrxdNWSVhzBM0PTxjeSCRvru7" +
		"jow30vPPmqE7zvrbwgDBa74vAqY#fuFacnKatxT1yiqFcAzh2Evon$8S9wB5GVgLAqY#Oa7" +
		"oLGwIhs#GV0E2vFieIBu9GV9j39BlG91yn$F#J0RkKW5$9YEmGsmAsakju$d8UXxl62JV$K" +
		"7oTGsIByZOoVi5oVT1a7nZWkIR5Z1VxQ1YRjsWkEe7nTKmAAwRWkAwBIYkza5nTGoAwz6Wk" +
		"8Axisu9XijhXvkpimoKUxDFxfpZ2f2vivH7m3jBjiMRcpqV63Sxx2T4vrUt8$vqO$k3rEsF" +
		"e2qJAEw$2pAY$3BVprVOgM1n6s$bt$PyG3ZyYhyNB3V$A7H#nKVvqusF25AtZxrrurj2wrV" +
		"yymBvrTU#$OgFj#FcX$EXjRTNcF8EyaFk$5ftBkStx6my$6U#tiOOZ4y5m#CJTHw7CqyKTH" +
		"Hr5FLvWvgrZYHgpr$op7setmIs8MOBTFdNJFusqZVigw1jdPzFrJcybN3#Zmq1r7aTnaJdu" +
		"J8cvhmLirccjLy#yvVBVFU$n0ysLUVr#whohPndISwewFxP0hE4VSsBcQDYZXDmMoNT8SVs" +
		"1a$#cfPRgpqMRhCdNjY7HoYTx7rB2JQFA6Tv1EkatkorDX6p7lBNjEpl#amvvXiyoBWoHmT" +
		"s9UHCOxTPEYZ9tsl9LQcQYxcjSDQLn9iZxIbRyUPA$WkMBqFApKh0XLhEm#mHJqiozoT8#H" +
		"#if$axiInRjl8OwPlb$wRJUVbVwXvKtsAHNATy3JrleLe#cPFBVR2Mx1BTzYBa675oKGp5K" +
		"Xp5Km8bKY4gJ4cKxFWjfB9KZifJ1MXMaIfHPQgYlesQHjMfXlekSssgWnrxFUo$6s0tBUTk" +
		"XfvXXAWZPraMvfbybj8DQwqUz3GzGy$IS$GylK0zwKLwYNhHozIRNi7#k1MeDRMXjdIxV4E" +
		"jta170d6cHjmoduZ99#8ioWw8km#zIg$Hw$G6lKblqTlKb$fHV$Njsm7q7WsaGJIOXj3xD9" +
		"I6qN0QGH$GXpHIwRoEHgllDu$1h4wdpPZVuw536kRqPDgb#ym0ZaoiSU#XUsaEVKLVqpVqB" +
		"KgoQ3vzXtMjRxkkK7Rj1yrMXrcFfGg7fOUqdjH3baezIFUPHDy3qKoirzjHUws7MIDREdd7" +
		"2ZgE5VqUsXi1FJhIhpOzjW6Jr2CPDPF2t7TJwkpLznhj2$lHTt$unZewGd$WEXt#EHEUaad" +
		"7w4zuoXBQ0azP3dp2ucUny1hmg$yUjf4bmTvPc1Cv#4#6LniMn#9nfxUqcGoSKfi5G3q9Nc" +
		"1wT4lj0pDH#pCy6txFNF1itvwGgVnPyadSxM6lLM4UamN0bUsXHQRI8WCsbrf8ct#lHaJwy" +
		"qpaf1P9E1TnrAADqgAzYcSVqIZwE09QT8OUzYZJKNjMEhH81yfCPTLCQ26ZJ3h#vi3ZPOcJ" +
		"5ibwB9WRTxYrQ0ezllSOYtIbnS$Aesv7xrcgznoFakZcg99qQ15UR9Ff01sqOSj2YSIsH5b" +
		"ukTjdqw53blAJZi36L4mBFxOisCwEBTqs4zFrNwR#awEVfR2PenzUR6depOujsOnPE2y3jW" +
		"pC98b2NicxkemI4fiyBuW0jWxetpvhaZMs961BKjSIRr$SxRO0MxBRt$g67Lk6ie7TRfCzi" +
		"554LbejrUYqLEbXhBJsOwKbhT99tQTy8yXG25g1fpNQjLKIEYCQTeArPIhlKktTbhilp7RC" +
		"1fhsFk9xafgtSdHh89$cZYb9#9ChbJI$Awvqh3nNwzZ#IzYzD8dEU7Z2RKg34y0#2VbrsbE" +
		"JS9q13NpZJbUuVTU5MmCp$lYQPosXGQQA4PqG#TDKEoSDMfv33QJ$oqZXDEUcgFVyqsWwVH" +
		"bsM#w67InRPkXOB##Dau0p2tTrEL$xgdnBEXknI26VLRG47lcqeWMaN#JN4#VYt5UDTol4$" +
		"TQWjc6sN1FrPrbENadBoJJSAt$dlfFKhor4OeHaNqtqNn96g8ZZ23LH$JPHacNRLX52M0Er" +
		"9ieah9vQuCe9OPfUcwOh3kb3aS0t3hMcVqiRjW3vz$4cxh$8u9Eh$GoCLGR9Dr8jSBzrmhT" +
		"1zPi6wKTnJeiGlZJg0coT8BK3fBR0xlSYkfyUe0Vf8NgO7g57wJ5wd9wW9z6gWvBQGVrrYH" +
		"2#BkXBzhm1tjV1h$zjGDqQfKqMC6H525#I49GXz44jG0xuXDSH6Nogf$yKFigA93vr1mK#6" +
		"M5oy7bOQHRDbeZSzwbvkdnXXF1Dpcq$bLDhP#ynFLVsmuvSHkZbDdo##vwBcYAKZREympdq" +
		"xTPaBQBhN$vyIp#JJjBFfBFXM#R#eALf1mSKydblW4$H8QEbYjgcN2ThPIWxD3FzA034Sqt" +
		"4tjwcjFxHdLj9TzlA8$mKtPTlUU2qhxyZ54bilVkqtRcU2QetnqZYXMwUEnUXI4n$vyz#Dd" +
		"pdZwT5aKIHH954aKIHH96408dZga$UUVDSuIW9HTmedUxGwNB5wzOlWFKiSitDvtd8gPMdZ" +
		"R#TJfLCcgnNflbRpsRJCgH9ZeXDcSbv8QP3NeYj5NZEMt5d585#ZgLpW2jmkQjefctYryOW" +
		"3yHQIz#ztwqy8LysfiFQnduHgpvRifX0l48YLgqyRAnA77SvgZPWhr1#7C9TZhBnN1Dn0NS" +
		"v4TzRAE#Cn8uXsaUqZsWVqJwYVKJxYFOHxIFQHxIFQ1y5woFyJmpId3wJPEtBAHCeV6ZYus" +
		"b7tay3igcJrzxQFEzsicS#Tb5w7#bdtvVjrgcPtXa5WDXpR#quxdPjGeUucVrfIw0sjfwuK" +
		"14$YBDjE#zy8fQs0paYjZ$dyUFV7VDfuw0H#tr#OVf2G8Yzdr#eJm3aZ68UdrG8676QntZx" +
		"dNbo5FAFsCqTKiJkJnQ43R7wBe7l9t2JWxCnBNEsiUSxq3oV7CxrRMDLvdu#nBZmEYB#VRA" +
		"ezAZqgFIezAXqP#aXNDlxNSyao$MPQj72KvukTSlpk6E4zXCs$bR$7TrzjiXhnM2jMaA8hv" +
		"dttT9cXVHGzQAajGiPPd$sbDy03TtOGPgMw$26nsshaBq1ql9yZakeHyHvx7DGX7VCWXcJF" +
		"367pi#SlbyMv9Y6UvP5yOONRrwUfthBFDzcJ02OtN4WfE#n$rLZ6yNhWJE7FtHutVSps#z3" +
		"NK5NkdyZwZhrEr8tqatgrm6TljDpxkuxKJbHEL4vKJbHEL4vKJbHEL4vKJbHEVzUEK4#tSw" +
		"rKx9zrzjMalDDqa$eKtzjLUcCe9#qJpRVe2gIdx2Nz9lGt$MciKgw$9saMUex3l9tJUPwO5" +
		"yXRDyBbszGWyNY8NMdE$URmovuj3gRlu8MZEQHvF8OSLgYpiizTyb2CEivy4Rd9$ZmqPzii" +
		"cPxMQKfVBGPDLTFORO7j4k#LV79xrUS2jg7GZGFGk3FmS#3aEcGCpuqmra$LRyznBf7ny5X" +
		"7A8w$BjzoLccbcn4Mil$E5$8nzuzKhF$9HQ8yfqlV7b#9iFxSu6wpETdCW8xr2yg5d06KCT" +
		"$ZOMZVES3NvGhoXLQhfmd6GNYTiUpfkgJFCtrLU0xotHlRceV63SnFn7wFDKjKEvpCQ8swm" +
		"MFE$a$OFj$eLy1px$Eh$HtDWB3xMKvBUy07NJdZxfpETy9iV4mOhPH3SehWk7nYTh$uSmJH" +
		"Hr57KLz$g16D8mWQkzliUN2CyjyrkzkFq#NBwH5E2#c7uAsTNu#LUVyLiBXFpRaNPTBqtG$" +
		"uvMUyrRCLfRpdimdd$cvL8Ud2EsSiUawpzzNbU$UF4jcMMzWPFyqpoonHiKS9#2sIdB#kv5" +
		"#W#Vnhc#hXTliYRRczWYjqopxsn$8dATpdXunLhtPop8HqsJlTtsc7FssBqkrcsV#$hIKGt" +
		"Cj7JoqaXAItLPOIIMe7zArgbK$LRlJycL8sQ7IwbgEQIER9UcqMuzcj5P$NtTMhhTRE#IRI" +
		"9sNxoGt8Msbhjhu7Flrwhmf9#UZnU#qpyeHkL9wgV$969kCKrEY#3#HZYLY9UL$YoHAk4hM" +
		"XuFGTsESbkh#Rx7AwJCphJgUgCdREhy2#H#H7aEwXwXQQQBQXv6s8CgC2nV6t9YhTIBAg65" +
		"T9oQXh3TmjS#RjnBict4vsd#6YrMmxvl8BpFhCdhBCT7wpqVT9ZDVUBIPykfe2tqpFj3Nyy" +
		"qqhRZyBw58fUpDAAyCcebnguIoTiXNq$9F4bsu03Qled5t9YhRFL9sEnS4$L#4$TwnhkbzN" +
		"JuQTlbJ$ezJv1SZ$ufPNb7#vzAPPhxI4x3LtMO#hePTRlvnk4v1zkDclcapZM4$ygs1xqpk" +
		"zeKn$ugT88ff0Eg0iHo4DCEiYsc6wrrcdZVMPVSJLIy2VHOHbU2ulX9f4q#PvHxKRU$KkXR" +
		"JrszfVT$JCYytqzHng1k3kTK6QH$G1FXC4wIlMJ9Zla2$cCDiAVfxm2oBZKL#g6VVPHdQJe" +
		"Eikv7s1Ks7B2cpdrbV$GxqUxMp$MA#n0d#6$E4llxAJ1FN8B$4p2SDGtwZ9r$S6y0sJlFy3" +
		"RlkHhh6ga$vpCfNhA7R6ReESofMwdC1w1AYGjMGfcaTlmLUZJqkrORpS6xiAOMqNMlfwtiz" +
		"wsEhGiPpjckkqph07eEqgAqk1QJbnTQ5pCUGNcUhVygMJ$3if$fpH8tBUPRHNS3pC57nKcZ" +
		"$CM8$Obliyw1Fe6ytf2#OxKeiG$vj4Foo#aZq#nxox#X#9g4CSONZNbBYh2wRZ5Wp7EbG#D" +
		"KIf8XBbGuXnHYLhA$RO3oh8uvpnBJOVtJPLxX#G#OH2l$1zQ#wNCUw6eLmQekntcTUbqLya" +
		"$#NE2uUllKascr7FW7OCGzYTsZUdJQRuDuHrr3#tsFGpyWtCilZ6bjjuj17vXIac6TnY965" +
		"SH#CQs6hpo1ARgxpBJ4NCKVvKQBAbN1z2zAhaIB6b#nYjc5JWRk##L#JI#evLWFplZ5YJSb" +
		"5bjmo1y07Nwly35BKL$uGAMILF67MDyQzeaOFo3bDLAgcbWCRDyOyBTNEl7QXtnfpaIAkbU" +
		"ghs#mWIeSVbPfhNYVqqjYl0Tq8WjpAly0sHNHvVyo5GMQ#wK0pBOvO68UnoOJVnwq36R3BV" +
		"KX$qpnRCHOpm3SRUOnrEHcBjY2$3Rm$eErFY2SOjnJOha7V79qrvfV1kyBCLuIlf1upyvLS" +
		"kluZCwqIhp5DidXJcgCFZ7aLp9KKQRUTICyWnJnFWHufU#7JPK4LB9xYyFduQjPrpJZOvre" +
		"p7tyRx0DRn6U2TEoFlnY4#H$tWyKJVoa8jexl2deAXBaIZ$aLZxaJZtjE$4iWnCPuZ7qyub" +
		"uyx18$1uIO4WziDMj3Bwm1Ii4Fu#6JfQiWFGxw2$sNGptyo8NvL1esYyTz83OH#TUGnvn9W" +
		"Aydm4SJi5uh3Ra9hK2uzzS45jSHv16l4#0t2HYpcaDGXZvAurwJS2qe2$DIvZ5lgZo057Ed" +
		"2kPrGaUY2yeZnVnFX1$7N8Ho#542uaiLs3IX2#g1AG7psOMnhWbVSC7dBu0v4Z2dQsAiqo7" +
		"l0kYQC09h8QpD4X13gihvyJdATo75$ICTFb8BzoSNT2uZsqp4DTOrwOZZPQx3DM99J3sKtO" +
		"0sYDTbODC4n99QqAK9vcqPj4#OelrujwSVrK9CIjXcNPUphT4IzkWsM1SrpHMZ$H7i0Vz9h" +
		"03RLybTLmUn9c4XwdLCJYm1mhWamlyJhp3BOWk31kEw60XhiqJm9Cu7LJFhKn7J4zEWDsoL" +
		"Y35AX3rI7z7oS6yeLCo6HT#x4x4cIEnavfjXhYVYlfeutBoEWSyaZikDjUeJLhv9jfaMmhY" +
		"wT0nCNQZvuTk98ynysVAwFyJMShqi$efOEoLYtLG8FfvunYfdsWxCVKyoh#CU2SJMmH0mdh" +
		"JrCyNAqs0phUT2pDHZqH3nCnP#r700Oj9bIE5FXU7Z3H6ZYdqUBeovCJT4J2usnuOLCR0Xx" +
		"dV5TkRDswWCuXhMKutIaTOpo#f#RAOfZ#AaTMNbBPvQjZLm8ypZbDTql$h#Ng#XhiDQ86Mw" +
		"3TSsrDraNQV8lVeoMptkwRnmE6nqlX3qVmYsjAt1QAKkxsEc776ltYYhllPzDjvlhBphqOB" +
		"XO8Z9TJQR#J8w1ZRgWpnYRaokFOHPdvbcvVa6pxhuU1#whZVJmhlDjDmZdlKnXRokapslwy" +
		"TwOHvgfatRsUnGFNU$zIlh$ePPPMMUz99rHEjqhrNcwcQJSR6tN2#ikAUp6k3PgwylCrDpl" +
		"MtcutFjGT3k7Pm6MDUPQpphoROVijffpECyhrqBR7AcMlb2VzXuFFPEkkrhdjUrnkHkKsku" +
		"JSOPBNSLUETxjxMrmzeYSxMVUiFpkj5769VrNlhhPpLSpukaxbPTZEtULMw9bQ$$lznzrU#" +
		"kszdYUQr7pRJsQfrg7oXVtSOtm4nZ4pKUt7zZosZyLQnsiHVfzfFqzRqQTslvlCJCPxvkqz" +
		"rzBt4YsBULSrtckrQU5yzT7xl8oXVkPgPrz1w$pcrQpzjjUkhdPENxc6aZhC$ARCArBLvpx" +
		"9DZiUQievzpr9ckUVHUA1LhhlfwRbVGp$qQOn#Pcehhoomv3PXkywHkWtrqAkwR5KPgtVhd" +
		"rgTsVIllmdgrxgMwpoPcMcYOvhMruzqzPSID0Mb$YllSAg$mavQhnvMgvkxVTO76ZlLzdBP" +
		"VxUizszH9rPYoSlCtm5epJljIhLnpqBDjfjTpXiRO5wU#QLqdLDGwxFHiv#heJsv#27Y7c6" +
		"boMPrszggVfii$jShYqknjpB8APsqyAtpqir$BsMULrPfgfdLEcMdTKcPQHE$jKtIChTjUf" +
		"q$hUjlpYOPnkcoscJR6lYGLUzuY#bb0tMzrkj5CY#frJUfIyEfdc4LVDzDqZ7agrbH5VxJ9" +
		"lyHCYsa$JyVSIDs3wpkyTRJnjFEyTbNAtIPzDUISS9BXZn0FE$cGDmh#qjQwJhZCDo$Vv8N" +
		"jKojVTh7c7M6L5RFD7zS4$xWOrZW9jkSa2STzjwjbYyrbIsZPsDDoVRz9ITVyfsqwtsN3SR" +
		"#LJzJxwqJx$Jo5l0vHMfGK9SGLud9ncRXKN28k5XU9bgA5Q2wQYKpHL6I89gAgg28gYxAgV" +
		"HAei43y4TXdYJ42aKjWvonUrVBwYBj55t6dk4FSBjgADgArk4sq4hUAMyJDuYPnexX1N2#k" +
		"4zUAQyJLuYfnfHWgtXVOHOlNnIkYjy2#NhmiEejEegFe8DgBTk9$uYvZe86zfp50oZS#DaQ" +
		"YpNJL5tP7OhBAJHBtYdl4Wnh3cwAdw2uULVcdn5igVL9UYwxYc3Wg$X17n65nI1mK1yH#iK" +
		"$yBlQAFMAts2LsYXrYkzWcjeejOhFuJMmIlugDOeDOBzQ9jMADM2rMYPNY5$6pM27#4MV56" +
		"N5Qd19$YvFYXFXB71T$YaLYeVXUP8idnAUgtq$4Q9m$1dsaqJskpZ#fyp9eT4nq4rdYHV62" +
		"U5uy9vuLpuYdHG#nL2mHFuZ5OXvQVIk#4dEGOeQ9AMAYc236syVG#439geRSKO$oFyI50Zj" +
		"h0wiKOoNe5z3Fe1MWdppzm9WYIhdpFugUE7zdp3FcUhMQfivVY$bYWVZEkCEuNLr$PSp6UQ" +
		"P2SO70$icOBYg9YghkNStPt#YBy#i6VCM0hnWZn5cRtE6AjpYeg4WsJXX$6d#9U167wrXG3" +
		"CXb$6ESKct$DawYnN5f6PIJSLgL2lFQC8mpOgwOAMOO9yJdOfmOgrfzPfmLHP3s5CSzz1dc" +
		"SNN8dJj8NeUnpvrRPY126Z#e$69ZYR58zP1gBCp58$qwHHIpbOm3ZJ76UhGQR7ol#1SO#xt" +
		"uVtVdTkjqXoXah35MszhiDVqRkJqwtUckswNJxQ2rw6CnF4hwqpVg$BMOBMPvzVY#cPgOHI" +
		"UhHZmYvvJAFQREY6X2paJSKSG8CLmC4$12yQAgwm3gg79Bn5AZZ$66ajtFU5kbSzozwTwDB" +
		"umZEH58SQa8f78w0dcYb3xjplTK4hpyr3wM1JzoBEotpO#WvKOReotIKU9XWLshk5$S1oJI" +
		"Ght4O35831JlYG7YNV6Ew2$wYRxYROtrUUDPundZQNtLmwr3Tyy#ZFizhXvHvuUC1utxZOT" +
		"L$abTSvywtslSOznjT46kiu6HD3eQMBaQs6qP7LHzUr0xuqwSxpB#vvQALHgRn9A8WRZwrU" +
		"L0QV9vIBt81U8wZQNdK6Od#N$Tkchg1keEUWcq1APOWlHvy9aKIniXnwGOHSkHNuusFo5z0" +
		"RG6F6jm$GBgLYDT3RuLYXXzfUbh6ts3kk$1zpJoJoD$3EanNF#fo4LBaIv5UWhbfv1kHohf" +
		"OniTpmUzhSX5VI3N99UcM13Jb5F6wEK0wLb5CI0NYEjhbwBUAE#Dz1MKlOAwrpqe1kHI#LT" +
		"HBobRqsjvq4S1qAXyqZi5e2a5e7wWyJOQescWfgcQtWNX3WvYr1TscmcxpKH#agPFKFOfKa" +
		"axaD#1T2seF$8$Ac8qLn6dSKWbJK1#0kecO2omrmKnceZyH9HDf3WwZVGqolv2sLzeknFvd" +
		"IYRXHGh2H13djDOq6pG0D1x50#AfI#GVgWebcQWxGoq$P0IGOL02Rek9xNoNogA1IM22e4I" +
		"T5bEQkL$Gtyh8LVI8EG70TjWf8EH3a4w1Edxa3KDD1Aq6JWse#qPb9$1zIxaTw7TEkXt0cL" +
		"3GTD1ydzII3ghQHZAXhifXaw2Tmlu$a6Tf178ZmQc1P2$0DSzaT#AT94YeX#GckIYnOeOBG" +
		"JD0yq1VQk8w2tKlO6y94EHY#P3p$d8csa2$OtyTqW$WtrU1At2zPkAECX5dvEB5KQw1pZtg" +
		"5GIfxsWtz5kdo9Ewv6kDrE6jJo8iJXGFAYGVDU0D1QKY7O2xUGdtlRRw0Za7q5VQ6eZboA6" +
		"#WFezo3u3gBT1kACevoZ$13A3o4z2be6#WFr9hb0N9DBKmnpWTU5D0RyCMX$6EM7aJu3wW7" +
		"w5RGDzC7$0UDVeSK=");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 50: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			{
					
			return new JSParametersNode();
			}
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSRestElementNode e = (JSRestElementNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e COMMA BindingRestElement.r RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final JSRestElementNode r = (JSRestElementNode) _symbol_r.value;
					
			return new JSParametersNode(e, r);
			}
			case 58: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 59: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 60: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 61: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 62: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 63: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 66: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			return new JSArrayNode(l, r, e);
			}
			case 67: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e);
			}
			e.addChild(n);
			return new JSArrayNode(l, r, e);
			}
			case 69: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 70: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 74: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 75: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 76: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 79: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 80: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 81: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 82: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 86: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 90: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 97: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 98: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 99: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 100: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 118: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 119: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 120: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 121: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 122: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 123: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 126: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 127: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 129: // PrimaryExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 130: // PrimaryExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 140: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 141: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 145: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 149: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 150: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 152: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 153: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 154: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 203: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 218: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 219: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 232: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 233: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 234: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 237: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			// FIXME Determine if this was let or const and use special subclass!
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 240: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 241: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 243: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 244: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 245: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 247: // VariableDeclaration = BindingPattern.p Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 250: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 251: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 252: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 255: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			if (e == null && n == null) {
				return new JSArrayNode(l, r);
			}
			JSElementsNode node;
			if (e != null) {
				node = new JSElementsNode(e);
				if (n != null) {
					node.addChild(n);
				}
			} else {
				node = new JSElementsNode(n);
			}
			return new JSArrayNode(l, r, node);
			}
			case 256: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 257: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			if (e != null) {
				n.addChild(e);
			}
			// TODO Add null node to elision here?
			if (z != null) {
				n.addChild(z);
			}
			return new JSArrayNode(l, r, n);
			}
			case 258: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 259: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 260: // BindingElementList = BindingElementList.l COMMA opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 4];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e != null) {
				l.addChild(e);
			}
			l.addChild(elem);
			return l;
			}
			case 261: // BindingElementList = opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e == null) {
				return new JSElementsNode(elem);
			}
			return new JSElementsNode(e, elem);
			}
			case 263: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 267: // BindingElement = BindingPattern.p opt$Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			if (i == null) {
				return new JSDestructuringNode(p);
			}
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 268: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 269: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 270: // ExpressionStatement = Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 271: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 272: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 273: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 274: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 275: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 278: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 279: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 280: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 281: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 282: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 283: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 284: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 285: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 286: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 287: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 288: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 289: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 290: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 291: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 292: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 293: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 294: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 295: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 296: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 297: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 298: // ForDeclaration = LetOrConst.v ForBinding.l
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final JSNode l = (JSNode) _symbol_l.value;
					
			// FIXME Determine if this was let or const and use special subclass!
			return new JSVarNode(v, l);
			}
			case 299: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 301: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 302: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 303: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 304: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 305: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 306: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 307: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 308: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 309: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 313: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 314: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 315: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 316: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 317: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 318: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 319: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 324: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 325: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 326: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 327: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 328: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 329: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 330: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 333: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 336: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 338: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 339: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 340: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 342: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 343: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 344: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 348: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 349: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 350: // ArrowFunction = ArrowParameters.p ARROW ConciseBody.body
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSParametersNode p = (JSParametersNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 3];
					final JSNode body = (JSNode) _symbol_body.value;
					
			return new JSArrowFunctionNode(p, body);
			}
			case 351: // ArrowParameters = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSParametersNode(new JSIdentifierNode(i));
			}
			case 355: // MethodDefinition = Identifier.ident LPAREN StrictFormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 1];
					final Symbol _symbol_params = _symbols[offset + 3];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			// TODO Use JSNameValuePairNode to hold name with function as value?
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 357: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 358: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 360: // GeneratorMethod = STAR PropertyName.n LPAREN StrictFormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSFunctionNode f = new JSFunctionNode(
				new JSEmptyNode(n),
				params,
				body
			);
			return new JSNameValuePairNode(n, f);
			}
			case 367: // ClassDeclaration = CLASS Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSStatementsNode t = (JSStatementsNode) _symbol_t.value;
					
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 368: // ClassExpression = CLASS opt$Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSStatementsNode t = (JSStatementsNode) _symbol_t.value;
					
			if (i == null) {
				return new JSClassNode(t);
			}
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 369: // ClassTail = ClassHeritage.h LCURLY ClassBody.b RCURLY
			{
					final Symbol h = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			// TODO Handle heritage!
			return new JSStatementsNode(b);
			}
			case 370: // ClassTail = LCURLY ClassBody.b RCURLY
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			return new JSStatementsNode(b);
			}
			case 371: // ClassTail = ClassHeritage.h LCURLY RCURLY
			{
					final Symbol h = _symbols[offset + 1];
					
			// TODO Handle heritage!
			return new JSStatementsNode();
			}
			case 372: // ClassTail = LCURLY RCURLY
			{
					
			return new JSStatementsNode();
			}
			case 375: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 376: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 378: // ClassElement = STATIC MethodDefinition.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			if (d instanceof JSFunctionNode) {
				((JSFunctionNode)d).setStatic();
			} else if (d instanceof JSNameValuePairNode) {
				((JSNameValuePairNode)d).setStatic();
			}
			return d;
			}
			case 382: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 386: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 388: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 389: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 393: // ImportDeclaration = IMPORT ImportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] clauses = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSImportNode(clauses, f);
			}
			case 394: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 395: // ImportClause = ImportedDefaultBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 396: // ImportClause = NameSpaceImport.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 397: // ImportClause = NamedImports.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 398: // ImportClause = ImportedDefaultBinding.i COMMA NameSpaceImport.n
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSImportSpecifierNode n = (JSImportSpecifierNode) _symbol_n.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(n);
			return new Symbol(nodes);
			}
			case 399: // ImportClause = ImportedDefaultBinding.i COMMA NamedImports.l
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 400: // ImportedDefaultBinding = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 401: // NameSpaceImport = STAR.s AS ImportedBinding.i
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(s, i);
			}
			case 402: // NamedImports = LCURLY RCURLY
			{
					
			return new JSNamedImportsNode();
			}
			case 403: // NamedImports = LCURLY ImportsList.l opt$COMMA RCURLY
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSImportSpecifierNode[] l = _list_l == null ? new JSImportSpecifierNode[0] : (JSImportSpecifierNode[]) _list_l.toArray(new JSImportSpecifierNode[_list_l.size()]);
					
			return new JSNamedImportsNode(l);
			}
			case 405: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 406: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 407: // ImportSpecifier = IdentifierName.i AS ImportedBinding.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_alias = _symbols[offset + 3];
					final JSIdentifierNode alias = (JSIdentifierNode) _symbol_alias.value;
					
			return new JSImportSpecifierNode(new JSIdentifierNode(i), alias);
			}
			case 408: // ImportSpecifier = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 410: // ImportedBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 411: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 412: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 413: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 414: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 415: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 416: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 417: // ExportDeclaration = EXPORT DEFAULT ClassExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSClassNode e = (JSClassNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 418: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 419: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 421: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 422: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 423: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 424: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 64: // opt$Elision = 
			case 77: // opt$COMMA = 
			case 230: // opt$StatementList = 
			case 253: // opt$BindingRestElement = 
			case 265: // opt$Initializer = 
			case 276: // opt$Expression = 
			case 310: // opt$CaseClauses = 
			case 334: // opt$Identifier = 
			case 380: // opt$ScriptBody = 
			case 384: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = TARGET
			case 13: // IdentifierName = Identifier
			case 14: // IdentifierName = AWAIT
			case 15: // IdentifierName = BREAK
			case 16: // IdentifierName = CASE
			case 17: // IdentifierName = CATCH
			case 18: // IdentifierName = CLASS
			case 19: // IdentifierName = CONST
			case 20: // IdentifierName = CONTINUE
			case 21: // IdentifierName = DEBUGGER
			case 22: // IdentifierName = DEFAULT
			case 23: // IdentifierName = DELETE
			case 24: // IdentifierName = DO
			case 25: // IdentifierName = ELSE
			case 26: // IdentifierName = ENUM
			case 27: // IdentifierName = EXPORT
			case 28: // IdentifierName = EXTENDS
			case 29: // IdentifierName = FINALLY
			case 30: // IdentifierName = FOR
			case 31: // IdentifierName = FUNCTION
			case 32: // IdentifierName = IF
			case 33: // IdentifierName = IMPORT
			case 34: // IdentifierName = INSTANCEOF
			case 35: // IdentifierName = IN
			case 36: // IdentifierName = NEW
			case 37: // IdentifierName = RETURN
			case 38: // IdentifierName = SUPER
			case 39: // IdentifierName = SWITCH
			case 40: // IdentifierName = THIS
			case 41: // IdentifierName = THROW
			case 42: // IdentifierName = TRY
			case 43: // IdentifierName = TYPEOF
			case 44: // IdentifierName = VAR
			case 45: // IdentifierName = VOID
			case 46: // IdentifierName = WHILE
			case 47: // IdentifierName = WITH
			case 48: // IdentifierName = BooleanLiteral
			case 49: // IdentifierName = NullLiteral
			case 54: // Literal = NullLiteral
			case 55: // Literal = BooleanLiteral
			case 56: // Literal = NumericLiteral
			case 57: // Literal = StringLiteral
			case 65: // opt$Elision = Elision
			case 78: // opt$COMMA = COMMA
			case 83: // PropertyDefinition = MethodDefinition
			case 84: // PropertyName = LiteralPropertyName
			case 85: // PropertyName = ComputedPropertyName
			case 87: // LiteralPropertyName = StringLiteral
			case 88: // LiteralPropertyName = NumericLiteral
			case 91: // TemplateLiteral = NoSubstitutionTemplate
			case 93: // TemplateSpans = TemplateTail
			case 101: // ArgumentListItem = SingleExpression
			case 102: // ArgumentListItem = SpreadElement
			case 103: // MultiplicativeOperator = STAR
			case 104: // MultiplicativeOperator = FORWARD_SLASH
			case 105: // MultiplicativeOperator = PERCENT
			case 106: // AssignmentOperator = STAR_EQUAL
			case 107: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 108: // AssignmentOperator = PERCENT_EQUAL
			case 109: // AssignmentOperator = PLUS_EQUAL
			case 110: // AssignmentOperator = MINUS_EQUAL
			case 111: // AssignmentOperator = LESS_LESS_EQUAL
			case 112: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 113: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 114: // AssignmentOperator = AMPERSAND_EQUAL
			case 115: // AssignmentOperator = CARET_EQUAL
			case 116: // AssignmentOperator = PIPE_EQUAL
			case 117: // Expression = SingleExpression
			case 124: // SingleExpression = YieldExpression
			case 125: // SingleExpression = ArrowFunction
			case 128: // SingleExpression = LeftHandSideExpression
			case 131: // PrimaryExpression = Literal
			case 132: // PrimaryExpression = ArrayLiteral
			case 133: // PrimaryExpression = ObjectLiteral
			case 134: // PrimaryExpression = FunctionExpression
			case 135: // PrimaryExpression = GeneratorExpression
			case 136: // PrimaryExpression = RegularExpressionLiteral
			case 137: // PrimaryExpression = TemplateLiteral
			case 138: // PrimaryExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 139: // MemberExpression = PrimaryExpression
			case 142: // MemberExpression = MemberExpression.l TemplateLiteral
			case 143: // MemberExpression = SuperProperty
			case 148: // NewExpression = MemberExpression
			case 156: // LeftHandSideExpression = NewExpression
			case 157: // LeftHandSideExpression = CallExpression
			case 158: // PostUnaryOperator = PLUS_PLUS
			case 159: // PostUnaryOperator = MINUS_MINUS
			case 160: // PreUnaryOperator = PostUnaryOperator
			case 161: // PreUnaryOperator = DELETE
			case 162: // PreUnaryOperator = VOID
			case 163: // PreUnaryOperator = TYPEOF
			case 164: // PreUnaryOperator = PLUS
			case 165: // PreUnaryOperator = MINUS
			case 166: // PreUnaryOperator = TILDE
			case 167: // PreUnaryOperator = EXCLAMATION
			case 168: // BinaryArithmeticOperator = MultiplicativeOperator
			case 169: // BinaryArithmeticOperator = PIPE
			case 170: // BinaryArithmeticOperator = CARET
			case 171: // BinaryArithmeticOperator = AMPERSAND
			case 172: // BinaryArithmeticOperator = PLUS
			case 173: // BinaryArithmeticOperator = MINUS
			case 174: // BinaryArithmeticOperator = LESS_LESS
			case 175: // BinaryArithmeticOperator = GREATER_GREATER
			case 176: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 177: // BinaryBooleanOperator = PIPE_PIPE
			case 178: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 179: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 180: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 181: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 182: // BinaryBooleanOperator = EQUAL_EQUAL
			case 183: // BinaryBooleanOperator = IN
			case 184: // BinaryBooleanOperator = INSTANCEOF
			case 185: // BinaryBooleanOperator = LESS
			case 186: // BinaryBooleanOperator = GREATER
			case 187: // BinaryBooleanOperator = LESS_EQUAL
			case 188: // BinaryBooleanOperator = GREATER_EQUAL
			case 189: // Statement = BlockStatement
			case 190: // Statement = VariableStatement
			case 191: // Statement = EmptyStatement
			case 192: // Statement = ExpressionStatement
			case 193: // Statement = IfStatement
			case 194: // Statement = BreakableStatement
			case 195: // Statement = ContinueStatement
			case 196: // Statement = BreakStatement
			case 197: // Statement = ReturnStatement
			case 198: // Statement = WithStatement
			case 199: // Statement = LabelledStatement
			case 200: // Statement = ThrowStatement
			case 201: // Statement = TryStatement
			case 202: // Statement = DebuggerStatement
			case 204: // Statement_NoIf = BlockStatement
			case 205: // Statement_NoIf = VariableStatement
			case 206: // Statement_NoIf = EmptyStatement
			case 207: // Statement_NoIf = ExpressionStatement
			case 208: // Statement_NoIf = IfStatement_NoIf
			case 209: // Statement_NoIf = BreakableStatement_NoIf
			case 210: // Statement_NoIf = ContinueStatement
			case 211: // Statement_NoIf = BreakStatement
			case 212: // Statement_NoIf = ReturnStatement
			case 213: // Statement_NoIf = WithStatement_NoIf
			case 214: // Statement_NoIf = LabelledStatement_NoIf
			case 215: // Statement_NoIf = ThrowStatement
			case 216: // Statement_NoIf = TryStatement
			case 217: // Statement_NoIf = DebuggerStatement
			case 220: // Declaration = HoistableDeclaration
			case 221: // Declaration = ClassDeclaration
			case 222: // Declaration = LexicalDeclaration
			case 223: // HoistableDeclaration = FunctionDeclaration
			case 224: // HoistableDeclaration = GeneratorDeclaration
			case 225: // BreakableStatement = IterationStatement
			case 226: // BreakableStatement = SwitchStatement
			case 227: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 228: // BreakableStatement_NoIf = SwitchStatement
			case 229: // BlockStatement = Block
			case 231: // opt$StatementList = StatementList
			case 235: // StatementListItem = Statement
			case 236: // StatementListItem = Declaration
			case 238: // LetOrConst = LET
			case 239: // LetOrConst = CONST
			case 242: // LexicalBinding = VariableDeclaration
			case 246: // VariableDeclaration = SingleNameBinding
			case 248: // BindingPattern = ObjectBindingPattern
			case 249: // BindingPattern = ArrayBindingPattern
			case 254: // opt$BindingRestElement = BindingRestElement
			case 262: // BindingProperty = SingleNameBinding
			case 264: // BindingElement = SingleNameBinding
			case 266: // opt$Initializer = Initializer
			case 277: // opt$Expression = Expression
			case 300: // ForBinding = BindingPattern
			case 311: // opt$CaseClauses = CaseClauses
			case 320: // LabelledItem = Statement
			case 321: // LabelledItem = FunctionDeclaration
			case 322: // LabelledItem_NoIf = Statement_NoIf
			case 323: // LabelledItem_NoIf = FunctionDeclaration
			case 331: // CatchParameter = BindingPattern
			case 335: // opt$Identifier = Identifier
			case 337: // StrictFormalParameters = FormalParameters
			case 341: // FormalParameterList = FormalsList.l
			case 345: // FunctionRestParameter = BindingRestElement
			case 346: // FormalParameter = BindingElement
			case 347: // FunctionBody = FunctionStatementList
			case 352: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 353: // ConciseBody = SingleExpression
			case 356: // MethodDefinition = GeneratorMethod
			case 359: // PropertySetParameterList = FormalParameter
			case 363: // GeneratorBody = FunctionBody
			case 364: // YieldExpression = YIELD
			case 374: // ClassBody = ClassElementList
			case 377: // ClassElement = MethodDefinition
			case 379: // ClassElement = EmptyStatement
			case 381: // opt$ScriptBody = ScriptBody
			case 383: // ScriptBody = StatementList
			case 385: // opt$ModuleBody = ModuleBody
			case 387: // ModuleBody = ModuleItemList
			case 390: // ModuleItem = ImportDeclaration
			case 391: // ModuleItem = ExportDeclaration
			case 392: // ModuleItem = StatementListItem
			case 409: // ModuleSpecifier = STRING
			case 425: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 426: // TemplateHead = TEMPLATE_HEAD
			case 427: // TemplateMiddle = TEMPLATE_MIDDLE
			case 428: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 94: // TemplateSpans = TemplateMiddleList TemplateTail
			case 95: // TemplateMiddleList = TemplateMiddle Expression
			case 151: // CallExpression = SUPER Arguments
			case 155: // CallExpression = CallExpression TemplateLiteral
			case 312: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 332: // DebuggerStatement = DEBUGGER SEMICOLON
			case 354: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 365: // YieldExpression = YIELD SingleExpression
			case 373: // ClassHeritage = EXTENDS SingleExpression
			case 404: // FromClause = FROM ModuleSpecifier.s
			case 420: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 89: // ComputedPropertyName = LBRACKET SingleExpression RBRACKET
			case 92: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 96: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 144: // MemberExpression = NEW DOT TARGET
			case 147: // SuperProperty = SUPER DOT IdentifierName
			case 366: // YieldExpression = YIELD STAR SingleExpression
			{
				return _symbols[offset + 3];
			}
			case 146: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			{
				return _symbols[offset + 4];
			}
			case 361: // GeneratorDeclaration = FUNCTION STAR Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			case 362: // GeneratorExpression = FUNCTION STAR opt$Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
