package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 111;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy5CNtVpER7X9waOwKX8v0C2HqKV6dec0NgVOUiA9O41KH4L0Kks31hXHH4GMa5r7" +
		"f259iM40GHL34dVztPkVkziecTvjpWR#t#RoT$jvttdjJjjo6gDj4UfTcirhiB9fAqsa6pQ" +
		"Jtw7twW3waprXtleEEezPqBft7z$0V#Lx#E$#3vj17z37VnV$a1raXAs0TM4VMdYway#a2k" +
		"e7$nV$ck$al$5T#YE$ZF$CV#6zyFz$93r1TVXfDfeaqYIuMWlyavT8qcXKcjnwxZDr8y$as" +
		"#aH9VueUPileIPf0pzFJD9OUeYVujzIR$yDD$Zt$ZkRJr$G9Jw7Dz1LjeQsqZRRJNJoLhQ1" +
		"#R2Nxp1pDAj1eTWUzJU#muPH5jQWCfREnx7EwaUrbszasogHiAalbg3nLe8fKYIfJ5QfArU" +
		"WOnfaXfj7bD8nlPF#ZcgmFhQMXL9sTIejO3Qf16Mma7GI2kS2gpiAa8RIG5lEl#GQ#dg#Ym" +
		"QmcVSU$ujlv9Um#TZyzwDHlSw3gzqtqhQDcBc6DgJVzI3$GJ$Hp5Fq#XMzcoQmwpGE6cFjD" +
		"yzaFu7#nhz$Y9zNlOVX3l$d5HYfg7A1FOi64jYDe9UMoRhoFEIXsJ4O5LjRemRwsC1d9Heh" +
		"2z3ljKhOO3blaIhspFscOOR3ob4gDgIcr8Sv#vCjfXS4DPhOnptRIS2nzCLfPl5awDQ9S5$" +
		"fTIacKGibMNpZH4jaNiOVTvE$BQECOvRMZs0D66Hh2hcHNiQMwHuDZmSeMizluIZRCg0o#B" +
		"h32otFf2tQxXPKreLKIgr7Hg2InaYcnijeIAmrJNZx4l8krT8ULLx5QYMb6RLTOTx1ybiEh" +
		"QRrMWyy1AtkNFQVq#ZwmDWJAMUnYbFpEPW7hg#nq6zOVsOzq6wrWWnozPBOSgNBUuxtD$ew" +
		"Z5VCdxVJDdsmkEutznPDeapL$qbbq3fqTFdzIRJQ9lSoUfBzP0$OsIs9fh0nhntgmJgmy5x" +
		"m9zUTREF4BsN97kMkj#LFDIQDP5#L1oup6RAQH5fCT6a4$1Z$674sNklBlNFOTT9ohVMQ$s" +
		"Al6wbhsZ$APovJFtE3pRxeQysOZrfEkT#CpkerrTkdVyEghjC#SGzSgdtcHjLG#CmrOXx6p" +
		"gP5vby#$wJfevqzNM8lqlB7F7E5EhnXRVhrA7rPOCLChhAShlGxowHM#F0I#$34xzd3fLMm" +
		"qxzHwBS$BAwpbZMeAwquw25y#dLQOezWkhTUHF9ErTOLrcDMAdyZNkS8wZlNbkNv$lTYQDu" +
		"2lGFdhEgbNv4czzgEheU4XHbNUbLtWQZuUpnxrwtLDx5Wv4tlv2PXXBH$uNcCTnZzLUXs1j" +
		"NaOLgLzCOttjsa$Nm5xJJCwkFDBNiT8uY#6hityNgM$0m7zKJt#EdPv9zkzAoPB$#Nto4Fi" +
		"H5T8jvhh#6BjbIFXZL9xunafxQN8qOunb2gnejxZx6ICUqlYC9OHavqpjK$EnzmsnuLFLg9" +
		"SeujvdRRprQoEGlecdwtsO0iLqc6iBgk7$Swnh3uxcJMaEqFnqSPWVBI1JgL#T3hrfBlfIr" +
		"fFjz10EeDkrPPenMkO5tcsgarXhLaRbiUwiywi6rlExuz1kt9LwufLhJixWPt4hw5Q$6hMp" +
		"AvTVXM$LcgN5$71V8ZKBh#9tynluRSopk#c0UmKEbDivwFOMhQEhMSRs4Rs9Tl4DhEls1Qs" +
		"bPt37#JNyUlv3Vn6FZewZT1lh5nq6k6FyYVuGtme7nwYaQQE#uuprRxZF7O#Vy2ys3CBNGZ" +
		"VlHuqWdt1Rc7B8#lA$9hM6WtO23K$TZUtixlOFUnfjimSu1LEZDXdbFJdnLgZBd36CawNiS" +
		"dmn5VPw#nDexwBSVeEcyvcO5zepNsT33LEsNli0pNtvLAQPrfGOzZeocQRmzc7phj4jb3vq" +
		"doZFLl4bfWtiDNiRrnbUuNo44yMgrbFzevvZ$bGhBOo7pGVCE$Z5NWbNjd5sbcLLwTXOgjb" +
		"Ax41kpqvfzR3LS5XiHMlptuqXzFmOdRqZQIjU1l5Tp9hoFFCMxop5Uz9e$YPl1S$onnkZc7" +
		"BnHVYStu1luZtOzrvVpdk7UzeZFCGvHNc1FDHVbj9kXGLf2v5USbNb1DbHRR8yj3lHzCeEK" +
		"U9CkQV8ZDMlnSP8bsaYLIH8f9TtCTAudUQAys3lZcAtoFztdpTVFumpL4TfQtODywsCf#Mj" +
		"ZAVaNpDl$d3V2n$n3jRcNFPztm2VrAX$AqOb7FKw7nQtGzubZzlVinVyT3lNsP$c1$nzqho" +
		"UtEMqkLx2kMxvcppG$Dz3tNv0OqoP$ArR8Gvd4kB3wEhn1JnijEzP#ooKzY3F9br5Zk1yba" +
		"QHo$GIpH5ot#CNgCtf7pnWrWlreXLuZEnqknBhzERz0mzJi$HM$GoFK9Zw4LwXHwbLx7Zr$" +
		"UUnLIp7urtx7Ukr99HniWmierC8qlUUpPF3Rxtx8JPFCaennuqU#ah1KVCvfb65REdURgkv" +
		"uZPg1cuNsxKSiPidgOiUvPHJ#mrUnjbrFtoWU6OlR2pqPJgKmEZcT62NS8kTVP6ewKQCmEC" +
		"0gFGw6oSO9n8nthdZQoLSJ8VoEOJ5OyIvV9Eclt8zN2jiFm31#yB935U6Tb1MrT6$CeOhep" +
		"a4T7FsJ6QgOZYoWW7Ur3LlW7aE2BWv#emhrT1CQCOfMf4iCiHAs4KsnI04O5pT2F2Xxc4KU" +
		"pdNS8eLdKip5SNYpdKro9WZiK3pD5ny830iPR23dv7m0DYGHR2nRfgPp4WAr63$Auu8iijF" +
		"J9pd9$dVN54zb8yTERdEJ6EoDwA7fdOLH8sFYb#o7Y3kEhirJWYQnnNP6$54Ldpk2AR5aTa" +
		"xUAAxFqu8YkCAxAFueYiSroHpOiZikwkLwS81rzKMcJ6SNvaFQ97fk$KoqC#$P173QErnH6" +
		"xSebisRztJzbnnpkO3L48iDzrqXWhKhrkRgN43g#mEU$Yr4uiLy79ZM8dPXrHxCHKR7nGA$" +
		"jpJl##Mn#nx1wzqatmjKQBX0qEjmqISX9o4dB#qtB8VxT37l$kN5dSuS5SwVJi#hyf9$hrr" +
		"wl#U3L6ZWxx9EGav2Jan2Gd#8YubaLOUQ9OoupgrbfcNGlhm$b9Guntxibwqk28MJrfg4yD" +
		"p2lzry9HO1PJ9MOs8AYlnM9c$UECcVnFHwBLSpw5xncyrNFCc2qz7rsOLSpvsQp$phy#8c2" +
		"EwSrNueDitDGx8C5lF9Rmvgi#M7FlHxxML8I3DOsG6RjrlSBiyFnV$1vlp3wFZ0zc1$#CD#" +
		"P157eSyPZPl59WZavk74Q#SPADcpNoMGnlgCOaA#YmPELwAEif3sMzvA6ijxoJ5Voayr#Mr" +
		"TX3MSqzbDNEGrc57ihgxA6ixXxAwk6Xh357vdpeVEL8tmHVET9zjBpuAqTpEQz5ZkkmvgWE" +
		"jjpYo8IVexh2it6q7SMzG#SAvUHWfUcddVU7Fkq4Il$1o$9i2ZjubZgNYJ$AS5asgQlZAcb" +
		"jYJQB3$9Vw5Vc$1K7Dv9#ZIStbkMexyyWASP3VEcLD#0evjTtBcHvebDrEFuInDsuzahZSP" +
		"OKNnqKTyHrl7YdeQFLiWdS2TnncDtz1njnfCuxME$M7R7O4hoEH5w3Zb1S2Lu9NWbU2Lu9N" +
		"WbU2Lu9NWbU2Lu9NWbU2LvnvSNcHiNBnRVf#F7gstJwu1odOZXm0noicZNf0Sc1R#B7yLES" +
		"tzEmVZNENd65xGCxDdKdoVQxUzx5wSuFiFbYqu7D#L2$k#TFkS76TlknNGdoVMVL9$SJLpn" +
		"7AvukMXfviYKR2KtlSR85NsKS8x#MhU#EoU#14jDFQjZ$hD38DjhAtrKQrP3O1VgM3KVfpn" +
		"5qTmbgLURBNNqFyTvGkr8Kpq7PGFey$3ceAedm75G#7pLoOOarxX4QZOmS8h59Fl4qoaR#V" +
		"ISx23dfHddhYQVqFFklGNavvGtfz0VFu6c8ol5yFEMpMzbGr7YjLDhhGTrmFW5yRaPu2lsF" +
		"sb8UjQFsL40Tg2DreixKXRfITpgHJgAJWQqv5KOQ1koX27blb69KUEOJIkDH#0H6XLMxRgJ" +
		"#s#oYtfjclvJEBj8d$4TqTg5YVaEiiQ7iRZQK7#iU6syMy1bmkxCqFXECJ6ktTIdqrYE8Su" +
		"d8fELv1qTaOUXuszBPbEVxz1QrJPtr5ehjcLBOj9FTfly2jkTAWUtaU6BZvuLXUoa#ysSSi" +
		"5qMXctAaO8jWardbCAcK#ECBNGEcUdb74AtbtAjYlQN2TPnZtjf4TwYBlOGssX1tDRXQ8vb" +
		"dahxr9MqErplJdR7Z7Er9$hG#nhwnqljisnFfJNoLDhndafxrbDfBtWgRQgdqZxoLDgtdah" +
		"xtKjfFCTJQUqzbTRDKscbtLt49cs4fzB6UIhjCK#bkRhtuLhQXvvASxKhv9$7vxvE3FUNls" +
		"I790Tc5jkRB$uVxtlSxKHoN5kgYUkMpLotRE6wPIlNBKzptRANwvPzNBViwxhbpQvRkhzEs" +
		"k6wvLwtBTq$DM6Fk6uvmNNBnrstVC9roqzTjrpbkkKQjorvKzSjExfkUPBhbkUwRdcfwvRl" +
		"k6uvntNB9QwVJP9g6NAVBygzWE#vJF1U8COxaDHItO6CiHMRA5jn#Jp9#Ii4ORqghhRwdr3" +
		"fgawaTZtuh5ZmcQCLlhanQuEKDa8HHFW6VT0H2R5bnwKn8#WHX20gn4Qxo3ZqbuxSwQ1qcg" +
		"jF3HI2Ohxw6qb$l8K3xZg72pUh4JrkVMW4hBU7k8bL0zMaY0UhweGxw3WSVXBRaS3z7yBD7" +
		"ZiwSH#j#ZvoS1iDq4h#jzxOSJllB#nV$LCftjAXDxxvEvd8g1irWh0ttOpw#eqPzVQA#DbQ" +
		"KrIgFc#b$l#JVvMHRqW54Fg#4C7B6Gtb6rByRFc652ydLnbVYjqRaCTh6$vLYZTa8zb0AGK" +
		"hrpK#2RAl$0mLMwNMYU#qJEjDjv2tibXldiwEizxAKklV5G5Cx5vsRQ2VglP8r5wWQojEa2" +
		"zxrri1Gb#HSvtkFUGfkJLyLl2jNBwtmNX5pMc0hCDw#IrMaLtBgh3A5bSsHidLR#QnX$th7" +
		"zPltfBrLlAla7915x5ULZyHXmuKbv0tYjW0u$Y00nZTZMwon#6hAhk6dogbgNWlgctXv#Up" +
		"cfAhikj55bUZYQv3rjS$#EMMv4WE5xHxa5$$8ACDmdFv2xOwhn4ZJWObKJAbK2gbKJfbK2Q" +
		"LeIodhx9GTQf1DQaMSDQXkbIFZbNxcuRKY78ebnfJ4sfApU2zBN0Lq4gDeJRmzHpukXnBqj" +
		"y97kyajr39lPbkmHMCbDuBrpzdqTbqZdh3LxvpUo4LqM0QGZVGZNIJhZcKRgFRQHZTWUkbk" +
		"t0TD9pkeH5qBzs7CPQD#gjK$RKqXXwciJIEnjCZz2XDeCVeSPf8Jz2Jz1GzJS$Gi$GSFK#J" +
		"Q3AzG2$II$Goq1RYxpjwdTwWD#aYMe0PP2hj0iyPc1VaN60XiCv4S#WW$OqhgslfEbf8YsW" +
		"nBQ4#w7qlMa6VehvJlqdrkn1NOaurTiROxnnWpG661S0GUxyj$aN#VlTK$PQwaFqkylSx5a" +
		"o5q4GVr9Ts91UO2j6Vtz0V2zC1#bDXcW$hIanhWMcmqli2AcGfo9z3hz2hz1gJtlmjbMNbM" +
		"7bM0TVAJXgEfIyv5c#4$T4gzhvynx9ODYkh#z8N7YNxqjFMbo9uX0zDF$H5Uk8dMkgYcB1#" +
		"HOV0jn0ZSAqhh3FHAW#Mix3s12U9zNVQfx3cAQnB59f2vULpQ01ot6ArMidUkiEQ0qJRDTR" +
		"j6kkFo9DOVmJMfSZxLPtd8vHwjMFDmbzP$6rqz9BUQgJAUUyhER5wD7$Ef#yXQm0yfI$zLC" +
		"pyUP5j$YmYK#bTpfy5c3zZiSFnqC$rc7NpQ8ihEmo6lop5sRB3J3r$oFbJsg50#Sn6Fveis" +
		"A4$aBlp6QkDTNRhtps1riBQ2tsMMFFq72$zkn3#tH$Qz$btjkknMA1RzK7CdLu7sFGgVLXY" +
		"BT9OYoBejIpwTZZrEa1ZdQ#nphVfjI$qMXOndrwvQxqMwbOC7kPEhtBUyEbrgPut#kfvmz9" +
		"hePxZig3XERG6OwJqUirpfTUUoZk3v#CylJONAd$j3vInO69gXX$iUjuThDRcdB2rsT9VTf" +
		"3#vDmo9qWBRaRGOFJmQrT8vHh1$DehqjhBzrkw4ESSZJLFhMQMn48rpcBV8nmFQxX1Mg2m5" +
		"cYaScMoaERPvgL2jSCjX3SM06biDh#VHj83D8eUfD7qaCOgTUhTgfQbq1U07iQki4DCwEMg" +
		"zXDMDTcs87RjuafSxjrwGhk3w6AwX2wbo#XoN9LUILVHrNGDiCch$5cupfzD7tccaRsEaWg" +
		"K9EXBVVVSApm5IaVzrOpI1nQAhAi#MDbzupjRxV8BmV4i3t4MWQEKdWEqCsFs93csSjGAiC" +
		"R5ECrY7BtfxT$h$A76wJ$GdHodWp5ElTA2DORt0qi1zhxEkyGy9JUBPQhHLu2z9OSMl1lr2" +
		"s2bR8G5G1AhhVBKdpLpk9bJvNhPqp$xzrAsoi6AVtXibQUqKBOOM$LNSdCKtopLxpnFRTLN" +
		"pz6MhNhYhq1h$s4rxfsHU8UoGFj4IRhCLtBp5Tzy$USToYBeKlfvFb3cn#pt#RQ$sFtUrz8" +
		"tHrbxYNozwpaSSrHijcgiPcZlR9KFMsL5xL7MwCnHkqWlHsSEKEP7COVOTPdZkT$dQvI5QX" +
		"RfW72fcaUSxyCLGVu2#7XFe7IMtzFsHyN87npblUV1gj$zw1jmpw6$rBtdd91xpqvjvUv1j" +
		"hMysnbpFne8yjLpnhp5XhcW6CpzDEQ1cg$4N1GbvdZR#HjwYzv6ZMze6aql1dEEabk4FXO0" +
		"jRJsCazNj2AWp1AYU9GeXrnXE#0Vtg5K$Y6biYH8Zd6j248TyrgXMZbgHPL6SMMawYdzKGx" +
		"8MIFjDCy2TIvc5ADKZmYbaM97iQt$614uHpKYV9XB6iL#tYMCObKd2ioXlXOHSqnFVqhl0R" +
		"Rs5ucm8yW3Oa0MmYNsVKo96ZpIaCcPvaZLsM57vhW7EEp8ZboT9P0baFsdaOaIZz8Zex6kT" +
		"AQkhbLxN5sh45VNccDH63AlzfBObIlPsEywQcokFBCCdNA#DeitDiTTdDo9oRFQTvUu4zEu" +
		"ezY9gLY7e5Rs9r7#VRSkYs7tw9bk4ZRuxzWW8ISX9o7dY9UZvYd$5Vo$ErSMToJcoeISX9o" +
		"4d8ISX9pIh6Ms5IMYd0WhJzHtmNtNmhgTyntT6E$SMqyQYbb$sw54Fg4gy5qBnt3dVbbGNu" +
		"l5JDlYYrcL5hZHS$IOuwtd$mPc5ND#4fKbWexIFjL1stOsRgxlcz7htezyIrFXRP6xDq9Up" +
		"DRr2dCnStESCTjjdS1yP6AEJkxX7$cUFZT8o4h8IiXAo4h8ybvMdAySYrs7$MyiOHqCuMXT" +
		"uGKu1lKgxk$GXMXDFUsalg5FE#qx39fByqJOGSlLUMNyKORBiadDYwi#BYh9Pl51hjxyZpF" +
		"o#Ff5SSYBiqV4Dd5z7bw2h7PnrOCdEbMuuso$etJy7QNwzb13Hwjb4xWJk4izkzka5Xwfyq" +
		"wyrxi4hmIl1Ay4hmIl1Ay4hmIl1Ay4hmIl1Ay4hmIl1A$$42$NtwRptpEHJvLAuA1hJl5pa" +
		"D#xSNwFJ3t5eezBZyswasIB$#1uvsUAFwP$BUXGJpsdA2qskyu2s4hndK3tBMT2ydf7Zre8" +
		"Mooc9HhX2leKvrzqwdKTrh5#Lwdwj0gqbTOAmIY2xdQg9odVniUkqJm7XQGfuSz1DUgmvw2" +
		"g1sj0yqgXpzzfdxfN9zzf$Kj4$7qdzOL#KbcQzSHJUfxzrw2#9vxq6NrENo3c6yzMxL9vdl" +
		"n#3SxjGJj0WVzmq8rEiFrV8lcV44wbq#XqQEyCEZFYEEWJ8QyKsBpp2JKFHU4JjDxNgqZzj" +
		"zd5#WtnBwMqIryRvwZi4kmraR5PJzLBPPUyWCz8hocDpmGZYuFF1BqbM38oPNdcX2mSNRp6" +
		"MlGsTTPRFB45s$J$CpRAFd9jUYHZEv9jUWJC8QNR#qNvomIDg1JImj#YBlx0hgMKVOjHtb4" +
		"ZpHkSfTbtnY35jwyvQhIVa9QGbf2Ma9QGbf2Ma7PqIJiyzvUBxStweqLttafBj4oqJBHCj4" +
		"oqJBGyGbg6tEUBRY$WVouJj1U8#GvaJta7qcKhvdoNB$pkfU9SxBDmwpT74Tl5YYzFuOlvV" +
		"Ypgo7QXzrrB#CrU9CIw9FOxmkti2A94d1CPXtvYvqu7fT9SD5$zZQG$wqj7uRXftU72RVzQ" +
		"L4cuTQv6G6EymutKGj1Y1vohdN07vHu6Ft7MRV7wJk1Eu4xW$l#A6pkfzdBtusB#TjvV1Ct" +
		"ZQd$bCBFxvs$vduDcHeqWx4qtMgFNCUkR43trL$$a#rAIv1jGWLL6lhtYn#FxGWGjfp#4$m" +
		"qff9RPKlOTuZgMxc#x6PYBb8GY#jadGTN#MSNKEY7VT5CohJVTGjxAeZ6sjx9aowqsJ9Atl" +
		"v#gzanRRQklHOhJ65llb#ZUo$#qxU#hFbk8Gjy6MwOa#rSksW1ENz8cpNMFahjPbstpSx7w" +
		"FKPAOt9tAlkvcrPR$PHSG99Bo3eFQTas3wX4bONwhmIXgohjWHMswVXgw#iVj13O5lkuqcw" +
		"jntPM7NNk490SqUE2l#zu5kWS47OFjjpDHCOfTvCy#FCu5H2b88zU0IqaOXs8KblAyd#3YD" +
		"AlmYdBYcTq2UIpRbROu5kYZazOyOQPY7#9y3Y4#n2UHzJXHeHt4BNgzszX3CVSy4MYJdc1T" +
		"4fTv2qZQhcWvBRr7aNRCr5$3nATeFDRY1fLjiewZPSMiU9qBkp2h7XcHojC6gFB2b5s3cWC" +
		"R3CTuPrMlZ62A2rPrta8V56lqvjMcjzkXOq6uWIzDHg9ib$GPYXe5TgzYxotKFQLLQzp6b7" +
		"Tif1vefLElv2e#gLUwFTm4dIm1gU$0sdghFF$WYuQmoyl8ygfWumjLdvTw9bji#Bru0D9ew" +
		"rusSxkv6TEjC8a#4dEYH1$IdYTfBSXznChtlaIAyov6l6NOQF9AD#EZFSHVa6Kt12sVG1Xd" +
		"K3xv5weFnwuTy5t8IVvTA8AcS4oQAckUwaLTlXQfqVglkwnGjPAztSqJXTZA6EC9a$GTISI" +
		"7MCRqpLqtv8rxmgT4OVEajy4hGLEp3l9R#Wwcu0HVU1vgFUabhK2yPN1E6liHTs$KGzjKo0" +
		"xfGryjGN2DAsNBIZhvgpl5F0dp379ktNwB2jC7uvuOokU2HafvmMtAxiHuoOV$NiAPKy7br" +
		"Lao4Cq0xfDmLoH0jmPIGZNM#KPEs2RVfhtK1kMwU7uikhglZ#jqxU5u5y87cjiwNTrY7aoP" +
		"IbejgtiS$3vKCTtGjzec$A5hNnl8CvtHDPNha7Kua1mNkTvkWpZemlwddi6mfe8RuBVZ4Nu" +
		"D55hLAdO1$CLz91wFl8#WGpOFxMhrJRrPkJz09sYhE9OdOUviGvqbTgFw5ZuSMf$XASXx8q" +
		"w2tITnuWQPw7THOW$hlFE0c$TJtuoqZVgVEr7ZU4Znaj4PRfRwPgdmjvrKGuxPxs7S37eDz" +
		"W9ysJg4jrsQQ2$ZIz0$$hQz8OsZU$2cdGsGep1BhT6qbrn15bw73M6h$3LLhpwmK1vtP#iC" +
		"4dxzR73hR3BB1iFpF#DqGTZe9MkSNQmZ9RFmkPSrrqVo4zgZRfl1zVbmuBJQHXRQGrG5xhc" +
		"cFFI6khyHhOwi7lp8GXpGLZZCbv7sCbMtXGwrtD06cnVfZducUWBzXffiD#n6Ajfc4Sg7j0" +
		"OrX4rgOewcAygDRNocdJ4MbyUwVu1lidGUnharg#046jO$VO8OTzAZrhbhP3N17DJ4lolah" +
		"Pdar78nxnHwM#jWykHzmv2OAdSKjU1$EDEGVfYArtcReqTDgwCkIqTOw73dqW3Tteo#liFu" +
		"fjqdQ$H7loFatCWzYffsmDuqxFXP#Xl6lmzlQpEQmbgHPJzafLkMWzjluSFz4H#OrjRw2sz" +
		"6mXhG$f98FXtUW$GFQ1xGR1n#dCWxENI9u6m7gI$0Fe81BzjYlf9Ku4VVfB#CL4LZAlqEQ2" +
		"v8En9cbwBSk2kWhhfIw1R#4OLx3FICPTaL0PL0zL07iPl1koP0TbDvHe2ssUW3ncmHGRcpg" +
		"Qpa0TzL$a3wIj0m5SNTiaO1ljSXn3ZfJx6RWRiLXNpHaOH#exn1ZLI$UL8Vu0G63EmlwlQ5" +
		"#5hA8E#csv32DjMnVgLCPke6HgqndYkkWXfzAD18uIh4M9Dou3TgsBTpfWFEw5TC#1DXksg" +
		"mUyo5Y0Dl#g0lbR3dYW3Ss7oxSZ3d9FyAl8ajeD8GvyTiGUkXdKgun1qezUd3BIhLzkATra" +
		"RF5Oo8uplPf2N8OBpQgO5fpDCApJQ8RuR17iqWDuOzcZPq4KcvjQk65kuAg3CSaJbORyKsA" +
		"SrwgQXJorWXthm2#CRfB57piGuQO0wgR1N9iP6AkfbLaGPz9k6UIQp4WWsRVOJ#2BCl0HqA" +
		"tXcXEDlWRKk4$hBrFk1p6j0LuAmzyxK#qy6EMmUqXWpcTWlPc8kBmV$ohp8Ag#6yP49Mt9W" +
		"oNm2XBuTSvxcXxcht12R3k$LuNsW1wnuDua1uxQCdiCOrfSo5SEnDjTZgkCTLdZCD2jC#Wp" +
		"rzVwuUgRc3x#eEIZGjXp6GHhyk2R6K1dqiNmPXDS7okao7KuDbfboA1H7l0ZziEsXCcyBn9" +
		"dkLpxsWxxzMZxiIliH$eXo#41xZ0#6lNxxOn6#y6zX3CVS7lCKssB3#YloCEVnoL6qXRzpZ" +
		"EtsZoESO#Kbtsg5$00kaNxMyRQ1DbtswxoFTNfne8pV7ym$TRLDrWoCbmeo3hxhhBpMUj$N" +
		"7ljdu$H0NOB$jnuGI1jOCvhzO2jl8ON5ggkZZQ23YT3LExP#RzJvdrcXCOMeJNAWl8MjRPi" +
		"EWNXIVNVocmyFnDlBQzYhmkiGreSs5sWyBrfXGGRYM2FeUOtBTWtFlmhdqKPVRvUvn0fhdX" +
		"vSdbmj99qJqdvX22QzTdJj79pVyHjRdMR1PQnlSDfe7I93xrzgZWZaLJypXCT7MgwTpmE1U" +
		"DiWdg64Vc5$o#HrriqwlTOAa#uCr4dl6TwELz1o1qKeMwdBnjamRGt4kmuBnAkjiFNbtN1U" +
		"NLk4f2FuG$aJRR9zS$W1#C1fJls6ZsFVrF9oftBVl16UNv23ih#2yv8gwhBkY5T1Y3r74kQ" +
		"tWZiHFeaGrqX9c8jgslRpRQyCvzrsaXNMt1F8QxRO2blqqg7sxreDRUqsM67AP2jas6UdJD" +
		"NniO5wgVfUN5wsnhr6zxKsw0OhthLge3whug03xD#ITjduedq1zjF9QGXnRPKSy$qw7FhwB" +
		"izcIpOZ46y#ABX#Yr#qx2us7jZVvzbyYzyPt2RVrZT#Kt1PKiFWTAhZTHwkMpzoBkjgcmFP" +
		"DU7boRc1U9VFhR1bXWwlji9QVG9rycRelF5MM5WMUnZuMAqbWJe6zf#fk0PeESjAjqhLRVw" +
		"nmlH7m4UlgxNRQ3xDh3rdxIi3VDhLqtMqZnMUOkqXQ#kriwlDDiPGtOULWJmsFxYlXPTXVi" +
		"KUiUkOS3rawZaYRLnmlg6lvmknPopp7Te#7zgsD8G#dc#5MNglcpKzf5pVdyWIWRpa3U5yw" +
		"cJQsYmEBs#dTPzzMY2lUIKhR7ME3lNQbQtlNNIThVFtMk5n#lvajlz#3T7nRQsmhC#Eaw0d" +
		"NAUMlLktqUlQSPjrFQtdyflHLljNkUgwBQuVocz5sZyFeiuBkew#rrIu2NLmlLkU1VUFrKV" +
		"TBwruXMT3#n#kZ#FtX#SbBOfSD#E6GBpvGqW3Wt6BBjiSAAkZxoybNMk57MfXZ7T1dGS3TV" +
		"9npPSnpuftV2Qol4Ai5HKcsN2r3Q$JV2Vul6h3E24oBzOaE6qi3yIxFAFRskRtb9c1U7BvI" +
		"3m3vUNaDLRtG3gpH#HwpL#pmWhQlrBswVe30tNIJxB9hM7ZkKg7#ZvLcOn0cN4AXHpc7#Rl" +
		"vc#YdgWhweZQefQeAMg8wk8OKKrK5LL4PL59L1HSC47cNwe#j6Z#REBwnVm1g$2BubwSSQK" +
		"eXblynDsYY#WiseayqLQq4Qt5SQALQ2bQYEQYcMWgceZ68bVaY4QYeMWWwejZnUFYCJ41xK" +
		"Q8kyIT0jVuuWxHINGK7KIXA13jHRuutXnY3eQy8YN$RXFNj6AwalKEw2tGcxR#tAvA37M#J" +
		"tGN9uYU6jb8SQsuL9ojuXUB1rJONwR58B5N$2hsYDtY5x5Bx1G$Yv$4Z#87iKDyBxuJtufl" +
		"nDTYkzWcjeejuYknMMmINugDOeDOBzQ9jMADM2rMYI$4v#8piLBy8mw9lyL1yPVuKnmG#yK" +
		"VOf$uNVmc5eZvOg4OAFh9VGjaJXQJS7uUzAp6TwuwVwhEoz2JLU8ICK0KYUl5TU8QSRMuIb" +
		"mfhX2N2yp9ucrLwmsnL2mHYyKYWNsp#4ZC4bZNnOmG2pzixWjAVsx#Onv2E0qq5GGjck1dG" +
		"fFcc#OuNUjgTRxSX3JpKj1juf2Dnr1$x0rnBSwJpEVCPqFaZbVdfyHSyOcOPnvljbFf9ys9" +
		"E3#culjDZ5lp4LEOfb$kjUOLvYKY6F6jwemzhhdRt6MkCrURQyqTvlT8OtqnlmLzOtvbRbI" +
		"rDfZhKMEDr0XIsymlLRXLfxUOcyJ7OgPurrmdNXElYbV45F6oqkLBvcRp5t6$k0rno1EtQA" +
		"lS78JaKtzi1OKSvb9$x3NpLPodgFZBvYlcYohsf$b2M9kRGB#QUo1dgBX9t2ZWv#86q13ng" +
		"7X4Z1VZn5Zni1WZ7XAZnODYbEWckeeU2jV9e9F4YJW$0yB#L3mfdX0JnLEYjoh7rRpe8ouK" +
		"$rEfyyNPuZpHIyNFaUC0uIcYhxZ0XcKaw5xp$Y1yDvelAUIJpMKXo9VuOmjr#8dvapd3d6w" +
		"hizWQPOWjqk5yVza27Su3lHkc5vlMpMlC9$pnntKurfzpbVcPR$PIlLEpbuhfsIk4iysBfU" +
		"SY9yHlxLOk$U7JG0crPgiH$A5uNxmdNXVmBR5Sd66sDVCGUqwS9SuKfoDscZZL$0BuXi62Y" +
		"p3kqSOS9xq7PHt3U5wdpeMW3YgsHC13nJ2hrEnZNc2URvwdK#VwMfdd17CnJmnAAMyoUvWd" +
		"coUQQYqnpz0btTNv1BERsTNiWbXdK2UGmcK2WLbevkFStYm8udWXLjnFMGLY84v5n6AYcKS" +
		"WtKq6YEimcMv3dfrk00tHT2Fe9j1Te5LGnog4jwETHSdqBVXObAHeBU9hKMSzmf6WBMYp1U" +
		"cHADk9S2VQRKN#LXKoMg9fXOq#HTbIrBa5yLiGFuZm8D9$Ap9e0S85PE3IWe4C#WNbabwpq" +
		"VSnq1H51ZsAy5643uA$HOQcP13JvCjZD1vrB38q9OEO9byUemSq3OsIxbUK1390NASDHHCG" +
		"du2o2IhETTfGD1pvmn6EGjueb3sEy7643mLH4iXGySU2A0bagFXej9FqYAR1ckufWLw9Wbw" +
		"DaSQLWjul1Oq1lMkZTpGzfMcMfeaWNBk063qC$Ss1$kOW$fwcDv0dlxKdQJVYkn5k0ur5V9" +
		"qYHiiKSNeReQHfY4z3sJJOP0Tuxq3UTCId8sywfS3f3H2ZGyWxXBfx4D#3iha8vHvZ8yAvo" +
		"7yBD0$q1EX9IWKbqmS8NrAKJBWs0p74qq4Pe3HTvWi3yOyK9OFIGHcWD9td2mFn7o1lC$XA" +
		"UXhnfu7j6OJF87mMuRC8dmEl3q4lWx1N1p76qI#EzAzezolgRKV$$a7Tvq6pGNkH3sA6HJG" +
		"9UPFzb4Gcslv4d2MX74GlWCVhm2JNzFb83qFyPuIVAIBw0g551dskYD5Aq7BG9w15YeZkGz" +
		"a8n44iMP512z7FXSYpmZIIlo5PZ70gz7Cdw2kaxrN4GGPj09yDICy0nXbeSmV2En1kGjwNY" +
		"ZYjHhZQ2bbPJ6vb4MQ1ia7baIwFi0oe72W5$Kn1$TziT00wE00Tfg8yG8QYD9J$3Xpxm7yV" +
		"wds3zkd8JqV#7yZ$0#5Ve3MWFr5kaG7YccGyYMMWNGR2JBJDHDtzoD#Fy5RGpQ3lGBj0B$u" +
		"VfFd4$G==");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			{
					
			return new JSParametersNode();
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSRestElementNode e = (JSRestElementNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e COMMA BindingRestElement.r RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final JSRestElementNode r = (JSRestElementNode) _symbol_r.value;
					
			return new JSParametersNode(e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e);
			}
			e.addChild(n);
			return new JSArrayNode(l, r, e);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 76: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 84: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 88: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 91: // ComputedPropertyName = LBRACKET SingleExpression.e RBRACKET
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSComputedPropertyNameNode(e);
			}
			case 92: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 99: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 100: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 101: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 102: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 120: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 122: // Expression_NoLBF = Expression_NoLBF.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 123: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 124: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 125: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 126: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 127: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 130: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 131: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 133: // SingleExpression_NoLBF = SingleExpression_NoLBF.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 134: // SingleExpression_NoLBF = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 135: // SingleExpression_NoLBF = SingleExpression_NoLBF.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 136: // SingleExpression_NoLBF = SingleExpression_NoLBF.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 137: // SingleExpression_NoLBF = SingleExpression_NoLBF.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 140: // SingleExpression_NoLBF = LeftHandSideExpression_NoLBF.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 141: // SingleExpression_NoLBF = LeftHandSideExpression_NoLBF.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 145: // PrimaryExpression_NoLBF = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 146: // PrimaryExpression_NoLBF = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 156: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 157: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 161: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 163: // MemberExpression_NoLBF = MemberExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 164: // MemberExpression_NoLBF = MemberExpression_NoLBF.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 168: // MemberExpression_NoLBF = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 172: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 174: // NewExpression_NoLBF = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 175: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 176: // CallExpression = SUPER.s Arguments.r
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(new JSIdentifierNode(s), r);
			}
			case 177: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 178: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 179: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 181: // CallExpression_NoLBF = MemberExpression_NoLBF.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 182: // CallExpression_NoLBF = SUPER.s Arguments.r
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(new JSIdentifierNode(s), r);
			}
			case 183: // CallExpression_NoLBF = CallExpression_NoLBF.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 184: // CallExpression_NoLBF = CallExpression_NoLBF.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 185: // CallExpression_NoLBF = CallExpression_NoLBF.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 236: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 251: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 252: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 265: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 266: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 267: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 270: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 273: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 274: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 276: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 277: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 278: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 280: // VariableDeclaration = BindingPattern.p Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 283: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 284: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 285: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 288: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			if (e == null && n == null) {
				return new JSArrayNode(l, r);
			}
			JSElementsNode node;
			if (e != null) {
				node = new JSElementsNode(e);
				if (n != null) {
					node.addChild(n);
				}
			} else {
				node = new JSElementsNode(n);
			}
			return new JSArrayNode(l, r, node);
			}
			case 289: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 290: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			if (e != null) {
				n.addChild(e);
			}
			// TODO Add null node to elision here?
			if (z != null) {
				n.addChild(z);
			}
			return new JSArrayNode(l, r, n);
			}
			case 291: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 292: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 293: // BindingElementList = BindingElementList.l COMMA opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 4];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e != null) {
				l.addChild(e);
			}
			l.addChild(elem);
			return l;
			}
			case 294: // BindingElementList = opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e == null) {
				return new JSElementsNode(elem);
			}
			return new JSElementsNode(e, elem);
			}
			case 296: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 300: // BindingElement = BindingPattern.p opt$Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			if (i == null) {
				return new JSDestructuringNode(p);
			}
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 301: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 302: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 303: // ExpressionStatement = Expression_NoLBF.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 304: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 305: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 306: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 307: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 308: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 311: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 312: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 313: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 314: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 315: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 316: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 317: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 318: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 319: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 320: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 321: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 322: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 323: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 324: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 325: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 326: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 327: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 328: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 329: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 330: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 331: // ForDeclaration = LetOrConst.v ForBinding.l
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final JSNode l = (JSNode) _symbol_l.value;
					
			return new JSVarNode(v, l);
			}
			case 332: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 334: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 335: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 336: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 337: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 338: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 339: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 340: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 341: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 342: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 346: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 347: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 348: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 349: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 350: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 351: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 352: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 357: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 358: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 359: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 360: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 361: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 362: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 363: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 366: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 369: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 371: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 372: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 373: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 375: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 376: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 377: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 381: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 382: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 383: // ArrowFunction = ArrowParameters.p ARROW ConciseBody.body
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSParametersNode p = (JSParametersNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 3];
					final JSNode body = (JSNode) _symbol_body.value;
					
			return new JSArrowFunctionNode(p, body);
			}
			case 384: // ArrowParameters = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSParametersNode(new JSIdentifierNode(i));
			}
			case 388: // MethodDefinition = Identifier.ident LPAREN StrictFormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 1];
					final Symbol _symbol_params = _symbols[offset + 3];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			// TODO Use JSNameValuePairNode to hold name with function as value?
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 390: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 391: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 393: // GeneratorMethod = STAR PropertyName.n LPAREN StrictFormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSGeneratorFunctionNode(n, params, body);
			}
			case 394: // GeneratorDeclaration = FUNCTION STAR Identifier.i LPAREN FormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol i = _symbols[offset + 3];
					final Symbol _symbol_params = _symbols[offset + 5];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 8];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSGeneratorFunctionNode(new JSIdentifierNode(i), params, body);
			}
			case 395: // GeneratorExpression = FUNCTION.f STAR opt$Identifier.i LPAREN FormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 3];
					final Symbol _symbol_params = _symbols[offset + 5];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 8];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSNode name;
			if (i != null) {
				name = new JSIdentifierNode(i);
			} else {
				name = new JSEmptyNode(f);
			}
			return new JSGeneratorFunctionNode(name, params, body);
			}
			case 397: // YieldExpression = YIELD.y
			{
					final Symbol y = _symbols[offset + 1];
					
			return new JSYieldNode(y);
			}
			case 398: // YieldExpression = YIELD.y SingleExpression.e
			{
					final Symbol y = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSYieldNode(y, e);
			}
			case 399: // YieldExpression = YIELD.y STAR.s SingleExpression.e
			{
					final Symbol y = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSYieldNode(y, s, e);
			}
			case 402: // ClassDeclaration = CLASS Identifier.i LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSIdentifierNode name = new JSIdentifierNode(i);
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			
			return new JSClassNode(name, body);
			}
			case 403: // ClassDeclaration = CLASS Identifier.i EXTENDS SingleExpression.h LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_h = _symbols[offset + 4];
					final JSNode h = (JSNode) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSIdentifierNode name = new JSIdentifierNode(i);
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			
			return new JSClassNode(name, h, body);
			}
			case 404: // ClassExpression = CLASS opt$Identifier.i LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			if (i != null) {
				JSIdentifierNode name = new JSIdentifierNode(i);
				return new JSClassNode(name, body);
			}
			return new JSClassNode(body);
			}
			case 405: // ClassExpression = CLASS opt$Identifier.i EXTENDS SingleExpression.h LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_h = _symbols[offset + 4];
					final JSNode h = (JSNode) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			if (i != null) {
				JSIdentifierNode name = new JSIdentifierNode(i);
				return new JSClassNode(name, h, body);
			}
			return new JSClassNode(h, body);
			}
			case 407: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 408: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 410: // ClassElement = STATIC MethodDefinition.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			if (d instanceof JSFunctionNode) {
				((JSFunctionNode)d).setStatic();
			} else if (d instanceof JSNameValuePairNode) {
				((JSNameValuePairNode)d).setStatic();
			}
			return d;
			}
			case 414: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 418: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 420: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 421: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 425: // ImportDeclaration = IMPORT ImportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] clauses = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSImportNode(clauses, f);
			}
			case 426: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 427: // ImportClause = ImportedDefaultBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 428: // ImportClause = NameSpaceImport.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 429: // ImportClause = NamedImports.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 430: // ImportClause = ImportedDefaultBinding.i COMMA NameSpaceImport.n
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSImportSpecifierNode n = (JSImportSpecifierNode) _symbol_n.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(n);
			return new Symbol(nodes);
			}
			case 431: // ImportClause = ImportedDefaultBinding.i COMMA NamedImports.l
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 432: // ImportedDefaultBinding = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 433: // NameSpaceImport = STAR.s AS ImportedBinding.i
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(s, i);
			}
			case 434: // NamedImports = LCURLY RCURLY
			{
					
			return new JSNamedImportsNode();
			}
			case 435: // NamedImports = LCURLY ImportsList.l opt$COMMA RCURLY
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSImportSpecifierNode[] l = _list_l == null ? new JSImportSpecifierNode[0] : (JSImportSpecifierNode[]) _list_l.toArray(new JSImportSpecifierNode[_list_l.size()]);
					
			return new JSNamedImportsNode(l);
			}
			case 437: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 438: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 439: // ImportSpecifier = IdentifierName.i AS ImportedBinding.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_alias = _symbols[offset + 3];
					final JSIdentifierNode alias = (JSIdentifierNode) _symbol_alias.value;
					
			return new JSImportSpecifierNode(new JSIdentifierNode(i), alias);
			}
			case 440: // ImportSpecifier = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 442: // ImportedBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 443: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 444: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 445: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 446: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 447: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 448: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSFunctionNode d = (JSFunctionNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 449: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 450: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 452: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 453: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 454: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 455: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 263: // opt$StatementList = 
			case 286: // opt$BindingRestElement = 
			case 298: // opt$Initializer = 
			case 309: // opt$Expression = 
			case 343: // opt$CaseClauses = 
			case 367: // opt$Identifier = 
			case 400: // opt$ClassBody = 
			case 412: // opt$ScriptBody = 
			case 416: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 85: // PropertyDefinition = MethodDefinition
			case 86: // PropertyName = LiteralPropertyName
			case 87: // PropertyName = ComputedPropertyName
			case 89: // LiteralPropertyName = StringLiteral
			case 90: // LiteralPropertyName = NumericLiteral
			case 93: // TemplateLiteral = NoSubstitutionTemplate
			case 95: // TemplateSpans = TemplateTail
			case 103: // ArgumentListItem = SingleExpression
			case 104: // ArgumentListItem = SpreadElement
			case 105: // MultiplicativeOperator = STAR
			case 106: // MultiplicativeOperator = FORWARD_SLASH
			case 107: // MultiplicativeOperator = PERCENT
			case 108: // AssignmentOperator = STAR_EQUAL
			case 109: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 110: // AssignmentOperator = PERCENT_EQUAL
			case 111: // AssignmentOperator = PLUS_EQUAL
			case 112: // AssignmentOperator = MINUS_EQUAL
			case 113: // AssignmentOperator = LESS_LESS_EQUAL
			case 114: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 115: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 116: // AssignmentOperator = AMPERSAND_EQUAL
			case 117: // AssignmentOperator = CARET_EQUAL
			case 118: // AssignmentOperator = PIPE_EQUAL
			case 119: // Expression = SingleExpression
			case 121: // Expression_NoLBF = SingleExpression_NoLBF
			case 128: // SingleExpression = YieldExpression
			case 129: // SingleExpression = ArrowFunction
			case 132: // SingleExpression = LeftHandSideExpression
			case 138: // SingleExpression_NoLBF = YieldExpression
			case 139: // SingleExpression_NoLBF = ArrowFunction
			case 142: // SingleExpression_NoLBF = LeftHandSideExpression_NoLBF
			case 143: // PrimaryExpression = PrimaryExpression_NoLBF
			case 144: // PrimaryExpression = ObjectLiteral
			case 147: // PrimaryExpression_NoLBF = Literal
			case 148: // PrimaryExpression_NoLBF = ArrayLiteral
			case 149: // PrimaryExpression_NoLBF = FunctionExpression
			case 150: // PrimaryExpression_NoLBF = ClassExpression
			case 151: // PrimaryExpression_NoLBF = GeneratorExpression
			case 152: // PrimaryExpression_NoLBF = RegularExpressionLiteral
			case 153: // PrimaryExpression_NoLBF = TemplateLiteral
			case 154: // PrimaryExpression_NoLBF = CoverParenthesizedExpressionAndArrowParameterList
			case 155: // MemberExpression = PrimaryExpression
			case 158: // MemberExpression = MemberExpression.l TemplateLiteral
			case 159: // MemberExpression = SuperProperty
			case 162: // MemberExpression_NoLBF = PrimaryExpression_NoLBF
			case 165: // MemberExpression_NoLBF = MemberExpression_NoLBF.l TemplateLiteral
			case 166: // MemberExpression_NoLBF = SuperProperty
			case 171: // NewExpression = MemberExpression
			case 173: // NewExpression_NoLBF = MemberExpression_NoLBF
			case 187: // LeftHandSideExpression = NewExpression
			case 188: // LeftHandSideExpression = CallExpression
			case 189: // LeftHandSideExpression_NoLBF = NewExpression_NoLBF
			case 190: // LeftHandSideExpression_NoLBF = CallExpression_NoLBF
			case 191: // PostUnaryOperator = PLUS_PLUS
			case 192: // PostUnaryOperator = MINUS_MINUS
			case 193: // PreUnaryOperator = PostUnaryOperator
			case 194: // PreUnaryOperator = DELETE
			case 195: // PreUnaryOperator = VOID
			case 196: // PreUnaryOperator = TYPEOF
			case 197: // PreUnaryOperator = PLUS
			case 198: // PreUnaryOperator = MINUS
			case 199: // PreUnaryOperator = TILDE
			case 200: // PreUnaryOperator = EXCLAMATION
			case 201: // BinaryArithmeticOperator = MultiplicativeOperator
			case 202: // BinaryArithmeticOperator = PIPE
			case 203: // BinaryArithmeticOperator = CARET
			case 204: // BinaryArithmeticOperator = AMPERSAND
			case 205: // BinaryArithmeticOperator = PLUS
			case 206: // BinaryArithmeticOperator = MINUS
			case 207: // BinaryArithmeticOperator = LESS_LESS
			case 208: // BinaryArithmeticOperator = GREATER_GREATER
			case 209: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 210: // BinaryBooleanOperator = PIPE_PIPE
			case 211: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 212: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 213: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 214: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 215: // BinaryBooleanOperator = EQUAL_EQUAL
			case 216: // BinaryBooleanOperator = IN
			case 217: // BinaryBooleanOperator = INSTANCEOF
			case 218: // BinaryBooleanOperator = LESS
			case 219: // BinaryBooleanOperator = GREATER
			case 220: // BinaryBooleanOperator = LESS_EQUAL
			case 221: // BinaryBooleanOperator = GREATER_EQUAL
			case 222: // Statement = BlockStatement
			case 223: // Statement = VariableStatement
			case 224: // Statement = EmptyStatement
			case 225: // Statement = ExpressionStatement
			case 226: // Statement = IfStatement
			case 227: // Statement = BreakableStatement
			case 228: // Statement = ContinueStatement
			case 229: // Statement = BreakStatement
			case 230: // Statement = ReturnStatement
			case 231: // Statement = WithStatement
			case 232: // Statement = LabelledStatement
			case 233: // Statement = ThrowStatement
			case 234: // Statement = TryStatement
			case 235: // Statement = DebuggerStatement
			case 237: // Statement_NoIf = BlockStatement
			case 238: // Statement_NoIf = VariableStatement
			case 239: // Statement_NoIf = EmptyStatement
			case 240: // Statement_NoIf = ExpressionStatement
			case 241: // Statement_NoIf = IfStatement_NoIf
			case 242: // Statement_NoIf = BreakableStatement_NoIf
			case 243: // Statement_NoIf = ContinueStatement
			case 244: // Statement_NoIf = BreakStatement
			case 245: // Statement_NoIf = ReturnStatement
			case 246: // Statement_NoIf = WithStatement_NoIf
			case 247: // Statement_NoIf = LabelledStatement_NoIf
			case 248: // Statement_NoIf = ThrowStatement
			case 249: // Statement_NoIf = TryStatement
			case 250: // Statement_NoIf = DebuggerStatement
			case 253: // Declaration = HoistableDeclaration
			case 254: // Declaration = ClassDeclaration
			case 255: // Declaration = LexicalDeclaration
			case 256: // HoistableDeclaration = FunctionDeclaration
			case 257: // HoistableDeclaration = GeneratorDeclaration
			case 258: // BreakableStatement = IterationStatement
			case 259: // BreakableStatement = SwitchStatement
			case 260: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 261: // BreakableStatement_NoIf = SwitchStatement
			case 262: // BlockStatement = Block
			case 264: // opt$StatementList = StatementList
			case 268: // StatementListItem = Statement
			case 269: // StatementListItem = Declaration
			case 271: // LetOrConst = LET
			case 272: // LetOrConst = CONST
			case 275: // LexicalBinding = VariableDeclaration
			case 279: // VariableDeclaration = SingleNameBinding
			case 281: // BindingPattern = ObjectBindingPattern
			case 282: // BindingPattern = ArrayBindingPattern
			case 287: // opt$BindingRestElement = BindingRestElement
			case 295: // BindingProperty = SingleNameBinding
			case 297: // BindingElement = SingleNameBinding
			case 299: // opt$Initializer = Initializer
			case 310: // opt$Expression = Expression
			case 333: // ForBinding = BindingPattern
			case 344: // opt$CaseClauses = CaseClauses
			case 353: // LabelledItem = Statement
			case 354: // LabelledItem = FunctionDeclaration
			case 355: // LabelledItem_NoIf = Statement_NoIf
			case 356: // LabelledItem_NoIf = FunctionDeclaration
			case 364: // CatchParameter = BindingPattern
			case 368: // opt$Identifier = Identifier
			case 370: // StrictFormalParameters = FormalParameters
			case 374: // FormalParameterList = FormalsList.l
			case 378: // FunctionRestParameter = BindingRestElement
			case 379: // FormalParameter = BindingElement
			case 380: // FunctionBody = FunctionStatementList
			case 385: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 386: // ConciseBody = SingleExpression
			case 389: // MethodDefinition = GeneratorMethod
			case 392: // PropertySetParameterList = FormalParameter
			case 396: // GeneratorBody = FunctionBody
			case 401: // opt$ClassBody = ClassBody
			case 406: // ClassBody = ClassElementList
			case 409: // ClassElement = MethodDefinition
			case 411: // ClassElement = EmptyStatement
			case 413: // opt$ScriptBody = ScriptBody
			case 415: // ScriptBody = StatementList
			case 417: // opt$ModuleBody = ModuleBody
			case 419: // ModuleBody = ModuleItemList
			case 422: // ModuleItem = ImportDeclaration
			case 423: // ModuleItem = ExportDeclaration
			case 424: // ModuleItem = StatementListItem
			case 441: // ModuleSpecifier = STRING
			case 456: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 457: // TemplateHead = TEMPLATE_HEAD
			case 458: // TemplateMiddle = TEMPLATE_MIDDLE
			case 459: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 83: // PropertyDefinition = Identifier Initializer
			case 96: // TemplateSpans = TemplateMiddleList TemplateTail
			case 97: // TemplateMiddleList = TemplateMiddle Expression
			case 180: // CallExpression = CallExpression TemplateLiteral
			case 186: // CallExpression_NoLBF = CallExpression_NoLBF TemplateLiteral
			case 345: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 365: // DebuggerStatement = DEBUGGER SEMICOLON
			case 387: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 436: // FromClause = FROM ModuleSpecifier.s
			case 451: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 94: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 98: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 160: // MemberExpression = NEW DOT TARGET
			case 167: // MemberExpression_NoLBF = NEW DOT TARGET
			case 170: // SuperProperty = SUPER DOT IdentifierName
			{
				return _symbols[offset + 3];
			}
			case 169: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			{
				return _symbols[offset + 4];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
