package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
public class JSParser extends Parser implements IParser{
	static public class AltGoals {
		static public final short Script = 111;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGcyJDKV$vqpRxDdz#p2mokIddXUKPQK5Ycj$$PKjkeLoP9aZv1AIIBPboWxbIMHNII" +
		"xh55HIIbItVF$ddFFpBrtjZV3p5W#Sz$dTtzd$MtdTyxvdJjtvX5TTf2LP6$JVVGmFKA7sB" +
		"jq5zr3zzBzz3zwW1vaRr4lwas$qN4QJnDuDLwTNyRJU2rUczUbn#bHUepLPNNe17rFlzCVj" +
		"8vVpJDvLLw5f$Dw$4fUYLVWb$EhU6MU8GJzHpUmCTI4tyll4GQ$b5UaHVGypQ2VwJcMmf9P" +
		"BfQRUj82EaNJw2EQJX$Jf$GPBQObj9Gwqylq3Vt0AjEBr8FIwKV0LLIVCganDQ3hA8Djfsl" +
		"eIhesDjeOKztQK9eupkyEe4tN0DfK4pEfExkMDsMCkj5CTYExAO0smzmqUHQ$XWrdxmIakP" +
		"xAK5xAHNae7#Md0dG95QH2L9YAK54gHiMf1ANILjh6Qx3RfSmibJMcqkmnAicQi9OYZKfHR" +
		"YhFxsCLU7DQIsle1PR0YhCIh3c$dHLXrMarIqMhDFO#LO3CLJbZWwWZTUBNiSB6DEPIbZMY" +
		"82#dPLI3jMFjxVAYJCgRnlAo2f1gBRkE3JBbfNHs1#Gz0lrIsH5ER0JxZJTcovNiA$ap$5b" +
		"McArcBdQIhIR3c4ntqqCUVyaJp5$Or$G9pQ5Vw7CwHh$wynSgopvXSzaK#ffToXRJTjfD#r" +
		"W6QyWosPtiVfRDMYZy7F0DR4SO$jA1AlCEj87Du1ruVJfehAHqNf$tmVrnjfw$msvYstbDp" +
		"8XAx5ReFuQ$OSoIc5oiIiWyGXmFrbZEN$uwHi4QZzdyUJaUl3iaUYnqYz8NPsvHFf7VGFEC" +
		"LVGbVuG$AWvRNDdLhBiNrwVvGwmwos9Vq5UqWZWV2bkbymVv0xJAw69CY8qF6ByOcrW3ji9" +
		"OQwnXtz6oC7sW2zl4JlDyh3elnb#JyhErqA4FVn4#S5HyopkpxSP7iT64Dj9EsiKEygTe3o" +
		"tZ7PKcmJWN2cVKUJOqcH8ZJPwdowaLFKTxwGWVJKUb9lm3#fjTmlA5CJQpI31YYMm8LQSdw" +
		"2bwblgmOcgkRu$H#Z96r6AbMHbMbfLd5LcDo8u8cnShFSG#KSiz9gmckrBgmQx2hAc74HaL" +
		"neXiOjUoQz2lFhlU6XFQ63Czzc0y6h6ch1cxXJt07ehmU2o9cHxRREFnC7jKwI5tqhOq9Op" +
		"HEC0wgLuliI7i5TiScHapFJQAMg8uwmF#0zbWo17HyQ3zCPldnQ37H341Uenbuzc42FjLnP" +
		"YDnzSslvfaB5BpV1hxY7rCFuNXLuVXGVFO0lOf#vmjiVdLbp4RZsMOvslPLsmLxclODv4T3" +
		"#6AcHwlic$P5jwStOuukXKYPwb7PUiinVvbztZnVe8ruWtOQwmrssPyImtf9cfAzUXckerk" +
		"jtYpczbjL57y13sQKmkwdhAe4Tr1pQWErQ8RwHQgIuXOnIVcMOgTefh6DrIRhZOsqftKaXq" +
		"CtHVOhxmERswiboS5vrcA$y$dP7Y5ZpRVuwHmcCgn7zXFxEU0sYpajyZp6gAlWDgmgkwJ8V" +
		"k3lusMq2RqSoxxazAuYsRpMtcIs2vruJMSsY3YDRM9U6JFKx16LsR70LPatzROeavQUr1QW" +
		"LwH9qD#4#kACs0bx6wJnL54WgjjiNThtzXR$C0cniQBUKsnbTKJcwKDnIRZYyZFniXRNMmG" +
		"wtb3VYDlPhDw0twpjBgn6wVh2iOkPVKMl2M$YzADYMooCGcHjytg$0a$9vudsTOeIFiDRyD" +
		"R6syPGonfUMFUJft#dZFUWxGZfBJ6SECTusrZ6E$79lENZFVjqehZlj8Q8zcFCVAHftX$Fe" +
		"0FvE#o6lozQApOKPYPuqXVDgkNu4$hPo1LCJE9aYFFrnZ5Yn1XnR7nLM98lb8QoLS#AxAkb" +
		"VBP44RRTh7#oe89b4I9aPUHQh1#thO986DDDbALb9Dx2wsEmhEHzuZu5Q79ecMk5IrP97K#" +
		"Fg0iDJsoIFwcB8yeP9kfAFFQ9ybv1TWdLLr5y1yRPDSdzWpTW7PDD2svJxgli7Pz9RllhZ$" +
		"1t2U3QyDbvtBALgC2xlgVcThW2gRDyz7K1eKXQ4ENvZmsx7VqV2edRN15G1lMvgoqyLpioO" +
		"3QdF0qYhesDe7EIfl0OyCJBofjai$Gqtor#2V0McXwXtpEreQrE7jFu$NPcm4zxN7U27t7d" +
		"BqsB7ymRJpNwS1Z4vtTGblJYa8Ba6VdYjbJ$OSzO$48VpGsFCytBkpoipZ7nyGpLDOHqx3h" +
		"pZShdlzSpjbORJXdd7#vcCOlpYNE9OPSv1Lc5ERL8aZSmby88GeB54jM8jyhnoWigjfqEGj" +
		"jQfztshmVGamvEgIOyfnhmpxWOyvYRAQ7gasiTZXskzpXM2gAKtAs86#GamNvzUosdFo1GZ" +
		"an1RBWhFFDWkI94KAnO2Hyy2mjk3HK2yPS6$darVayWDG#z2eDKFkG$GpiymG#Hss8tgA9D" +
		"0puQMgdsjMWIJIP#b8$way3wJKQJ4FeTHfARz2Rz3QzGyFfNMf38#Wz6adlqoWQJH$G6FgG" +
		"nj8u6gIaTRzzuqzQFqypsBqvh7BMcnvsQIa2qfeNP6PvtSmOIjbzNZBByX5XUDCw3pKZqZB" +
		"p0cwPWzevT5d$zcTddYUYTZPzs7cTaRGyhpSPNZ3YNX4vQOlwI5ioAj8wFC6OVMRIqW5$dX" +
		"1jQSbxVV1tMP#9lkLdZOkkj17n17lyoNgB4ZePMzk6xhVtdmUUu2jjbHoZuVD9siikA6cVl" +
		"A2aRNr1ITlsWfAs$GKbxJCNbBJP5vIqKoyeQUTVKD8klA2aFOTxMRXFB5XwZayiF54Tkon4" +
		"$VyCupbSnC#eh5hOJsqsv$XEKxWKjqIQ8akBECMf4QSu9qTVYkGxXiVyUDx90EU9I7xFWS9" +
		"$kv4jYhYj$ueunNyYJb54cYBF#Ut3S2dcZpZ5GX6dM3pY54l5VZM9u0pqK3Asa$SpvPU88Z" +
		"hNDvgRajZhjMjDuNV4HYD#fvsjsAdGt4X#RolKP#8YagkextFjfA1HGoGrfg0U9A#$8lXDN" +
		"lEph1muiY4Hv#Zt4gxOU6r4#P0r3wEgZwzF5lJlas9BDAmOfnId5ASKf#IV4lrx$iaKfnId" +
		"5ASKftIHK99FEcjwGalpEu7k9vsXluSJBDAVY4Ys6ptDnuRnfDE7CyyTvFjCrjFQBkeklms" +
		"aTM2TPGd$aBrenSyyWPVsezj$WSvYRBxKmNQ5eeEl1fS4FklnmdxQfmPe7$hd6huqcuJSyi" +
		"sSHjhlkVbiQktdnSt1UWUlpU4TDp8sstwreBUtjwAMc7ud1xNojoZkPdVvxojAU3srw6ZNW" +
		"VNsyztyDje31w6sfR#pdVxjFSZ5Yl1it5DztvhaWr5M6E0oXOhUc42EOEyo1gdZhsg5h3RV" +
		"1HaN#rCM4iTydXLOlo5mX0yFNGfclLtb7iaTsixTr3WCS$J#BWpAtMmZtPANzVDqmnp9Bd8" +
		"arQyOfffyMMVniqhjL$TzZBENcOkFO0VOBZQ8bqVPRbMZddhPLZGfRpcaEojgGzb#zhhixz" +
		"PCzaUJvU2mM$PZErbVTpz5exFYFaxoPM#YdxiS$NWPTeN9bpqElZRDVCQSM4VsWbipIp8t1" +
		"rCpfVK#TvtIh3EJCsktuhxJoPszmGxPj0xXxLdsx9dwvPdMiQ6QTKsF9rbhGyqphBDveawt" +
		"T6ALTjkx9IjbOh9TxZBsFrrd#zJMB0F#q3bUh8CrNho3vOcUtsNQo$Puw5YVshfhkzbuU59" +
		"sBJnQsJ$njQVDoohnbu87yv6yj#LVVBZou2wy1$pBB9MMxC8wyskLLZsfBEfxwHs$1#l9U$" +
		"9Uh9SPq$2sWBuUwUHlVzYbxO7QLjpov07SMn$lDxSbZo7kLcoxf#nbttP#UWPfnLy9YK9NZ" +
		"JiH8qukIg14Ig9aIg5Sb9loKDuWdqoKf59Kcih0NkMeF5MWIwaYLQBAb4PL44bLetIw3EDQ" +
		"7N7E5V3RAwaMNKNc##Lrg2uzJS#GV3VyMih6o3zF7QWZlK2Tw4NgJ5seAwAnbwWxlKmzw1N" +
		"ggUAmFhI1ClJVPihKVmzYjicv9jzvVnnUz0GzYR6FjJRrA8k#3LERlkZzgv8wKqcvWtO6q2" +
		"OScZAQb56tZ2W7EMBAjsYO9wwiJxELpFCSxm2a8TAVYFi6cWAUCchRZ7ZkOyJ#QsWMUcJJN" +
		"FJ8HC$FjCpPYEKEqM7OT1ciiLnPTcKKv1sFEBA#YfVjyYvGyafffa1gAUzIBMycf9rDgo7j" +
		"FDo$f7Mq0ZRTf6JVH7jeB#JT3datuhvIJhsO#8laKXjS9Cu43jTVfg9r6hnVtjEe7MYamLy" +
		"ouIzPodjQqGZa5e579hmoM#Ddep0UezNybQDWZKS68div7al0TKgCBFeTVGCExS3Z01s45I" +
		"okQNwude0bZa3E0e3JZDJwOP2Wsep5p0TgA$wrrLycF3XS7yXMwv#yf#drBnC#K1i#y33qp" +
		"uGFn4gJ9EM72wYjUjkmWD8aSfphn50Jj$NJr9p9K9famgjQKvkmnkONz9PZOBrXDLLfq2f6" +
		"UjG1$oJjNqduY#o89CLCZop8xxPwXlQisi3zmXwHnx0#o7wrRMCIMpsaJnNGut8nZ8VKHUf" +
		"H3tzJCHxXZ4QMxfNfU0injdf8$v7yCo57PCSZBMPwJ5NhJ9QAmJ8YllAU6x#ghVsgAZYcXU" +
		"bNIQgFZ8oIR7vL86Pw$0RP7wIVr7rrnDVTsFdLPygRiX4vBqMxUKgFgJRUBX$UCW9TGzjKp" +
		"9aHaFSksWsgMT0ZCEzCprdgQXNTIDuPQkmNXEKBurLlUL9mdgNQ#9mCn$beauIJGWPE2WNK" +
		"$0gapNnmaAEGcODdczh822app2WlGwsIRQ1B6YX9NUfxQTCkQYT3atSQm8hifw9KHlRPI4t" +
		"1ELUUj7x7cCkpHZPEXbdgP6XPTf4V7ysYhsBanIF0gv$QQwRY7kbTLyx6o5izItcCNCqjgy" +
		"kuHLfTpiafk4khrrRUdOd8MFuIGrk7rTVwqImDLe#6jENfUxNYMj8#gfyUj2Vvs$vjbRHjz" +
		"TzQIDlUIzhsVgHj6pCVQOlQjIesIr9m8VX8Uw4lczLTy0Np6KWMJK7Dj2ZmRKjNWt8xEryb" +
		"1VWgRFBzI7WkZBQqu5nXko2djE0$z2$z5vNdMMsyRUDVHXdzQHabxxbHa0MIqBZGPF7OAqg" +
		"oAEe1PG4$BOlavvP5tMqp5JclsI0SLw3PeEgo9V$0yn2rjPLtrTMqC0yzTCFQzLKFtrr$l$" +
		"UkxqyR#XAmGb7uE$2kxnwlSwSDoaBK9gUn2KqRr9vpRMowh0gcZMuJTMriyfoLDi77vkBIv" +
		"amyBNGjT1yfwNXAE7jFm#uTsDEsK6sqg1DjRJoo$15aRAAoMsY#LeInthvpnUgflaSE#LG$" +
		"Tf$DN2nSOk8PAkSLqrnKLhpOnohk9N4kSIuN51SrYyACmhnQX7LwERDOqiChnoWihaqijF7" +
		"LvTngG#jZD3Onsk5ejde6DyyP8GUo8At9oOBoyvAS$E5ipXZddmNzdp6YwOCnis2CjP7xaF" +
		"Dv07BsVIZ86PWAvAIDv28$rGAkHrcgNNtrEx$NKqDgH8sf2Tr0JUb6kecQqSrq2zrAjr5pk" +
		"frQq1tg3Tgxw6xrFlHz#erekMjgc$kJDfod6Px#da#0xTBgkhEILjEGCd$cuROKqCOfiofV" +
		"ToRUH1cHbfbS7fc3sFcCP8sQdKqVzlBzivGsYXQ#uAHrUe9Nd7hUUKBmzS7VbSDRe1UOtyf" +
		"ttdGgfhQzi3pXJABXkBHnQUFIngMDInkNDYxjHI9jvD$dyKHrD3fI#jklI9zHwNWKR12d61" +
		"cAaVsy87Jv8lXs8pmi6cytnYd6ALxS52CtzssKXDSpPVN4A99plOxUbRAyTgtMb14ZZLex#" +
		"BgVEaTo9GtrcNXM1Bc6#tvR13LsUeYtlHMtEf7y9g#Yc1F7p4Xp311jnSfh8yZ7794Ow1Fw" +
		"cXV9cH2d5ASKfnId5ASKfnId5ASKftIkAAbVzF94bkexWPx#eSU6mQ9Y#SsPRAgdlvCOsfF" +
		"Ei3w7jZsjjRvtvjPXkYhPJpDjyRDy1osCinZDTqRY8UaGrbcFVWn3utFRCkYv#Mng7UV5Z6" +
		"2zWzS6FyzxdPvQ#tsMulwERcktDVptfJP1TMZjHyhocav$r8xpUxOpVyjEoZLRpHpvXgc$x" +
		"$4k0onN#PNH6nD86UHTng1rfxG#GT$ByMZjV1wJvVFzLekA$8sEqALmh6pAhzDqtln#uZKE" +
		"lcdXK7RygaYsdwSRvaYELoCfLwHv9b#QhfzdgHM9vj0o#eoMKnrQI9$IKleSPOjLpHVE5Ss" +
		"TGtz9BPjcqZRLtwqP#YF$EMeMovRq1VtWxgVwJbVSVvPyQHNDyPHBlXlTV6aB#jaqytrk0$" +
		"uUpIp9t1nCpPISSpnIImxJJGwA#nTUtBVQjGxbxLawTiP#UQPrxZKXssDlpzfmfdLsJzJfS" +
		"KviMbNRUvmR2zlbNMV$rDOiitkYtXktsZt2vedkFK2EYJjj$RQIkoJRuc5BPGl7fUZQF$6r" +
		"fNKBYxAVbFBW0hJ4yY$C##cgL7g#AbMM70$xB5HQpQGgIelfsjuprMz#pj4npVVsvsdETwM" +
		"H$nhm9$rbvRrNPpegV2vws3DUhJnbItpR#UaPf1Nj2uc2RaKdYVWayuT$cVnjuAkGFmHS3$" +
		"0UoYeGkPh9#cW0U3s6srupdL9Uor7HgYzpZAZu#qIN5YTAJWQ#1la$hFh2uw8bsxa6wFeeK" +
		"ObcmFs0FmIUHbHa3$16eYeF0Vz9bFOlKSMIg3zbzgdO0FQRvgQ10LwhorkXl0PHQdEYSf#O" +
		"PLJEn0cpJPmwyLph7DmU5GT0nlzyovdyLUY5g9y17td4B2l$9dphNbrV67MRYKgszEhtXpD" +
		"V$Y$qkO#eQYfm8y1Jy7tGv3UPzRmte0zHqWRTVuQ9NPB#AKc0A7yXiop$BKxQrLfg6d$g$6" +
		"EwxmCcJkocQSwo#fIJyx22hjyBkRgXVOlGR5KUFb8I$bAf355kEOVB8jtGh2l5vSmtqzGNT" +
		"S#OwUIyLdzN6xI7$gNkywNjQW#uLDFIlbHf455fpC$a3bOxUiAtRvujw0iVTiq4R8Fl5GAs" +
		"wUmw05gem$cIylVGSe5V$bbEEXMkGDk3i4bLq2W1g0$e12YbvTaAMpTqzabeYDlzmBbq$Y6" +
		"DTmBgwNG$Pvzgep4cb#Yw3v26R0bThNesroRxD1FdlSP9ez8$H4Lhwxfnw3#LA5SjuEuOrq" +
		"I0b7sVML$a3$ZN0JDTlhlckqVZlLwsJDOoQ3lbUSPBNwpjLG$QydzhV5hZ$x2MFW6ymMgJc" +
		"8SeFO#PpdLIbrqBEdM0yzlQDN3oeYMsz9FeEu4eNswq6mM03Il0Dt9Ve$jYBNCTDTEb#viu" +
		"ttCeXszKRGey6R01C1QsqB8avIKg09z8AWt06bUvlFpl0aYNr$Ntegm9odv1kxjq6UPocLd" +
		"0sCkI9W6o8CTrm5W72xogspo8Vl8N#gz7#dvT9kT#BpFDUo3$j2w$mSILvN#$68$zwaepNs" +
		"44nWfZc0J$g7etyDS0hCr9IO2ZJZibGRvah1Uy9zfEGRgOMPvSosgJ$1BgC2x9jmDUH1$8b" +
		"to7hVvMsBUHJh#0jhy3xuSyM0UJiLTKw0YCzUyIxNF91I3p7Fc$Y53MMkkm0pu9FIuPQHkt" +
		"tMWxM8yzK3B6i0B68XbhoILwpIlw4$eQe8MnASZCihIAHCLWru8PkkzsbDs8Dh1HmQTqcwV" +
		"HPZZoxvdvQhelmzWahmNiGbb10EoIZ7bThHpqndgS33loAl1H#6Kv#4V2ix0rrkVozw3k3S" +
		"oNnfRy2LZZKow3pBjbJ8DqTG3efc2jIAa9Vv8#B9366fw2TI#bhjKttyF83xBoQR1ViL$DT" +
		"ChdaETAODWhvLDTXZ5FGLnIfPBEZxRwfcFFJldGFkwQvdoKZzBjiVQbx93$Sy6tNLL9Enkm" +
		"GhV5F4x1kf1o0l2FjZ7M4HVibV8PO15W0VZ2brEMclK5roFz1UXZhKbPHbGe0$XBJMyvshQ" +
		"p#AMiqtWbOBkPlWpp8LS#m1rcdiz6sh5$wd5iOjCFTY$UHDkW2sWjqMrWjrnOczFx0tU6B2" +
		"FDSbTp4nVc5erSyFiYdlZ5AcSlw$gwpl92fxtRHWhWVqkjT1wztx6gLbdntw03R4JQxqiqb" +
		"NkQhV$MQCbshW6wZZRtmnAOducOlwctODpM0SClYw99wcdC7yonaYs0Tvjz6DgGP$mGWlGn" +
		"o$bj9Yu#46NhdNoIhzTr#y#rpi7jKHBhP8cw$kiOrWDNQLjROQLBO6wKmfvHud1m#lIkYQl" +
		"LiCfoTVHjLtYaRvdha8bBTzBu0sSzd#gLd#7C9tpaIpDnkvKkDLt6mC7aT$OjZNKv5J556U" +
		"nhgSFCihnwtKazYfkEoxWjjZBt2ojV7ljBIKTyPvOJ$2zV0pDTSeI9As0jBucvMjKs1Yxcs" +
		"pSztPdFzPLlcu9wxIgzogR$2IyPncgPcrbbkMsnTI5kRw$bmTnX0u7r$kZwqSJvEtctjVea" +
		"o6SGFrhvf3kzvB2jpJHNwvZXR9Cs1l8trNLrDPvcrUUsnHrv5rlfF0CqJtsEISXsqgtc5Ok" +
		"cf$dAdxR2IYVhSr32Qxf$BlIPvzidCT6PJyAQcxxOkvspJSBNDZlC0utBqQUXLLPajwt#0O" +
		"nF6pDTQhIMNSTzrMpnRx9d$pJpfOzRwK8RVMKe$9o9ovIqwV#Tra77zxbtw3QJRBBfysIYF" +
		"ciIOhZ41JeztcgNkCl4HJDDNE0M4tEN$FzIMlvkLliKd$5mofj#P#2wQWDiTBhxrXUmrPC#" +
		"4#MvJcFzhAdCHgjDqTTrcJwVLCblnWzbBxNQ93y4A6kcy#RN#0KJbxrPoupuikXXNTPHqq9" +
		"SdeupIDbH5grYr#esN#asM7$J9o9$JEldZfjn1avkfTE8TvC$qkcFBLhbIfYOwpYtIZlG7u" +
		"OscC#v4tnjKxoXZDNDT6x4RibBlTluzYdaTOQeyefpZYQdcJYbiRDTqjk#j59Q#UTHV8HlM" +
		"RuslcNfM4jJYjdePNYtCSlD$ShAiyTjDBpqIJUysZxfZwPLN$LgyBNHIvdXlnthOgMhl0q#" +
		"#bc5F9inVNREvJxhvZDnxe5E6cd3dFdSpPnvUSvmNk8AKLrSBfg9cyIDegcuGJGHZKKZqL1" +
		"SBwuJ3KHzSQsuHjGJcQAkk4grnwbML11fefoeZDHOJQMVw26w0dSMnyLlufZuLVmYVXP7nH" +
		"7na$XH$20EYqFYUt5G713xnJwnL#mHtudTOfVOANQ8xMARs2gsY6$5Pl6Ds2GsYg$51h5U$" +
		"2V#5V#8q#9lSKgS57#9FyK9yOVuNNmfbedb0YTDWTEawAWbw030AKGyApvK#J42yPv0t2VU" +
		"5uZanKZ0Uu1tnN3HHhGM3uk7n8FY0V4$SR#uJzmhxX5tYxj4It6dk4Eq4BUBvk8sSQkuHTm" +
		"itXHlYA7YTJ5431Q3n6jYe1WWNZMw6o#9jyKmyHPelYFwYZwYj#WbUcffrF#j4o#9RhXt4i" +
		"#BvyGpucdHNhGJRPtsDxQgbbSAdFP5YcTKS1ONoQAsm3d8mFWRE4iPE5CPE3iRnm6$YIMgt" +
		"JhTVhLuIZmfdX2jnEFYCV6eUCJutC1yDJvLF5ORNw7DBDNoOy1qyP5AJnEhn4hnbLWX5YFt" +
		"kLWeS2uJE3k96G8dCJ5EJ16JZUNYNvkyNueQdlGnWNEoSSZutZZefPNwhu760V65MAfI#us" +
		"zk7#dkE9iQ#mKTSJLgcQXxZ7Vc8lx9mRaCsQWrIGnKKnGxSTxqLwcId5o5bNXXvM0AueoeZ" +
		"HmAK19GAeeBFAhLlb4NhJ1QLpabZe25nC55CQEBOhgiYAYe5WaveevuXBa2WcSu35Q9s2Nh" +
		"vHbFbFtJyLyCSzBbgNEl4Zqf1B8wnBCq#jNunVSZwhq4UDduqTLNylumRkFiKIaYsgs$DU0" +
		"TSO6Hvl5na#gzs71lJXQRVxJ#BGeRvmq$X9bRVs5d1ygPMZyZwTEZxpnD#2KxAafAvd4apu" +
		"wTXVO2SKpAjrAtPzGzvLY5IXCDsOgQlECEGhly$3Pe$4sm0gnLlLP8qOONGqvWqQv7$yQuu" +
		"snneV669txmDD$j5CEOx0ZzwQw3pLUDmORRwZqkxfcaBg$PWmq1XYl8jNVwATA#ih$psqii" +
		"D7e0#WDw6NqD32xZHx6AmQYTzQFCM9CVfOgFoCF1yQTXz23N00EI00aKI#KsK7#5yqNDBm8" +
		"w0nu6O2r1i2eD$gRa4ZhGCU410LBaLwADkk1#m0m1m0CwGJrLiTAz5i6l4pZ6He#ji4dg5k" +
		"ElbC1poF$FFA7W0yXVrY1YqO0Zm3#5UM$0dyB$2tAHW6xuVqmeAy25tK1zeK40DVOfO7RmE" +
		"MLbf1ew#ykywNTGKFN7E2z461acF3gMS10m4GRVAXXi8O10Bd$o5z9xGVTfy4sqv2Uek43b" +
		"8q1bh05wIt0Yz1#4V0gj9NG7#Kh533w4da9uv6MC0dfIQYRX371UWbWD1dfoIYR39y#1YpV" +
		"gFW1#0VWRMY$5NWhyZE1Po8$7J07y1fW42K34cauy73W#Q0v7#s6Kov0Ra2AhdDZA$qZ#cz" +
		"4Mmb3a1u27gy3lmuy57Wey1kW#IvW4#XkGhlVKFORyjkHteusgo7xJoXx4t0SPHBUGdgO1n" +
		"Be2Df$WxQ$eqx2sqYFXWno1Lk0$4j8$mpykG9IxvsOuAB52XXz2bW8c0MG$nsX9ygx0KluG" +
		"u6BPWFFXbwpGUyeqlE0ny8EtG7oFvkyee03N3I1NDZoNBG3ykrGM0AddO1TQBTR0QSrm6iq" +
		"bllKVy3$0Fu5o2rClWzr6c00Jg3T2U3lR700z0#0zfz8M#1Iy1VIUu3tejzUXHDeBT8daJw" +
		"9kdt0#u2$1om174Iz2Iu0r#3Ia4Yda3#5z2cq#HluR$JP3xmVk2FWES06m6R0E$y7Exw08W" +
		"==");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN.l Expression.e RPAREN.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSGroupNode(l, e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			e.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e, new JSNullNode());
			}
			n.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e, n);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 88: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 92: // CoverInitializedName = Identifier.i Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 93: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 100: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 101: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 102: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 103: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 121: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSCommaNode l = (JSCommaNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 127: // SingleExpression = SingleExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSCommaNode r = (JSCommaNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 132: // SingleExpression = NEW SingleExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			// FIXME The second argument should be the Arguments node here
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 133: // SingleExpression = SingleExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 135: // SingleExpression = SingleExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 136: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 137: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 138: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 139: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 140: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 143: // SingleExpression = SingleExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 144: // SingleExpression = SingleExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 145: // SingleExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 146: // SingleExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 195: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 196: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 207: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 208: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 209: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 212: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 215: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 216: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 219: // LexicalBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSDeclarationNode(new JSIdentifierNode(i), null, new JSEmptyNode(i));
			} else {
				return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			}
			case 221: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 222: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 223: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 224: // VariableDeclaration = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSDeclarationNode(new JSIdentifierNode(i), null, new JSEmptyNode(i));
			} else {
				return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			}
			case 228: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 229: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 230: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 233: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol n = _symbols[offset + 3];
					final Symbol r = _symbols[offset + 4];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, e);
			}
			case 234: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 235: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol z = _symbols[offset + 5];
					final Symbol r = _symbols[offset + 6];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, n);
			}
			case 236: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 237: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 238: // BindingElementList = BindingElementList COMMA BindingElisionElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 239: // BindingElementList = BindingElisionElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 245: // SingleNameBinding = Identifier.i Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 248: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 249: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 250: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 251: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 254: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSCommaNode e1 = (JSCommaNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSCommaNode e2 = (JSCommaNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSCommaNode e3 = (JSCommaNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 255: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSCommaNode e1 = (JSCommaNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSCommaNode e2 = (JSCommaNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 256: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSCommaNode e1 = (JSCommaNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSCommaNode e2 = (JSCommaNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 257: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSCommaNode o = (JSCommaNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 258: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSCommaNode o = (JSCommaNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 259: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSCommaNode o = (JSCommaNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 260: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 261: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 262: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 266: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 267: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 268: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 269: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 270: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 271: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 272: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 273: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 277: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 278: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 279: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 280: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 281: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 282: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 285: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSCommaNode e = (JSCommaNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 286: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 287: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 288: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 289: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 290: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 294: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final JSNode[] body = _list_body == null ? new JSNode[0] : (JSNode[]) _list_body.toArray(new JSNode[_list_body.size()]);
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 297: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final JSNode[] body = _list_body == null ? new JSNode[0] : (JSNode[]) _list_body.toArray(new JSNode[_list_body.size()]);
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 299: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 300: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 301: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol p = _symbols[offset + 1];
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 303: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol p = _symbols[offset + 3];
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 304: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 305: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 316: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final JSNode[] body = _list_body == null ? new JSNode[0] : (JSNode[]) _list_body.toArray(new JSNode[_list_body.size()]);
					
			return new JSNameValuePairNode(n, body);
			}
			case 317: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final ArrayList _list_body = (ArrayList) _symbol_body.value;
					final JSNode[] body = _list_body == null ? new JSNode[0] : (JSNode[]) _list_body.toArray(new JSNode[_list_body.size()]);
					
			JSIdentifierNode ident = new JSIdentifierNode(p);
			JSParametersNode params = new JSParametersNode(ident);
			params.setLocation(ident.getStartingOffset(), ident.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 334: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 335: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 341: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 345: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 347: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 348: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 365: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 366: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 382: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 383: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 205: // opt$StatementList = 
			case 217: // opt$Initializer = 
			case 231: // opt$BindingRestElement = 
			case 252: // opt$Expression = 
			case 274: // opt$CaseClauses = 
			case 295: // opt$Identifier = 
			case 339: // opt$ScriptBody = 
			case 343: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 83: // PropertyDefinition = CoverInitializedName
			case 85: // PropertyDefinition = MethodDefinition
			case 86: // PropertyName = LiteralPropertyName
			case 87: // PropertyName = ComputedPropertyName
			case 89: // LiteralPropertyName = StringLiteral
			case 90: // LiteralPropertyName = NumericLiteral
			case 94: // TemplateLiteral = NoSubstitutionTemplate
			case 96: // TemplateSpans = TemplateTail
			case 104: // ArgumentListItem = SingleExpression
			case 106: // MultiplicativeOperator = STAR
			case 107: // MultiplicativeOperator = FORWARD_SLASH
			case 108: // MultiplicativeOperator = PERCENT
			case 109: // AssignmentOperator = STAR_EQUAL
			case 110: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 111: // AssignmentOperator = PERCENT_EQUAL
			case 112: // AssignmentOperator = PLUS_EQUAL
			case 113: // AssignmentOperator = MINUS_EQUAL
			case 114: // AssignmentOperator = LESS_LESS_EQUAL
			case 115: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 116: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 117: // AssignmentOperator = AMPERSAND_EQUAL
			case 118: // AssignmentOperator = CARET_EQUAL
			case 119: // AssignmentOperator = PIPE_EQUAL
			case 120: // Expression = SingleExpression
			case 122: // SingleExpression = FunctionExpression
			case 123: // SingleExpression = GeneratorExpression
			case 124: // SingleExpression = RegularExpressionLiteral
			case 125: // SingleExpression = TemplateLiteral
			case 126: // SingleExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 128: // SingleExpression = SingleExpression.l TemplateLiteral
			case 141: // SingleExpression = YieldExpression
			case 142: // SingleExpression = ArrowFunction
			case 147: // SingleExpression = Literal
			case 148: // SingleExpression = ArrayLiteral
			case 149: // SingleExpression = ObjectLiteral
			case 150: // PostUnaryOperator = PLUS_PLUS
			case 151: // PostUnaryOperator = MINUS_MINUS
			case 152: // PreUnaryOperator = PostUnaryOperator
			case 153: // PreUnaryOperator = DELETE
			case 154: // PreUnaryOperator = VOID
			case 155: // PreUnaryOperator = TYPEOF
			case 156: // PreUnaryOperator = PLUS
			case 157: // PreUnaryOperator = MINUS
			case 158: // PreUnaryOperator = TILDE
			case 159: // PreUnaryOperator = EXCLAMATION
			case 160: // BinaryArithmeticOperator = MultiplicativeOperator
			case 161: // BinaryArithmeticOperator = PIPE
			case 162: // BinaryArithmeticOperator = CARET
			case 163: // BinaryArithmeticOperator = AMPERSAND
			case 164: // BinaryArithmeticOperator = PLUS
			case 165: // BinaryArithmeticOperator = MINUS
			case 166: // BinaryArithmeticOperator = LESS_LESS
			case 167: // BinaryArithmeticOperator = GREATER_GREATER
			case 168: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 169: // BinaryBooleanOperator = PIPE_PIPE
			case 170: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 171: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 172: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 173: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 174: // BinaryBooleanOperator = EQUAL_EQUAL
			case 175: // BinaryBooleanOperator = IN
			case 176: // BinaryBooleanOperator = INSTANCEOF
			case 177: // BinaryBooleanOperator = LESS
			case 178: // BinaryBooleanOperator = GREATER
			case 179: // BinaryBooleanOperator = LESS_EQUAL
			case 180: // BinaryBooleanOperator = GREATER_EQUAL
			case 181: // Statement = BlockStatement
			case 182: // Statement = VariableStatement
			case 183: // Statement = EmptyStatement
			case 184: // Statement = ExpressionStatement
			case 185: // Statement = IfStatement
			case 186: // Statement = BreakableStatement
			case 187: // Statement = ContinueStatement
			case 188: // Statement = BreakStatement
			case 189: // Statement = ReturnStatement
			case 190: // Statement = WithStatement
			case 191: // Statement = LabelledStatement
			case 192: // Statement = ThrowStatement
			case 193: // Statement = TryStatement
			case 194: // Statement = DebuggerStatement
			case 197: // Declaration = HoistableDeclaration
			case 198: // Declaration = ClassDeclaration
			case 199: // Declaration = LexicalDeclaration
			case 200: // HoistableDeclaration = FunctionDeclaration
			case 201: // HoistableDeclaration = GeneratorDeclaration
			case 202: // BreakableStatement = IterationStatement
			case 203: // BreakableStatement = SwitchStatement
			case 204: // BlockStatement = Block
			case 206: // opt$StatementList = StatementList
			case 210: // StatementListItem = Statement
			case 211: // StatementListItem = Declaration
			case 213: // LetOrConst = LET
			case 214: // LetOrConst = CONST
			case 218: // opt$Initializer = Initializer
			case 226: // BindingPattern = ObjectBindingPattern
			case 227: // BindingPattern = ArrayBindingPattern
			case 232: // opt$BindingRestElement = BindingRestElement
			case 241: // BindingProperty = SingleNameBinding
			case 243: // BindingElement = SingleNameBinding
			case 253: // opt$Expression = Expression
			case 264: // ForBinding = Identifier
			case 265: // ForBinding = BindingPattern
			case 275: // opt$CaseClauses = CaseClauses
			case 283: // LabelledItem = Statement
			case 284: // LabelledItem = FunctionDeclaration
			case 291: // CatchParameter = Identifier
			case 292: // CatchParameter = BindingPattern
			case 296: // opt$Identifier = Identifier
			case 298: // StrictFormalParameters = FormalParameters
			case 302: // FormalParameterList = FormalsList.l
			case 306: // FunctionRestParameter = BindingRestElement
			case 307: // FormalParameter = BindingElement
			case 308: // FunctionBody = FunctionStatementList
			case 309: // FunctionStatementList = opt$StatementList
			case 311: // ArrowParameters = Identifier
			case 312: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 313: // ConciseBody = SingleExpression
			case 315: // MethodDefinition = GeneratorMethod
			case 318: // PropertySetParameterList = FormalParameter
			case 322: // GeneratorBody = FunctionBody
			case 323: // YieldExpression = YIELD
			case 333: // ClassBody = ClassElementList
			case 336: // ClassElement = MethodDefinition
			case 338: // ClassElement = SEMICOLON
			case 340: // opt$ScriptBody = ScriptBody
			case 342: // ScriptBody = StatementList
			case 344: // opt$ModuleBody = ModuleBody
			case 346: // ModuleBody = ModuleItemList
			case 349: // ModuleItem = ImportDeclaration
			case 350: // ModuleItem = ExportDeclaration
			case 351: // ModuleItem = StatementListItem
			case 354: // ImportClause = ImportedDefaultBinding
			case 355: // ImportClause = NameSpaceImport
			case 356: // ImportClause = NamedImports
			case 359: // ImportedDefaultBinding = ImportedBinding
			case 368: // ImportSpecifier = ImportedBinding
			case 369: // ModuleSpecifier = STRING
			case 370: // ImportedBinding = Identifier
			case 385: // ExportSpecifier = IdentifierName
			case 386: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 387: // TemplateHead = TEMPLATE_HEAD
			case 388: // TemplateMiddle = TEMPLATE_MIDDLE
			case 389: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			case 76: // SpreadElement = DOT_DOT_DOT SingleExpression
			case 97: // TemplateSpans = TemplateMiddleList TemplateTail
			case 98: // TemplateMiddleList = TemplateMiddle Expression
			case 105: // ArgumentListItem = DOT_DOT_DOT SingleExpression
			case 134: // SingleExpression = SUPER Arguments
			case 220: // LexicalBinding = BindingPattern Initializer
			case 225: // VariableDeclaration = BindingPattern Initializer
			case 240: // BindingElisionElement = opt$Elision BindingElement
			case 244: // BindingElement = BindingPattern opt$Initializer
			case 246: // BindingRestElement = DOT_DOT_DOT Identifier
			case 247: // ExpressionStatement = Expression SEMICOLON
			case 263: // ForDeclaration = LetOrConst ForBinding
			case 276: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 293: // DebuggerStatement = DEBUGGER SEMICOLON
			case 314: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 324: // YieldExpression = YIELD SingleExpression
			case 331: // ClassTail = LCURLY RCURLY
			case 332: // ClassHeritage = EXTENDS SingleExpression
			case 337: // ClassElement = STATIC MethodDefinition
			case 361: // NamedImports = LCURLY RCURLY
			case 364: // FromClause = FROM ModuleSpecifier
			case 374: // ExportDeclaration = EXPORT VariableStatement
			case 375: // ExportDeclaration = EXPORT Declaration
			case 379: // ExportClause = LCURLY RCURLY
			{
				return _symbols[offset + 2];
			}
			case 84: // PropertyDefinition = PropertyName COLON SingleExpression
			case 91: // ComputedPropertyName = LBRACKET SingleExpression RBRACKET
			case 95: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 99: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 130: // SingleExpression = SUPER DOT IdentifierName
			case 131: // SingleExpression = NEW DOT TARGET
			case 242: // BindingProperty = PropertyName COLON BindingElement
			case 310: // ArrowFunction = ArrowParameters ARROW ConciseBody
			case 325: // YieldExpression = YIELD STAR SingleExpression
			case 326: // ClassDeclaration = CLASS Identifier ClassTail
			case 327: // ClassExpression = CLASS opt$Identifier ClassTail
			case 329: // ClassTail = LCURLY ClassBody RCURLY
			case 330: // ClassTail = ClassHeritage LCURLY RCURLY
			case 353: // ImportDeclaration = IMPORT ModuleSpecifier SEMICOLON
			case 357: // ImportClause = ImportedDefaultBinding COMMA NameSpaceImport
			case 358: // ImportClause = ImportedDefaultBinding COMMA NamedImports
			case 360: // NameSpaceImport = STAR AS ImportedBinding
			case 362: // NamedImports = LCURLY ImportsList RCURLY
			case 367: // ImportSpecifier = IdentifierName AS ImportedBinding
			case 373: // ExportDeclaration = EXPORT ExportClause SEMICOLON
			case 376: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration
			case 377: // ExportDeclaration = EXPORT DEFAULT ClassExpression
			case 380: // ExportClause = LCURLY ExportsList RCURLY
			case 384: // ExportSpecifier = IdentifierName AS IdentifierName
			{
				return _symbols[offset + 3];
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN DOT_DOT_DOT Identifier RPAREN
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			case 129: // SingleExpression = SUPER LBRACKET Expression RBRACKET
			case 328: // ClassTail = ClassHeritage LCURLY ClassBody RCURLY
			case 352: // ImportDeclaration = IMPORT ImportClause FromClause SEMICOLON
			case 363: // NamedImports = LCURLY ImportsList COMMA RCURLY
			case 371: // ExportDeclaration = EXPORT STAR FromClause SEMICOLON
			case 372: // ExportDeclaration = EXPORT ExportClause FromClause SEMICOLON
			case 381: // ExportClause = LCURLY ExportsList COMMA RCURLY
			{
				return _symbols[offset + 4];
			}
			case 378: // ExportDeclaration = EXPORT DEFAULT Identifier SingleExpression SEMICOLON
			{
				return _symbols[offset + 5];
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression COMMA DOT_DOT_DOT Identifier RPAREN
			{
				return _symbols[offset + 6];
			}
			case 319: // GeneratorMethod = STAR PropertyName LPAREN StrictFormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 8];
			}
			case 320: // GeneratorDeclaration = FUNCTION STAR Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			case 321: // GeneratorExpression = FUNCTION STAR opt$Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
