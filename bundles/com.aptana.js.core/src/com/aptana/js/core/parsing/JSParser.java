package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 100;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy5CNtVpENSW4If8ZIfHX2Ru54D1RiNKJ47rt5WeecYgW8YgBOm0fOGSL24R4XAWB" +
		"I8JH1cg2WT4Iwee2my$$ExDpjNjjSBdS7$htDv#sR#kRxthnfktSNeZDoQHnjOu$J9$GfVK" +
		"1ZQ2oDfuze0dtC7gFPx4bgJYteUkh8A$9Al0PlG5$GP$GvBySRywQi7ijaMQm#EvqwqGtqF" +
		"zhBc$1cl08lpq$cpNbzNfQNuTLvGtuIRqItqH0Q8JvZGsautSmpU3e$LGXQJQje3Vr8Nz5A" +
		"cam3Q2bzJyjeEVr0AtXbMaIB#IaqY9wdPsWOlK0lihdq13r6G#E3cTqiCRERV30RaMBcfUb" +
		"QteAtP4#mGRhk$VQwr4VMfRle8RgQBgVUr8skfAje7rMdCfH6fIcTCgWidKJbg3nLe8fqCb" +
		"MYK#XKgao7wGYTHllvnwmrLMFNKHMMGrFOHJIDgb8fQGrMbgPIBIgWh$WNDDaOI7ke5sscB" +
		"VGDVSid6O$H9jfDMs7L3sbY4AjsfusiDp1F0kQUCTRZRZw1VsJfmTf2ZwrAZxbq47hCWnQP" +
		"9XRs36jfwi7wyTDe1l#4Dl7MHUd1chCyTYxrP2VJjNvz6KqzlcGfR8sb1w$AFgFJfHxiGdO" +
		"5BsGLs6HeKX1R56mepqCRNXIkCgmkNobHyFby0IiBgzt3rj0wreHFvcTJAkl79g5y8tuHUv" +
		"FFPLKHdYn72t7gpWRpJ$aSFfi66jVGU$G#kuHTRDmNM$pyC$OUkyZcrKcKGidAYcvMYPLbR" +
		"jgk#hyltSBQmgktGeCBU0xuSDQ6dGcl3kaBx3pMM$ngZ68FiLTYhCMPx7hAilbq5zYrYzBY" +
		"7TO5Fbr0jxAET0Vh33HtGOj2mLXdDj4OouQZv48dBUX1ZCpwr91QijanzgKDx7DZfAM5CL$" +
		"whzBYVh4VVJ65Qh7jx33rL#cc5ZzoJZEK5byxQZ4BMcIoJgmFMsKy4h8SPdTQwvdTsLJgHz" +
		"$H4dDsf$RKWQuBdDsf1Xl9HhCHT82Tn3wYVqWm5wlDiba3geC#gCkhyZzOLzQDpMEvl0uLy" +
		"4wyBkiCVXEloU#17eMW1LIRLMNJRQFvTrQLBwIg$4$CxY7GaYks$I5sOVJsjNcLcosZXMfi" +
		"NyJxgB5Hm9zLexU0lqvxcEoN7Nml7qs$yuiGtXrZht#C7c6jR3O3MhvEuVk5BSFSiu5gyLL" +
		"yDVt6rs74xg6TuZVLTx#nTDh5$uarFcCqsqf$sEQMH$XHp1Z0v#8OiMN5P$Gt7UDhoM2CSU" +
		"0RoDBalCUJs6by2oiTQtpqA2TMnjQ$6QmSgwR6MmrM4$rRYpLZ3LaJrXYygSBNGk4Rmgw5t" +
		"S#8UVzMuq#pispupcPNiMiKldQiFI$axsD4tyxwntXMUfh#uE$Ol6mUMistLZX1GF0WUrYC" +
		"4HyYrD9XFNWAUuCNs4liPLXoc6U54nkmNuYj1ismmbMoQN2ByGfxJTdnTVOMLWTpXHk5bV0" +
		"3DiP90wmUlTa4DevzYZLwb5U3bUpR67jg5ZJunEO9NxCls9TAWw$PL$3KAvK6tx6PR1QRuw" +
		"Z1HwotCSuOOxpFbhCLR2K$Nwzjwuo7uxCgy0lOQhPMhWXOitwLguA3nsp2gdKw$Eq0#vCVC" +
		"2PWLM1y8Jj3$CxcyfwHMfnVoaxbb$3B#ENIulmgVZM$HbgSj#VNyGxyUZhCk$6bc9dEvRU5" +
		"miPlvrVmAtaxVYtl5UDLQ3ixXTUq#bwiPWt52jdtOhbOIcwnn7YLdy7FuUUnPhojyONnER$" +
		"LU3m#VIbQy1j4Sz5CD1LDH6FdlXIDi1jiA1g8#Y9Br1EPudHHbtSnTeagRAxnQ9nyhmU$oo" +
		"WqfXjJZ6z5LMUyF9$rvhsD3VnUOpr$W3$47wQ1V80Qyo5t9556#paVPFpCd#Gl6pyPxpYZD" +
		"Nx4k5x5X$4lZNN6McEriGOprCfuedMbyF5KOFGt1l2bnhj5s7OnRBk4B#FV0sKlYTBeoNym" +
		"yerxsDpOZYPN4l$Hw6tROzzbt6dSeLQptNmVkUFKivl5VkDUbyieWAqSUvRlCJu9YIbUVhZ" +
		"VXQssAzcLngevetMLFlvesNSahslaJPogJXrVys$u5FujdygdyUdyEpw3p#IpGfugr1LhFz" +
		"IjM7jZyv9FOUGL9pyas#NSiqxMYbVF1a4RmPL06n9jbXqjQuiJx5ORb11FX1NAIocBjyREU" +
		"2wzJA$Iw$Icnl4iZQ9t90vpbybpsRdowIEzJU$II$GSlKAZwGrwYXwdr#WjUff6GjWG6W69" +
		"Gscu#9G6qvFy9xEkMACm1BV5ACmxjYV2AEdu59k8hs6NokU4x7ne7G8pcyRAIUt4Cl4BM4Z" +
		"Cl9M5cMwMcBqsKyYLXOQ2pl7jM$6zprFiJbxCyPWbxm2UEnKo$MmcgFSjOKjzuej1YrIeKp" +
		"ozCpoqoErrmembgzM8Htv9JZZyug9EEA5dT8mbUVrbdN0SP$zBvTtu4xTGOn$p2hzGbP1Na" +
		"MCVrt3MGu#Zq4yqCt4spD8ZBFZOTy1SrDWNFrXZrmcpP#mhp3r3ZttZwO0E3e8vnZrUnCKx" +
		"MprU4YHqgCH8kaO72QjOOYGtHmd9koL6Sd#Ka8mlCP97eeHaSucH38uIaXqbHl9Sb93iAZ6" +
		"I5wA4v629aGoF4f8Z9KRoHfIG62L6CYewIBYhn4ZUYnAIr9BkDFYOi7SQ#eGISgSXfLteLJ" +
		"6idGP8hjfPjlK#58QiaASCPyocv92d3DMcf$N8C3i#ooWEPXOMPay$YBqbi7CepCNVqHtLk" +
		"r1dEz#jCUza$Og9cTW0RScGde4oznKVSr6xK6Ldoo$3seLwCElBPnVAszWcW6BRsU#Kb1hD" +
		"KvBgcMtHRPaNyBxy3jwHT$ThEJxwdKYjLFb$f4kYbKGhYLOIhHptcVzVqKgOC$$$fxNoNz4" +
		"lYLOIhIHQSMX57Gba6pcK6$p47tY2AF9KTuay8V6VrGdfKhgCigaLjQOpg0sTHNbqDfr3vz" +
		"9vT05TI1VHnTHOdR#AUU8F0tDMiKxy9kPVmyGSqViGs#MCELmxgvCeDyoJgFpcYEFfkVWdK" +
		"HiYyMC8pBw8dKxFLItCvZldC9zHP1NRpbdUUn3Chb8sp6OBnNbAOTQmlxNolJmvGJ2NvBCk" +
		"xDGmF#jIEGpBE7bWcBqPqZB4ze1ECQlpRRYzH#$xo8pkgAc3rjJpCVdEcczominsXtf#ep2" +
		"lLuYt8hGbm0x5niotXuiPPTT7WbcrCj0RUYeSp2NwjDMX8Zy1NXB$hXXJwQ$6LFgxCPK#Fg" +
		"RIDyTK#ewOIjyLK#a7OohzI4ob6x6KpbqnbPxwxvq9#9r5hjAXLerVYxlRDtvZFmVC#K4lD" +
		"e$k2qydTfbT9uVl14Q0bZyQ5jXrG6kYxkUWqU0WQL54wmIGZurgEuNnGKqRwASejhI1FHiz" +
		"QIp90NUXVu9O6wT#hXNLTZOuzewykaJLel7nAdMn$j6S9#A3F9hj93371tCSVTfdj8fL$ss" +
		"x$#Sn3oJoV0ivOipXVDfTN#mY9okPtqBcKTn99YGb93b8kka4n9IGb92Ka9IGb92Ka9IGb9" +
		"2KaFJlaHJki#Y$V9v5$#Hp27948xyrpVPnjqJ3gtZHcASd2msnzyF5maU4nc9#Qve9$JOto" +
		"5cHlyZTo3M$u$smJilsFTNn1yF6SiW7Iv2p8d$RY#rvzOjLLtlZhLN#NomdxDOoVTvoKBZr" +
		"$DwEp8cidb#lczhLyul$pSS5AUN$kHIhlpuCbSDhHumoQjfvKOwDh8VOByTV1qyFiOsXzKE" +
		"fqqFglZzYBCwpb4U#uxpW#vaLzeUJ3fvBh8lSUkepAt9UY5o2$VT3YFUBL1BN$SNxHyiN#E" +
		"CbbSIVY1gMbyAMTAFVdEUHy4g4irz#XFKUYB3Ur#7uRC3L8yBMfaTORsROzUxrgHTkhP#3z" +
		"s8Hr$m8jVcpQD6qFa9VJewmNla8wzK9Uu$sN4GzuzlQ6n7MUpkOYTcG2ALz766zRoAijot2" +
		"UeSYgyTPd7qlR1$omnds#S2lteqHrhixmdhtHLZlcGZhlHPXlNSZh3Snx7hr8fe36aHKgr5" +
		"4jPhurF9ySo3SsiqSrf6se4leV1rh6jQt7SuCk#Kh8jAsNKIrEaTKgsj4jUwCg5Paku1V8g" +
		"db#pcuudeCsncqTZ2FeJ0zHgvil$lNPfU7LvlzuxWhAQvsHqDhn$wEMBjZ4Tict7DoSadwb" +
		"9yLuaoG8d4RpoZS7fbXQ#rmnTOMGnqyrDBjJGhvf8t$55YBFs$7pPU5Zvk$QjRYQsAYxLib" +
		"wlaFWjkAZuoubwIjFhJNDd$dCSfQVnMgZtr$vp7GzVXXbIT$bT9UwtlG0b0fQiiA9MuslrX" +
		"QUxIDR9G4zz78x9z0aa3oNq0I#bSzYVMEUEuQI3xVwJF65z5EwDo1oFN$N5sXrOAPxahojk" +
		"FmEwN6UAUMM2VasZvNnnv1EzuMTBhvd#JCbWff4r#dVvVPcyuwkL9f4t9b#aRlhDtJAtKFR" +
		"hTRyoiNQdujPBVQtzBeMfvV$OM#x3RrbaRFhxmKk4ozWyttcQNhWEhA#bQSxPLIFBCutobd" +
		"QUGlOBjPTVQe9ONzpsUkhyaUOIzwz5TlonGMTYDFupluRsoWYOKlPpDGlr2YW1Jvcy0TFEX" +
		"LUulu2XELXKB$Oh5P$nZxGUeYzMVpNMw5mc$jKQtVvh4mhXegxrvMm0O6NwduBjR1#tk$Pk" +
		"kojCzAnku1tKAsYn#KhLCTDbVQq7VbOmzGmCLkOBi3KsrNJMB4oKL9b4mfb4fkIgDIL9hAE" +
		"7p$fmfLfMfK7JhMfDEe5jK6$hhoFw$W32r$iQq1DSG9jp7EgqrnwfHZlIL6knoHRJ3cvQWy" +
		"4#Co7wtVYrr07wpxVUa1UX0dztxqCFMd0VG8FOhHynWzJeDm3hoMsjDrr46#cLLlNZlzAp7" +
		"dKq5OTP#W9samFKLFqpFqB3r7GsWeFQ##$VeIlKolq30QJYFeLNgDNgStw4rwYqRIAEYHIM" +
		"jfj9hHFi3yyGlcZRLgvf3Mc8Xu3lxCTWbxhQ$eQ$g63j0VD1NnwVGTpN2mwb9OrQox8iPwp" +
		"AURw6QR7jEXnmobHpR#9YejkkjsvthrMAZwVJvAhovIZsMqWtwBWnwPsDjQUdIZdscsqaDY" +
		"cmXTjYXTOeiYbzQZ3Gl5Jg3AKIZsqZwWa5PR1JjUJt$2IoV3ZZyZ$s#WocQ4UmvGOhIm5Eg" +
		"1NNeNLegLfdoMxaNSDSRukm7XM0i$IsLkbgRmpyIwFX5ti$$dqWRq$MJq$KBmTF2fj8ssmw" +
		"j3#y9gw9u7lJRZj15RBJh0wWMsNfWDkyxMFZrR#NGRK1xEFZr0awapTG6N$ZvL#OYJ5bsWn" +
		"Tlq3hqRSoqoWRA7JOis2flK8aVrHHwun9oiqaqjsYDULcdHhaWjkWD$5sX1SPhTny3su#1X" +
		"GzMRTJcxPoiDSc1xoUUhS6SLdWPi#JRThqNiEgLxnv1eUyQuF$AKDInCC$6Nhp3bgvbofa8" +
		"khI7vPDKh6In9ULM#ygfO#qita8LFeitN$Z8J#AJ$$4wxW2SVFJiPbAVGCk1hWnAnnjS6Qt" +
		"k6pmmjPmmJNmU5hnKG54A7VD1at3CK6ecl4AXZZMyiyANxZBSC$9cpHhh2bmv9rsE6brpYQ" +
		"#F59p4V3tpP2bywmXE1exkQ4sAB0ZuD7FOLhZjc4Mk5wu8INTGCbQTc9USvA4FPrcD9YJWF" +
		"#uNOQf0EI#RPDCX3wrbAWmpquqIzmcMeMAQZ1Zri6lI8emO5qE2eJODsz1Tqa1gqm#x2qY1" +
		"RUOQJ1dAro5P$7ZtCjMrPt5Q5SK2OfrQ479IJgu8psjdmjqo499chGZxgTuonnUM#ou35Gs" +
		"6JpmxaPyA#e4anNuMsOgMqU#yGaEpxFBqhoDOpWvobPCyUYrjVjeAqLju$vxviXNPR1Vth6" +
		"3Uy6SW95s#c6kkjD6Mg6JzRzNFe7KbqqOv5RYlb#QtqwRWewsQhDTNyomV55wtSpSchQv5e" +
		"rw3TJ4ZVhrP#YLBQjol#OZsknzADQCKQJLtLdnnDQ$0tCKwskb6XsAFQThPL9jeDbHUldit" +
		"4sQyD4ClzcJFQ$1C0ROR0HTtLtKHx2zrAjz7jr8lke3lfBkfDTzCzeT08TSNQ3tKhNZ$KSV" +
		"YXud7oGs6xYkXP1sl5gsS3qOe8hWJQK6YfmCSJfcCsds53ukG1PJ5MLWDFnv0up5scV2ued" +
		"puwu91FX76tdWYdwxfveJ6elRljYJ1AEZx5LlBBwho2a9XpzLoIfzfscX$zC7jjff2hKAwq" +
		"gr$VvlaynSwFwvFtCMX$d4AXdyq4zRufzArFV1PeZWhbnzCxmqEBt6#3fyT$BDbQZNpantO" +
		"d57fic5vlF#4uZdrrpmI5ibk16XivMgyYnpwuTnmvz5XtDUkOSqEnnhwQhueQ#tdMs0rdxD" +
		"inwpgEOnyfmJ37OS$Xu75nEzCca2IG990aa2IG$1UGH6#duJsXX5YrLLwkLyEmTXhc3ispa" +
		"r1feVOS1SKzPUYJaRb72NdAKELqwv5XBk9PHZ4mgtrSqPWz$P0NkPr38YZsZix4xB5XICnp" +
		"FPXfOV4muxvPrmtf6SWx686TYzg55lZi8yFQXVgUE4BlGYEmSmnFIRfdudEQJBIIQ2NHIgA" +
		"LH2k9LXAj95f9j99e9T7A2TQAEX7eDeAV#8ES88eurQapaEUzekSxQstfVE$trYvHtssxdA" +
		"vGtuIzMfs$YdlYBnApUNeEzyHVJCmHlG#nMT0HS$6Uh7ZVuMJeTqJHFV5xdq44n#oBsF7qt" +
		"CqVSvZFA0gAxHi5ddlGKPDhOTOj5EV9Ybd3zjRAJt#FJiVflLFeprBw#bTqHdgWPOHwPqrR" +
		"TNqPXiO#CgCwQlpUMOzrzC1f8P$VI9oBLQWGj3p03iN6JBl3nIm4SqM2MQKjzeR2mnpR9z0" +
		"9wGdf2Ua9wGdfnNvB5zbkFt353dPXrOXCfoX$aYiih7FfJ1rQw53gno1fKKJhY30xckrGvp" +
		"YXbjzYZLvlHbTQfXFkW9Gelh#APpyxjQNQoutgQ8kBZJJod7yVycZsRW9pd337pQTzHskKt" +
		"vZ$##p#7yViUOeXTq#nnEoLETRHIkQta9s#ztVSnbL2Ka9IGb92Ka9IGb92Ka9IGb92Ka9I" +
		"GfBlQIgov#i#Po1dDFAy9d$nmGUDhkb5W$2NKS6YtkRIJ$eDT92peiGYzBUcgPjEc#Ltgei" +
		"KIv2peiJYSrOyv8sFLdVvYomHjIRVb4VuTYGAbjOwBF6Dip8q9KYfNmFJF9OEcNFa#6jdeO" +
		"nGPiG#7VqU2ctfedeeOXqSvmMlVCTvmVSpAyuwU2NcHMuzSmHJjn98A8oIzNQNL4BqUZ9w4" +
		"aegAIgMFUvZCWmVZllS7c6z4lPY4LQO4ZkRqv9$YONZsZFHzVB$zpPEr4lKEv7hdVYrF6VL" +
		"AAmZdjyZqx6yiBxjSCs$m4Q9Mb7p6EkRAe4UWt1O7gDAPWVuMvSm$OqvxafEKEt2hNryPm4" +
		"JDywNybS9FJB3rjgXLuw3BG8mCCSdRG6rVFkGQXG3j#Tt7NDFz9wtVUyiOeyDOglyUFQn$$" +
		"TF0lfTVHvJ$YgbJotzgvGq3$w#GFNMecBrbgUF8nebmNqqmb6IG990yXz04dhk5l9NaIASk" +
		"$o$q#Vq2JZLJkWL91#v$kzAEbijcEcUDnngnWmjAxkebeJjStM8T$PlmNnNeZNgJDDHPePV" +
		"UZxjGNgsJAUbtbbxXILLf#lvbIMhDqATvV##j7b0lkRgLt#LlkPR6k$y2beWfT0Y#opjaGe" +
		"KjhYQfVKihhwxE0lvSsWQPkbDbXIQPf$hQJ7A7FQk8VbUBF$GSlMVZ5QQM6W$f8p1N2zRNQ" +
		"HqsUX1Bo$66FT7eMrYraytTL7$#tCHLLGe$DOUrRhNmWZNyzY6LWPVgU2p6uNd5yC2RA3Bh" +
		"0DjyXbtxStMgMFWoYTB#r#mmRJ0L5l#OY9N#a3rZnXSb#2MHvHw1hZypzc7YHX3$2MP7mk2" +
		"$2JSfkdmxLOw7J5vtGU8MhsXmsyXF0Ty9lWluDk8Mg3#wQM9Ac#F5SP0pASt8sgTPiNJEYE" +
		"j0p0CBRfkhIpKhOlo$H3v5Jf$WV3RPbxhgsIFo33OKIB#j9bU#YQJywTG5lgtxgNjjK$Z#G" +
		"tXRuWoCv3t2ihT2fgC$lmUQIqH7gJbJoHgS13fTSnuKYPHbR$YPRVZHR313R3XwLQSjkdq0" +
		"R35rR0T#YvpDEoaqqy3iTDq#4MKwMg6KzQN38Th6kHbc#7MFseCyn7#0$Yc1gzJRZZgxK1V" +
		"bG7bO2pAy4bcNb9R8lSvMgVfEYqVCdS1VosY2iCGX#uLvllABBz5bxt3v5MqVoJTPV9QFKp" +
		"E1fiy$JBamVTodWQ$3OJnvru5$eObCmbwr2k7EYXNGOzTNfEeOcC$VHv5sGMGDHNy0z0IZ9" +
		"z6uAFD$7gj8MDvQ1icBKF#1F1dT7oboTC68VoH6IvJ2U4vllNIW8LtCSF9m5bw8ShijFBJ5" +
		"rXXDbbZtUihenx6USlgseQNGiufeBwGSm2y6b6foWZhCPcy1kqDCSCfkJRyImDrIjVsfkjr" +
		"V8gVpliXumKhdfocqm#XZRiHJxVbLP3$hrc7CO$pvU0ds$BFz9NDjrfX#X$qUWzbq0V9yBL" +
		"QWy6pTBspuRkTpN2EnmR7aFuWuel0suCUXWtWVydNw3eleFzxW6Di9Ny7#o6PmIx9OtN#NA" +
		"J11$YpAFUAJfj7LFDQy4$GFiPBygVWcy4deSmyNMOjwg7$#6i8$wpJVaJy9wtJ9iJtw$Jr9" +
		"g#t5#dRuHkzpNWvu4Y37wHW3ioHziKwbr8V#E77oSTyRPHI7bGHzL$7MCn6#6ITNibM1kkc" +
		"$CVHAQU2peL$rG2$ofP$1TgUeyEORrBlXxmzHBNXGoaOKxLHFwKNT3oi#$PYeYpP9dphv4P" +
		"cMXRwi#LPY7UtvAP3Rifvg5y03llNnhgT0fyu#MKpl#KGrEi6EPXZJfwhvM2ijFm8yKEwBT" +
		"J96eio$n1LQgZBO5ncfoBUpOodBj7OPVy#YRx76kXw6$6x44R$9RaHXjqhT8GSu2dzFigX7" +
		"nipNrkwC2zLrVFDQLzXxhbNX$$K#UrCNdkHoNDiOwSqrhMKdSZR1zbODrCmpwMF14VVbeRV" +
		"biPwbuAy5DWivQXLhmBs1ob$M$4iv6StrtfXBNQ3KWJ2zNGQ1xdW7xRzI2ewDxKDw4mG#Y1" +
		"LxfCm9bAl0bq3QWU2lgaO1wdNWMGVNm#2FL9x4DL7FxkGL#abn34dLy8wdehnbje913lKXq" +
		"mNobRw6$6NeTzpHASqG1ZhUIhcyLIi0waZaDOLV1G8kjQ$4NMaZ2z1uq0Ow$KnPbrO#q$1k" +
		"fMAFavTWV4ayp3VrcaCZZ5LHsBy36LcWsFlu8RV9AKW7NDtAjglyp7uxyZ$2nmsJiAugGzP" +
		"hYb4fsACf6BSrySyd3qKyIw8mtPrDe8VmPuCFkF6M3eLOzyDEsR3h#hBFSTqfCr26kpQe0h" +
		"sRqc88zqDdjmGQUUW36nI6ViZTpBYFL6c3kAOSzsfPX#up$NrfGRF8EriArvrlQs$ZkeosF" +
		"Fat6IlLnH19kPqD$QTAUq3yxB78wygw1PT5cFDZN7hnZXmwxc5ONqiZJvqOmvrms$SyDiqA" +
		"VDECx$oymXZl2R1Fkvx4SUQxhvFouEzqXRQi8pJ77guFpN3kUXBD$hFhSTl2lOnQMq2iTOz" +
		"qmgtUjJafU2NIQtCS9Ms9a#2twRfURxAMoPF0xPgELRzAZyZ3VvP2ZwNDivAPsKqlzgtxPI" +
		"1nR5vSGZzMMY5#IehJ0TCtXmsvrgtvktDDQGv#gaKrf7cy9dIyC$ci7FfRh7268Yv#LRCLM" +
		"MjE2kBimju#bb5rsq1Vql7E6k1TRcStZysVjVavT0VT86M#QJDHlVRwcDkAgVzYmRg#hDq7" +
		"lostFDMMSBSqdY35IydF#svs9Q$1VvIDzhsET48Di1SHcLiUbSqUHEzRd3iNPfSQUKtFDyA" +
		"D#bbXLrzIuQ3OLreyeGPBhV3v2qmJvV3tY#dLuWwOttZhZpVkBjUO9qcaqnUPeB9gzNspK#" +
		"guHUlvLT$any6VMRFtcF34N0#HZr3jzVEIgkoqK$MI9FdpBJ9iitrJQluo$N3YlcDOG#NvD" +
		"9nlSzEcc6LIRipIBs7FMSWCqul#UQp3stXyIPFhknRfWNslkNrVZ6vdyaR3BUrqTWAvrQqX" +
		"TjROHPmHeSjFlIDvsO6bYbzn2P3hnNb39Hjv5$MLWxxgTppG#NhChQz5M4UhJFDYjUiOSl3" +
		"$hnfQpDSVg3MVON6FyecxnDV#TK6Mk6cxUnvEaslizK#iT8Qz3Hvm#wQVwxBsEQofiDCdgp" +
		"tUOGpGxAUJrb3grno9rrUhxV9jKpkmdx4LLVZtsALv#NzCVhYBVrUwBpS99kS#mFpan#tmb" +
		"MlqxejDNaZFITLjvt$cYxMQMUPl0Ns8kMnJwz#frM6Jv7d9jHlfkNqrNNqc2sFytLJFTTKB" +
		"pHvI#ptAsEjg7x8ajCioUGrj3tbMQCopX8rzFZAyJd7Oq$GsdCM1hVXgV6aoLtwx451V3cf" +
		"ZsxpDDJL$TEmdc#PXjh7A#yFhDyCysYAtjla1eprmFAbHlh6vNcfIXihdhn1wp7EjvpheQ9" +
		"aXql0V8F9qp$GVATVlhP9HbChBSNdV6#crPXag$DYa7Rqd9$HnqfheEUpHjzhhfzhP7nZyg" +
		"eJJTvOpssDzJZFC6no5vYyxFacpyOSNEKonFLppSRwUKBZ$hgSFcDMmRpRR8iPFgcyhejzM" +
		"nMSWqxgQCblhlb9kb$bMQCA$Eyad$N3LzVcrNpZgNq2oyYpIPNtGybm8lZfWC2qdA$HpkUs" +
		"DjyANjVLtYy#pmfNxUIRrsYINzcGpypCV7d#JxNDswd7WfThiC$MfcVUUrQUzRKk5vZSFSW" +
		"gvxRD#QcBREdwJ9#MRCEPJdwNE5bK4EN5UU9SSOuuM#I9iyIPeequG#IA7D5Qj1BPegMeBM" +
		"g9qqHbLHwdUL5Ak777MLEyBx0R4a#2dj3o1eaUehkuNdGGrudsubhHJbmZhXPNYIl55U9oS" +
		"PcuL5mYBXONYGl51U9yqLQyAaO8dAx5OF6uU4myWj10qKrq5Lr4Pz59$4$S83eQBniujnil" +
		"Ild6syPRAFEvQkiJqCSgD47S96uKjseCJul#ee#uGuNl5SyeVhUCYmAnN#mJUyKUiLli4h#" +
		"BdU8tiKDi5zl4Lh55R1QRn4Rng$X5R13hnS$Y9x5Eh1K$YZLYjLWbLeeLuWUnN2mJtukbOe" +
		"au9ewAVyGHSLWS4d#BlyH1yQVuGnmGiyKiCKVaYzxYFTNoQF4kxk#0HcbyTwdxOdKlX4xxn" +
		"7tY7Z50F2pwYOV4W#81qLVSBnQ8#MAUc2jmTXTJnJS2VYo#04qK7udnOfpnXdnBuRcCrvKq" +
		"h976Ndl$6dj4TL4DV1deUz1Iq18GMZSM#Vg2yR6ew0ql5Frn$ywOPaprA$MfkdyZlXCpnGp" +
		"ZEgEzYdzjJCPzaa9HIPo2y6UYfgYXybxGDOSQp#4#s82$6F0NCLQC4H#g6X$ujV6QIYq7oX" +
		"1bZ3#D$SOV8aKa8uxPGRX0t3Xg$AtA$cKSH8a3qaw82UEGueQE7pEEY6dYIp79E8nI$mYC0" +
		"FJJN5XMslLRTPyYlXAJ$H2Cy8l$xWtj9B$BsEuDBJ3cupvNXUSOyunPIezJZPa1TOQBaqHP" +
		"MnnsCDupVEnW33DcgzepZ1r#jRTvGvir$rMa6JyOosrbjfgUZz0MpJTwypPf$Wje1Theht0" +
		"gFAAh9KFqaYD9XUvKzzj0sACAEGRV4A#BryIR20rGUPr1NLHelbW0kOECfrGRGund5V$As$" +
		"gNcayqTdjc7bLFpJmgf6SUNwsb7tl32h6$RzhxgUINntwEPJ26n4AZdO5JZdXRt2vk0UyfR" +
		"WOIQPb7nJ3nYdXPl2HU52#8vyLGCKGy9vxLMFiP3neF67rrx7wl3drysp1kzedThkwt6hSO" +
		"DnktgV3TEkScTR$Hw65qDxeXrDL0VnYT3SoJnlEWJYh$Vw0RZ0wuNszqz4fzI9u4M3en4AT" +
		"yOiMYiISW3IGNY6kUJFsGPgVxGFTgwWEw7$GeI8xUkU0Fevv9oJYhS4r9YXOYl11bbe3t1s" +
		"r0dGs8zqVU2l0LgBTK4QElD7rjes#GDnlr7a3u0OGFW1z0$0z5BfeFFX$y2DAFWFyABkbT6" +
		"$rP37fEaOkUW5oJN9gIGKoJ9utHOs7IGugIG2uGrt6NeiUH$ZZu8AGDGjvJFfG4SgdmayYN" +
		"LA1fS17qTXZqJZ7f#HBG9oMW5q4VsUW3JQze#apJ2o2iu216Gs2toR3RP8GdQdeFQU#3Izg" +
		"8y4RmbQ2X22zMn6YQ8axZm2LDG7W2yYQWBzP1zZgaVOpmnqZxc5Be7$1$a7OG$23uPfJV1B" +
		"u9yM$1iPi0COGvZG5D0Rq4UfbIGSdqAVX8HSaaP$mlKNOafO5AWTmwpyEjy2H5oQ0qK2cGM" +
		"wTvk1N#2UqjXrn9mn0U1cp3mOU3Zm0V0VugP7qE6WN2kHl4w2ZIZoA#1U4jABSAUl#5jDT0" +
		"Nu2s8btICKsl8#qDBoNHtwYx7lKCv4bw4#7Hm2JN#Pc83q3uCFWyHKIBm4roqG95ZEQ0Pe6" +
		"cWhvJHFGiyfv6M99GvABfuDEXwtJ8F8Jm3F0FOPj7G3yW$emY3dBHU7AnCk3RW76Ruf8uRG" +
		"VjGBdV575Q3RxQv2mDCtyQU2h83S8E7yHO2gYK#WWI1p7QQQEzaByNRJ7aM#HIn97$EzhT1" +
		"Vcx54#YDP3XGfuBURkHjXjyFwWGj0$v9hb0N9DBKn9BGjqay6JKJqRvFKZV0$uWg2zeBUWN" +
		"q5l$1sEcBZa=");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN.l Expression.e RPAREN.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSGroupNode(l, e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			e.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e, new JSNullNode());
			}
			n.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e, n);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 76: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 83: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 87: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 91: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 98: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 99: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 100: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 101: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 119: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 120: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 121: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 122: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 123: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 124: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 127: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 128: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 130: // PrimaryExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 131: // PrimaryExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 141: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 142: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 146: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 150: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 151: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 153: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 154: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 155: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 204: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 219: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 220: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 233: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 234: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 235: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 238: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 241: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 242: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 244: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 245: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 246: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 251: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 252: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 253: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 256: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, e);
			}
			case 257: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 258: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, n);
			}
			case 259: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 260: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 261: // BindingElementList = BindingElementList COMMA BindingElisionElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 262: // BindingElementList = BindingElisionElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 265: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 270: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 271: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 272: // ExpressionStatement = Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 273: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 274: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 275: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 276: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 277: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 280: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 281: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 282: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 283: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 284: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 285: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 286: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 287: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 288: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 289: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 290: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 291: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 292: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 293: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 294: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 295: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 296: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 297: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 298: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 299: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 301: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 303: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 304: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 305: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 306: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 307: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 308: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 309: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 310: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 311: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 315: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 316: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 317: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 318: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 319: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 320: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 321: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 326: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 327: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 328: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 329: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 330: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 331: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 332: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 335: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 338: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 340: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 341: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 342: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 344: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 345: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 346: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 350: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 351: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 358: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 359: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 368: // ClassDeclaration = CLASS Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 369: // ClassExpression = CLASS opt$Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			if (i == null) {
				return new JSClassNode(t);
			}
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 376: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 377: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 383: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 387: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 389: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 390: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 394: // ImportDeclaration = IMPORT ImportClause.n FromClause.f SEMICOLON
			{
					final Symbol n = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSImportNode(n, f);
			}
			case 395: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 407: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
			}
			case 408: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 413: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 414: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 415: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 416: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 417: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 418: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 419: // ExportDeclaration = EXPORT DEFAULT ClassExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSClassNode e = (JSClassNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 420: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 421: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 423: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 424: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 425: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 426: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 231: // opt$StatementList = 
			case 254: // opt$BindingRestElement = 
			case 267: // opt$Initializer = 
			case 278: // opt$Expression = 
			case 312: // opt$CaseClauses = 
			case 336: // opt$Identifier = 
			case 381: // opt$ScriptBody = 
			case 385: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 84: // PropertyDefinition = MethodDefinition
			case 85: // PropertyName = LiteralPropertyName
			case 86: // PropertyName = ComputedPropertyName
			case 88: // LiteralPropertyName = StringLiteral
			case 89: // LiteralPropertyName = NumericLiteral
			case 92: // TemplateLiteral = NoSubstitutionTemplate
			case 94: // TemplateSpans = TemplateTail
			case 102: // ArgumentListItem = SingleExpression
			case 103: // ArgumentListItem = SpreadElement
			case 104: // MultiplicativeOperator = STAR
			case 105: // MultiplicativeOperator = FORWARD_SLASH
			case 106: // MultiplicativeOperator = PERCENT
			case 107: // AssignmentOperator = STAR_EQUAL
			case 108: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 109: // AssignmentOperator = PERCENT_EQUAL
			case 110: // AssignmentOperator = PLUS_EQUAL
			case 111: // AssignmentOperator = MINUS_EQUAL
			case 112: // AssignmentOperator = LESS_LESS_EQUAL
			case 113: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 114: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 115: // AssignmentOperator = AMPERSAND_EQUAL
			case 116: // AssignmentOperator = CARET_EQUAL
			case 117: // AssignmentOperator = PIPE_EQUAL
			case 118: // Expression = SingleExpression
			case 125: // SingleExpression = YieldExpression
			case 126: // SingleExpression = ArrowFunction
			case 129: // SingleExpression = LeftHandSideExpression
			case 132: // PrimaryExpression = Literal
			case 133: // PrimaryExpression = ArrayLiteral
			case 134: // PrimaryExpression = ObjectLiteral
			case 135: // PrimaryExpression = FunctionExpression
			case 136: // PrimaryExpression = GeneratorExpression
			case 137: // PrimaryExpression = RegularExpressionLiteral
			case 138: // PrimaryExpression = TemplateLiteral
			case 139: // PrimaryExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 140: // MemberExpression = PrimaryExpression
			case 143: // MemberExpression = MemberExpression.l TemplateLiteral
			case 144: // MemberExpression = SuperProperty
			case 149: // NewExpression = MemberExpression
			case 157: // LeftHandSideExpression = NewExpression
			case 158: // LeftHandSideExpression = CallExpression
			case 159: // PostUnaryOperator = PLUS_PLUS
			case 160: // PostUnaryOperator = MINUS_MINUS
			case 161: // PreUnaryOperator = PostUnaryOperator
			case 162: // PreUnaryOperator = DELETE
			case 163: // PreUnaryOperator = VOID
			case 164: // PreUnaryOperator = TYPEOF
			case 165: // PreUnaryOperator = PLUS
			case 166: // PreUnaryOperator = MINUS
			case 167: // PreUnaryOperator = TILDE
			case 168: // PreUnaryOperator = EXCLAMATION
			case 169: // BinaryArithmeticOperator = MultiplicativeOperator
			case 170: // BinaryArithmeticOperator = PIPE
			case 171: // BinaryArithmeticOperator = CARET
			case 172: // BinaryArithmeticOperator = AMPERSAND
			case 173: // BinaryArithmeticOperator = PLUS
			case 174: // BinaryArithmeticOperator = MINUS
			case 175: // BinaryArithmeticOperator = LESS_LESS
			case 176: // BinaryArithmeticOperator = GREATER_GREATER
			case 177: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 178: // BinaryBooleanOperator = PIPE_PIPE
			case 179: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 180: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 181: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 182: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 183: // BinaryBooleanOperator = EQUAL_EQUAL
			case 184: // BinaryBooleanOperator = IN
			case 185: // BinaryBooleanOperator = INSTANCEOF
			case 186: // BinaryBooleanOperator = LESS
			case 187: // BinaryBooleanOperator = GREATER
			case 188: // BinaryBooleanOperator = LESS_EQUAL
			case 189: // BinaryBooleanOperator = GREATER_EQUAL
			case 190: // Statement = BlockStatement
			case 191: // Statement = VariableStatement
			case 192: // Statement = EmptyStatement
			case 193: // Statement = ExpressionStatement
			case 194: // Statement = IfStatement
			case 195: // Statement = BreakableStatement
			case 196: // Statement = ContinueStatement
			case 197: // Statement = BreakStatement
			case 198: // Statement = ReturnStatement
			case 199: // Statement = WithStatement
			case 200: // Statement = LabelledStatement
			case 201: // Statement = ThrowStatement
			case 202: // Statement = TryStatement
			case 203: // Statement = DebuggerStatement
			case 205: // Statement_NoIf = BlockStatement
			case 206: // Statement_NoIf = VariableStatement
			case 207: // Statement_NoIf = EmptyStatement
			case 208: // Statement_NoIf = ExpressionStatement
			case 209: // Statement_NoIf = IfStatement_NoIf
			case 210: // Statement_NoIf = BreakableStatement_NoIf
			case 211: // Statement_NoIf = ContinueStatement
			case 212: // Statement_NoIf = BreakStatement
			case 213: // Statement_NoIf = ReturnStatement
			case 214: // Statement_NoIf = WithStatement_NoIf
			case 215: // Statement_NoIf = LabelledStatement_NoIf
			case 216: // Statement_NoIf = ThrowStatement
			case 217: // Statement_NoIf = TryStatement
			case 218: // Statement_NoIf = DebuggerStatement
			case 221: // Declaration = HoistableDeclaration
			case 222: // Declaration = ClassDeclaration
			case 223: // Declaration = LexicalDeclaration
			case 224: // HoistableDeclaration = FunctionDeclaration
			case 225: // HoistableDeclaration = GeneratorDeclaration
			case 226: // BreakableStatement = IterationStatement
			case 227: // BreakableStatement = SwitchStatement
			case 228: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 229: // BreakableStatement_NoIf = SwitchStatement
			case 230: // BlockStatement = Block
			case 232: // opt$StatementList = StatementList
			case 236: // StatementListItem = Statement
			case 237: // StatementListItem = Declaration
			case 239: // LetOrConst = LET
			case 240: // LetOrConst = CONST
			case 243: // LexicalBinding = VariableDeclaration
			case 247: // VariableDeclaration = SingleNameBinding
			case 249: // BindingPattern = ObjectBindingPattern
			case 250: // BindingPattern = ArrayBindingPattern
			case 255: // opt$BindingRestElement = BindingRestElement
			case 264: // BindingProperty = SingleNameBinding
			case 266: // BindingElement = SingleNameBinding
			case 268: // opt$Initializer = Initializer
			case 279: // opt$Expression = Expression
			case 302: // ForBinding = BindingPattern
			case 313: // opt$CaseClauses = CaseClauses
			case 322: // LabelledItem = Statement
			case 323: // LabelledItem = FunctionDeclaration
			case 324: // LabelledItem_NoIf = Statement_NoIf
			case 325: // LabelledItem_NoIf = FunctionDeclaration
			case 333: // CatchParameter = BindingPattern
			case 337: // opt$Identifier = Identifier
			case 339: // StrictFormalParameters = FormalParameters
			case 343: // FormalParameterList = FormalsList.l
			case 347: // FunctionRestParameter = BindingRestElement
			case 348: // FormalParameter = BindingElement
			case 349: // FunctionBody = FunctionStatementList
			case 353: // ArrowParameters = Identifier
			case 354: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 355: // ConciseBody = SingleExpression
			case 357: // MethodDefinition = GeneratorMethod
			case 360: // PropertySetParameterList = FormalParameter
			case 364: // GeneratorBody = FunctionBody
			case 365: // YieldExpression = YIELD
			case 375: // ClassBody = ClassElementList
			case 378: // ClassElement = MethodDefinition
			case 380: // ClassElement = SEMICOLON
			case 382: // opt$ScriptBody = ScriptBody
			case 384: // ScriptBody = StatementList
			case 386: // opt$ModuleBody = ModuleBody
			case 388: // ModuleBody = ModuleItemList
			case 391: // ModuleItem = ImportDeclaration
			case 392: // ModuleItem = ExportDeclaration
			case 393: // ModuleItem = StatementListItem
			case 396: // ImportClause = ImportedDefaultBinding
			case 397: // ImportClause = NameSpaceImport
			case 398: // ImportClause = NamedImports
			case 401: // ImportedDefaultBinding = ImportedBinding
			case 410: // ImportSpecifier = ImportedBinding
			case 411: // ModuleSpecifier = STRING
			case 412: // ImportedBinding = Identifier
			case 427: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 428: // TemplateHead = TEMPLATE_HEAD
			case 429: // TemplateMiddle = TEMPLATE_MIDDLE
			case 430: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			case 95: // TemplateSpans = TemplateMiddleList TemplateTail
			case 96: // TemplateMiddleList = TemplateMiddle Expression
			case 152: // CallExpression = SUPER Arguments
			case 156: // CallExpression = CallExpression TemplateLiteral
			case 248: // VariableDeclaration = BindingPattern Initializer
			case 263: // BindingElisionElement = opt$Elision BindingElement
			case 269: // BindingElement = BindingPattern opt$Initializer
			case 300: // ForDeclaration = LetOrConst ForBinding
			case 314: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 334: // DebuggerStatement = DEBUGGER SEMICOLON
			case 356: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 366: // YieldExpression = YIELD SingleExpression
			case 373: // ClassTail = LCURLY RCURLY
			case 374: // ClassHeritage = EXTENDS SingleExpression
			case 379: // ClassElement = STATIC MethodDefinition
			case 403: // NamedImports = LCURLY RCURLY
			case 406: // FromClause = FROM ModuleSpecifier.s
			case 422: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement RPAREN
			case 90: // ComputedPropertyName = LBRACKET SingleExpression RBRACKET
			case 93: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 97: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 145: // MemberExpression = NEW DOT TARGET
			case 148: // SuperProperty = SUPER DOT IdentifierName
			case 352: // ArrowFunction = ArrowParameters ARROW ConciseBody
			case 367: // YieldExpression = YIELD STAR SingleExpression
			case 371: // ClassTail = LCURLY ClassBody RCURLY
			case 372: // ClassTail = ClassHeritage LCURLY RCURLY
			case 399: // ImportClause = ImportedDefaultBinding COMMA NameSpaceImport
			case 400: // ImportClause = ImportedDefaultBinding COMMA NamedImports
			case 402: // NameSpaceImport = STAR AS ImportedBinding
			case 404: // NamedImports = LCURLY ImportsList RCURLY
			case 409: // ImportSpecifier = IdentifierName AS ImportedBinding
			{
				return _symbols[offset + 3];
			}
			case 147: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			case 370: // ClassTail = ClassHeritage LCURLY ClassBody RCURLY
			case 405: // NamedImports = LCURLY ImportsList COMMA RCURLY
			{
				return _symbols[offset + 4];
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression COMMA BindingRestElement RPAREN
			{
				return _symbols[offset + 5];
			}
			case 361: // GeneratorMethod = STAR PropertyName LPAREN StrictFormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 8];
			}
			case 362: // GeneratorDeclaration = FUNCTION STAR Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			case 363: // GeneratorExpression = FUNCTION STAR opt$Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
