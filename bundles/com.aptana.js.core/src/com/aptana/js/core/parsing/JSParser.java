package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 100;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGUS4yNtVpEvaWEE0r5wKyfHfNa7TthsWbt0JhSNr3jx0KInO04h81O412bI51MG9ar" +
		"w5v4kWjABD4N0dVztPoVPtIIRIt99WDy$Uv#tRsPsvittlNbJa#mHvUwcaVGrQyfke64qd4" +
		"RGAFgAHjCO6aUpMM$s7ZMXfdGhtSQhyVByR5wNPz6tz0sDvvLv2vxBUh7NsHliJVOQtKctq" +
		"nsqd#VmytbLNeLNvnVmytX5NexNuTcy4cyk1DrDRxC1r8#gKrzUGQ#NlgInVlN#n3gpnyGt" +
		"T3RDPOtfVhQ2tg6Ur8VUe0$fNNg5NgBUSSEiUJ4Va9WN26ADM1D7x0KwTfeH23FhGwrv7h#" +
		"GlSlUeOdq2qsWfsWfBQFbj89Mqi#qYfwaHRIOkj1pT2DTIuzG1xgURg2$A9sgK0bAe#9KaZ" +
		"Ae59McCwWCdKbdKLagH#Mf0lrBntIjjHxi2ghCRgMAx4h#0vz4bQWOsmfK6Qo7n3wDZl3QL" +
		"A2zHFkGEeksiYPy9czD3z8Vz2VjTTABPKgzjj14FeCcw9BvDBedvXfjPswgRMf4w$drKgEk" +
		"h8pKQ1hLeW9Q02gWgUnIbiUlr3LYxzEZIYC7VVXiwMC7e54FTZ5zGKFfMPe5ZSwYrlGhhQO" +
		"rj3OM6h4Eh1AxsjJ8bKuTfKRjUNs#ccPeBpXw5ZoRrdaycyrdLz7pz2CjCJoRsj0jTBE$Pr" +
		"DLDfADPKFe82l59j9n4ip5pc6NiHnMbb$iAW6xtUign#QobIo5kVag$ejJ$TeuNfklXC#iu" +
		"AtPFVmeSVuhkrSRo5VmvLhhMDiDrhc27ZFjnbgoPtMxqNtmXGpK#1rgV8ZLbjgVJwanRyUQ" +
		"sa2srO9d1fyksx43C6ImMUnsra7x3DOraErZZ$8jV2kVoWQpzfH4APHCUtaDTeSFncvsZBo" +
		"cZf6VmpwFjJxqFNNLvbdqwSidgvus7FQTp4QpoMZxPz1ZzBw6iOFNe$byEnjCFz0KDeVNmD" +
		"WHcYvFeqSlYtdxJ6Uxg8v5dtnQQEYZZM0PV1ixn9FPQlOXvXYf3xkSbsJTqJS7iuNGym$Qw" +
		"JmMYfroBAnBzQaPUufzGBlOxp7NnmtFsc3gWzbnZwuFtylQGvzpCQQqP9Me1syanx9zsX3U" +
		"cjzFFMYtZ1VG8TeRSnzwaVxX5rlcdqpwJzgyDj1daCOOuomDu#q60oChpahmnn1FDp2oqh7" +
		"7o7$aVU2rvlYRmKfAEtRbBw7VLkRzTN$WN#f#mQfAFn$7Zl1Ih3ghXfIpMTtOOsG7U0cjjs" +
		"NMsuxMrZ4US1K7nlDO5ijcBTX5B9VbiGjWnulOXNm0$uOrPvTmmIvdryR1Zdtv6BxUqhzkO" +
		"grbMxTXjm3ZGwmxUldZeEwQOCy3OpSnN7o9jhvPRslqj4$YOCVFs40so3hNQkzBZ4FPCBvQ" +
		"wnwtcNO46yN6kKgnRzYt$6VCjD#pIMnAiBdMvTP76BQ2JMK$ygCONNzrdfN95NCxpkIFizc" +
		"Mjfx35aaxBc5BqTRBjQ#qaTfmRIZRo7vZczcbZbW7od7JQOLvSSprsC9$PtzQ#bK1asCesm" +
		"S$pQ1QJEEaZMQC$XExnVOWUZmHL8zvCUzxzSHgz7rpBlXPhD3r44l54fQXzUDNySlvrUmYV" +
		"etshJRUMG$UAgWUstX1f7hmswWAlvMLvxVmstKzU5lUZhVNzU2TU6T#5x#R$kKFYoQYiMZ4" +
		"dtJ4znI$Wz$9E$2E$6bnRgojAXgA1goSnQhrHJrfrRgY3hb5fgWjQecQeWQ$bpyHynP#KDi" +
		"ZAbXcqaUq1JeMRRescTonhbsR8YhovoorFy#xoNxIJjj4RktbU8sRL8DgyXUrZQmZwyHVOI" +
		"iT$UGrtOzvB$wcje7EuU#o5TgBySAehUVlyyzvVMqDFQtz4WJZO3cYGwgsJbkhhMOhueRmL" +
		"sqGdqZTWN4LFUsCq3YvuBDqkVnQhMiS4NRJ1lFh#5hghhTq41kkbmZNyOryW$QGbXz7XFTg" +
		"W#Wc$fls66$9$sGh#KzyBf$7v$C5V25Vn1Vp9NmfNyPtQuzeNVWUxM7jSQs0$mMySKCe3g2" +
		"LZ$7Z$3#kkTASRUWgwIhcEiDr9gliAejPdEA7a0Wsz5v1$D3dYYT2KIuaX3tmM5$5linUYZ" +
		"T2RH3hOK7eTx5cyjJhL4PuuocFy6E9yAJv8Hk7lhp3g5Kxh10wdNSJrM4zjSDKHo9ydrwb$" +
		"ZI0Fb5rlqa3QP1Ujow2$s7859lfSnfCxz5Rz04DeO$fTNgPFg9FgHTzHhN5r#gy#n3rfTUC" +
		"Kmvr9sSaxDmmpkWbPh49cFUpISwOjJxOsGxmDe0pPlAUqPClPl6hV$jwBh7A7tDHrxpyvk1" +
		"hNcSqwlhRNFF6hqVO$3n0Z$3h2#taFNuzeWjxHDQ8zK4WXCpFhgSSmdM1xCWlOYlYut6ibL" +
		"DRyWTCZoig5ZfQDE$d3qKF2pkpY5ZoeuXbJ16nl1n5B1EAYEMjA6BPNqGi7qGHo#4YOlaeY" +
		"bYAsey#ZHuMpeg8PKWKiQGK4SlmA68fLaGiNqKHIqOHiNmTHInb2iNYj88qi7mNmWf8hY3r" +
		"ErQGeuAi87jXvWjf1SdkehUHenyhxRU2N2xBXhNgTSOibkcO4GwowWqPytq6Pl9RzHRItA5" +
		"Zjg#IKbcjQAuqiGBV5ksQUNVUap$3x#5TV6gEbuQdLZqLOrOFBlJ0EgeX7RsPDROrUB0z7D" +
		"cyUJkxtkBBpfz#XUFD1cPY3LaJLZO8vWMiWVBFtu9ZrWRQC0T1YbhrpreyzWfpr90ZNL0x2" +
		"tt7OTehT3kV3gD6efv4FObw4lN4g9vuhHbEatf2NZFyhwsrJfFsITIJg2THJu1wYlgz65Q#" +
		"aE#toeiv$sx5iqeFibRtxW12sXFndLYhrt5UgpFFvzMUUZtFGb#h6oM2xkC2x162ODO$FxH" +
		"W9jk#nEaKfKu4cFS7ixFj5CN87mIpAzKFiuawkfY3s1cOwuIEEO2ToMDZXxso8JEgli7R#7" +
		"bqONlFGBuHRSnK2EOm#Y2HtnxVQ#T0dswBG#fvMESIbYlm7dy0#LuHOdRuRKzzF9qHPSmBp" +
		"0nYJSIOrSLh#wS5jdEHlnzvj93l4HTrdZapnlA$YB7yCJ6MFo76ylV7MFxX6CkFiNzo5cFv" +
		"AJ6MNop6yZDYBB$CwJq#y6SBMKSxxWVezt3t0zfEjiDvNbCIvSLM6X9vBQz48zsKgAvWtng" +
		"A125$EyWi#e8vaONudTWJqKQ8sNcFmznA$7jw8a9loFSJjY2ggADgWI3NRxJ16uxK5dCyib" +
		"Y$QE9cINo25riXlYFMHhDcrrdE1kCDRD48RSQsA#j7qrxZWxQqVhKxLNsK9GL17TsU5TB5W" +
		"ln#Cf9HCbuQHBUc1ExuuexZg6#xXEDlTVy$MJ#1#pJszeIi$tLPTvsYk1Ao4h8IiXAo4h8I" +
		"iXAo4h8IiXAoOYbhVaYoGZwNvDpdND89nJQolTF0kDW9VgRpVf4Pzw$3GFD5W5DINKOFksH" +
		"UNBAjh8danjjGYNycqJXfy81ymygheQDXhzZEkNrtmwEyQ4Q7eM4JcqozLPjJ2reG13VHUc" +
		"M5hhXvIWIoz$lKaYv5u39OlX5TJTVGUPH5sPH3kNG1vT65T15TJ9VGvNG5NKbNKKCwdrgA$" +
		"Rof4X122Ux$Iug0Y7Z3q6tYIhBPfAL5JA68s1LwDfUBNLc4i$YYdU87Qedl8lK8jljawE7o" +
		"mU$n2BRNHo$p$NBwLSa5H#EMNq5n$Vj1#likYVrN13r2#CGJDVXzuidt1$h4K#OL2j#9mEt" +
		"53#ftiIvop7oV5FH2z7o9lrvKMVoDAA9vfyXeteiYce5XoEeSQ1JdWoB#lFEPY4jEYhZazC" +
		"1#wt1rYhYUcM6KVDnMClHo6uFDgW6kUH5hSpXaYssAs3UJ8ovvHiGbQuInXkaVOIlPQ$mou" +
		"f9V#HkRVHInj1yYBlbJn2KFHbgI9qLSClqa#6CONkM3zhw8IpuQSSc8PrhU8#AI$I8kEIpY" +
		"acCZBZabZ9AP4OuIzI8iro32SkT6MAvnXEMkYx1SgmZBjOsmNFi8opqSORb8v$xDaPNpsOc" +
		"7NkxloCfnTuJbIaTOxf88ozqGORcF8omtCi9ouoCiDoVWQOd$5VpD5CRbNzfpMgA$Jo#aqn" +
		"BZp8VzOosD#AkXbUQfQlrZl4zlWV4#FU$bnSUUO4#6eXlVuQ2Nqewx#4PeLn2gTZnDlaVJg" +
		"rUevNmG5F9TJNwfCsP#XiUoQ1CTmObGJx7eKh4h7CpyHZiA#piE$I#sZgqDq5BhsIfM3FmN" +
		"zhE9MxuN9ZGKd$XuqlKXbXlXnHK8jrKlXLj$Bun56nrt5Izk8#qwJpccVlN6whDwofE6KbZ" +
		"zX8#ownMX9zMWcbRTPFs5z7Jsh$AaRtqGL0iFWUpfFlNxNwvakxLf6#gtdvBh21O0GRMGRH" +
		"2nrNnFoTNbSqhkwo4#rnPOsKHmJwmnXz7pR9Yb1oysF5ZwHVW88hTpw6E5jIVgY3Tv#bpac" +
		"FdsE69UmtpVCHondVa$uVk6UV4Z$6zlU9CVV4i9lePlZXRcyEqSoBOEL$0I9nTpAEififxt" +
		"Mp67jPvog8cr2$R$MmmSNFtYt64zfTwJRFYsDegzIDvFCFb1rbZlZxmiEwRtHporz0zhJey" +
		"SitzWZbu0pG$J3eyCRv#suM0FoDoD#Ix9Uw2c5x2kgy6Ewp9Kda$bimUO79kDEHgZk9ntl7" +
		"cEiRPUZQvZQXHdrx3dP8gQe$Ky$2pr$hUtmTzIDRKphS9kKp9K7duPknln#xtpF6PFv44vh" +
		"0NKIC5lSgKWlDF8uohZAYtp$MLt5y#iIvuviwegtTkUZt#ekCfll4lQrC$vOYiCxk88tqcC" +
		"EBaeYP8fXLB9JMca$owo1AKx$ZQl8bMYobI5gc8chavdqpaIQIsgJPdotHBrg3urW4#UIus" +
		"eiUmPpU2$1F$LUqWESfqFBtQgDqlMcmrFpwLyK2liSDhGpNIB$fcz$4J#v65kI#reCarnh3" +
		"zNrfyH47C#5M2l$mJsOq$Hq$GCFKlFqVFq0dMbRjITNgGUz1AzJ3tf5NgLNgFNgHUzGM$IM" +
		"$GszQO#z0wzI#$H#$G1VKXzgH$rfuze07rCdz2dz1aDfC#briO8CWpzV3ZTHNVBNhuUgCQY" +
		"d#lOVuTrEo1Es2lcqWwforGWcqu$qWoQwQXNIQdN2eLRbzmEEyvOQvHEqwYZHQC5iAgkqH9" +
		"eeMkqYUP2YxRIK$w0HhgbTOqsqaAbaPC#XwK#UT0e7tjaNOTsST5eBceeQT5e77MI6gs4hc" +
		"E1YEBcsNcmvJxORItjGlW2v9r6##cl8FLt825xOpxwnCqi6PwTIvrO6Yl6YiV14xP0UzDk#" +
		"V05tMxPy8MngiOyQA1h$myy8TPuCj5kworuVeTrT3npWM4i#bKcGfrW7wFkYMZVtRG7NZcL" +
		"zF#VcyhSw6lws1OQnbzZhiz2j7gshQTjilIqFt3FahqiJzxriMCXKlAXpq4wX94k7$g4Xgy" +
		"TUdJizSb62nJOzCctwBFOgq#kqYTJnlFbM9YBKJiho5YO9tlY81fCG#W8z2aP1tscISyozS" +
		"d6dwvFBZnhh9mny#MVuL4JyJHVjOyUpqN$cHbpZECmKxQsZMs6pQV9Ff69M2Pmv2DcODHHn" +
		"n#ZZiEAqR1ZblIBTEKLdlj4UMVucmgikTBgiSUOWpzhNqnN61VBUJnTsYqRr0VptHPWr4C6" +
		"HjthC#E6iRqDOvR4g2CRAqU9ZhAdvyfvTQ8SEVBYtDQ6dVpRkgwSQ#Ctq#fUduwvLc#RNPX" +
		"fin0x7cokPKaIGIlS$yOQiWrcMcUizyHXBCsppNLjKAlHPqh2ZjcoxsH9hVIKYOvOEqcjd9" +
		"x#70SzT2yqzSX5UnXwT8GUS#KSa2L7KTrNdVLeVvBrM0XqVInww6XrFNG#LhP3jco9Fb8VP" +
		"psoJx8UpUNV5uu8lfRVHFoMlgFlaIyUQ7PQhAh7TQlgVAp2gl#bqucuMSOSNQrOub5xNLlj" +
		"HZ$9bxN7RzmSGIEbvlefLNgGyu9CMQ$UUvlJBF1MSSJO7BLcIfGPeCBED7IfHjksYYF2RBd" +
		"dDp0w8ynLfowwNFsDFF53g9#nZAGDmAYtj3F2zggTgz41tDl74Q6#fkeew$oFEWFXlNGVtK" +
		"yFq8Fq43rCNUWHUfGUmqwwFVwovRqzyiKJOMVKkm4vT5eRn8QTvSuWNwx3quM87qBKbIsyb" +
		"pD2uNETUWWf7q$L#1j$X3JEHEXhAwGPfru9X4L6UFByKAxVIgfQCms4phq5Qu4CZDq54g5Z" +
		"tL962oKpBqZT7RtdtUdolDiuvP1tLTh92Y6VqIlCURZhCwUplVJrQGkl$OEtgCICa0zcolD" +
		"lNw$4lFYVqJkZKPYiQzwuzGWRWW0zmWzbVfnx15Q2iaQi3m8Xf4cd7qAPEbkUfiV1u#YeOr" +
		"jQFUvKylu4bWIM19O4bWIM$p4imNT#eQo0Z1Mal1UoWZHNlOMl874FiEerLf3HNVKY74NC$" +
		"glUGbhxf7sRnWz9NjpMPubwebgFRBqCVTSfGyxrvDlQEwXdsBmv7QE9rvUTjGt7cmtC8FqR" +
		"Gdb1CBUWHHx$BAG7Th9Y3eOKJqfQx1NcgA7V2x6pZjIqL#XsFWr6ZKGzYNeIzIJgITIJg2T" +
		"HJwAUH3s9UWBM4v#JTCVlAtbNwS7MwWL#w#h2FjSgS5whqqx5LRsUPs6irGsPmVTn$lM6Z5" +
		"dcBdmVLn01vioWThQSegZyOM4sKKSNSr0xPmD3aJ07toihcT7rZHQ#7btOtZEGRqGRinUB0" +
		"#Pm#g1zlnoAdSFTB$jWEIcOvKbAHkmmgrFK231x9NJmJtEmSwo$7vcGdv2Va9#Gdv0VcVme" +
		"xmU2pcibzTDpEKzSu2jHfNibUcUKw7zho7d7O9dLGljEhFpqCAe8FRDpmDarAt9ly9FLDgf" +
		"sZQe5d2$zL$FUS15j8N#17rtV#i6BhH3VYV9dhNxhKQlFs695ibcKVMP2i9QMzRKuLNtKit" +
		"TqyD4uzGPBdRbHzkHuzUUi1ExJ67VSHdsVUBI$gN9wMZ#1#xJrzeIiXAo4h8IiXAo4h8IiX" +
		"Ao4h8IiXAo4hF#tiYB$bCC9XSyx3TIES2WD2x9VbATwDA7ef#pcEmrKVBEyJwOfagjt6XXe" +
		"73LO8UqOCHh$tR299c8DFQtQDkYlAnQeUfQ0L8c0zjxeVKz0fkKjsfVIPTutQRUKRzk#bgw" +
		"J$oNbHhe99V9ecIeVIea$$MeDY8Z#ZTWcrczM58xe2vdFU6jgf3uVjK#1lBWZz$aYz9OYb7" +
		"p71x$78tm#Kp3VcoLZe#Wht2qUuHabYjRhG$d4q$zxESOeuV#9frKFvd9ehyNodbS4p7kbX" +
		"0vH$4InoEDcD4RU$pKqqT3dL1ff0dgpTX8GHcbM3Q3D3x6t6YqxlRmXtgqKNS$zVsFjHCb4" +
		"oTEnPA9SeboYNABSgLREyUmZ#9ifL1w$qjxJalmGppvkCivyr5sL1hKBiJHJzShtwL5Rutr" +
		"wNZHUV3J9$EPZSDq2wsLgXztm#VHREDgXb5UlaClP41JwNSsIGJ1xBGiVqIsR6V8fLWvsx#" +
		"5Wza5XVyTX00#pj8cbfMRJ7Fe9V1xDDt67xK#c9$KEpvC2uxRffN1xpafL3XjkbRR8UngvN" +
		"AMieb#i#2BNAq9Fyj5Drbz8JwTPlfwaBBiqF0IoBnJY4yO9jytQ#JJBVaekVQ8jRBSqP1j4" +
		"R3NVKtA5mEUKtDT3V7Bh$pFCjDgQM6CElUVv#8R5WwLVX8yWSZk7F5ROVCC#LaICsHWPuuV" +
		"P9r$4TjRFM2CP1LIzkscFDtp03xsb12F6V9x6qJS2sJRm5Rp4oSKSodfAvlEUzrinXpDFE7" +
		"$UA3#j2$x6CJNU1LvF2U5vFvlks$flVOJt4qnQ3FcoFuBh8qYMjN$ulRyztzO$UijFw$RIL" +
		"eyCRv#suQ0HHbd69TV$NvYEmyZJM#NPgl0RxusN8pLoslFaU#OqEKTxFkjShg$hB7Cqyj1g" +
		"OxIdTU3RbPHyqogqJSdmv5bEnsHE9KENGjlaVoPPv1afaAUad3rb7lqp5vbljO#$c0YDMkk" +
		"eqajzygtsU8hY5zXBEr$KIl5RGEk8NELxoF$oclm2RkSHkSk1zm5j0nr3$47zUIo8IFxltZ" +
		"ECiEijCvt#CdZDBucQdwt2Yn6#2$mWEB3MAa$Ku2Bm2y47nmgZF#PQzw3#gMOy3JQhzIOmt" +
		"5vusRDlGDbVaFzhH5Rf$#yNuTN6inPbzLPH#fz5nEiOuU8h3CupaVS4yZLIyIiCNliSt7u4" +
		"Rubd#KW$7tGTskr3f3sAEZAL$3U8gdM2dTM$h7UZVIkAUDdjP15ieF$$uubcdDvKwPDXfys" +
		"mpmI4TQxiNKt$dzDbZF3Pho7FTYESabrqBAvhYAgVPuHRB3HuPWh2MubArFVFpoucgdyKvM" +
		"u1lOys0sRNC2NhE$XUSQLJ5vNs9#GrG60MkbKUull02#mogtrjyAGI1g$VNyLBAfr7gxet6" +
		"BmY$2IfBeO6zBkaL50ZrDiE$6fJPb9prDiQPMgXFeMFJKTuhRtkIj0dwLcYxEtWju5UXQmn" +
		"u1sLBV2CFw7i$J5a9C4kPV6yawe7RLcwkKNUnofzji7Bf2Ey4FG5Q15aQ#13LPuba5SI$3K" +
		"LNsdmOZSYFCu8bq2Pf1bsp2cGmKQXtlVmRBpzMPdxCMwYhoPFnJFOEXbZKh5121zGPT5dUK" +
		"yLjenlIOkjSeoqqjSfksrLyI$jpvFsGCP#Itofulh$1KUVJrfkUVOpwbslmeTn6m2#olByg" +
		"1dcFcsKEH1jlTeNdpzUkWFwmyUI$WRz0x$v7VvscP8luETt6k6ScifMCs6VXeYZNPFXByaO" +
		"#ueT06zXF4$6M7vc9N2qHt8Nu9W3R9YVajzGpuSYRHVIDYBVZIfj6FnPbzMRw1ozBEQjSou" +
		"5xuayokx9eudgb4AvJGZ$gDAw0QlgXtmfukjK#ay6hvEDTa3zwPMDU2NOaAEVffG0$cN81$" +
		"zDoS3OhDUrqswNvDqWj9KBprWomdjL#ZupJmhcs1mT3zek1JvJ$0Fm2otFSr3t8oeCEUusa" +
		"7SvT7i6yLl1qKOfrqB7YShUxm0p#gJh2gJjLZgyZ7OyWgcacYct#72Kmtnn3lmZfJquvlUK" +
		"cv2dZV4y2#NhZ82SAv7skf83#sHrHdoAgkjTfC4UBinbP#qtqkfMH9uXH6Lh676t6WDIMc5" +
		"Ul1bj15kcO4xAceHoRH6#7cE3ZcSA$0Br5qSVQ#ZZXmG$gNI74QwECRhI4HK#P72N6gTggF" +
		"am9yyiMw89wlWKpp1kbe1VfM0yA0DVIO4FbSOuLVevX7LRGDUKyS1$CR01IqNCvIdVMjfXF" +
		"NI1VwTy3zgeqg13oWyeSn$A07T5#5pAN4lxg$aw5MsV2fz9nPYP2jzCXVwfq3iLzaW5hjJR" +
		"GUX3gR17Ajek5UsHsW64Vf6AzKJTjw7ZHDWKusGgnlwoRu73Jr8n1gR2ddM1EoaDwPZxKpz" +
		"1lLXFb3s4C7mZzNFG2j1Aed8OWrBHDzqkb5c3CZe6zADK#9$x4gJfOoJQiXnmkE6BRlX0jL" +
		"xWyC4Q#fnp0JZqTMFSBmS$Sv#BSVKgb46xrS2OvuRjQc8CT3#4vxF1CIOceRvwDS7H$kKmD" +
		"hWVHXnpNpRyf7nznB7kgucu6#rGim0S$R4yz7R3TDcGKm$hc2JOgJpqTR#4U3#aOoukFmzn" +
		"#7NI5gJfO#wTI3kEDBH9FQHbuta5u7HFKtxeNQSPyVfkf2qmuvKiRUrUhl90lvpkrdA54Un" +
		"H30GxiBd#px8wGJPiaDPOvOLTqvg1e6UQfuzZ$2uEVTneYxGM88m$gV3Rj9R6ymhz4RuQ$W" +
		"3$JOEzqj3tAwWv9WrsJDjfrfVsakBmjxJhZN0kx9Y6SJLjkX5FWi#asUOvfVlD1c$kDdZ5Q" +
		"rL##5VQJ9Mc#dPQNwBAwMRPOhd01n#iZdP8suiu$3NDCb#niehxpA4fMyEnTJW4VyWsmwb3" +
		"pJ1zPF2cM0$muofS3ss0zN9JZ7t5OUEcs6iKdm$U7NnHh33wOswASQ#KfJq9VjyKur#fFI6" +
		"KHNylVHau#cNfAusqSxiQ$0pCWtIv4MQrpJBrppF3pU37PLGU6cJmQf#hPxNnh8EPbs6UE$" +
		"SpCrwcixxlCECSVknwAXOsEfK8Dj3t4GtDEBseqdyrECSOsAYu#RnwBJFSg8uPThcAZeKmP" +
		"pIwt0XNKEkRPbW$L6YkZus1o#HSOy7GrFuijQv$$aQF6xo4wi#LZjgVkwRvnEVub1$gW$az" +
		"WsTriPHv9K2zQlofRB5P#SFsFEmg9Mk#HTPgCzneaoNl29LteLt66TCzOMp7DzcV5QjZZoT" +
		"PiEXpACEuuJgXucfDbPnlvabzm5yljilWEP$wFolsdC5B7BFKyxmPpXblXdDBcM7Z$CGkAw" +
		"UlJtoKVvuI8osuDXkSZyGwSeXlNai#h15o#WHv$gSztWnhd0fNEEMtw3367gy$m0nph5iQg" +
		"N6xGWU35rFxwHoB7x5ZTXcLRpV3ZSlvrzbOzPdAlIprgZrsTRLtQF2goZF9KgwjmPDK7lty" +
		"9ccDmZ3Jp9VSNEL$LiLN6To5$AvoHhXvNJC$lyiNenrlymr1dhriaRFG$tbA2pESyulIROZ" +
		"YEvMEEomwzZLu5NLUsEnvs1xhj2ejpJmkxB#Jfs4jdsB46whrHnMbRuKd86UyIbFzhndMTX" +
		"MmfwYonbBNCeDNLUkGPbZhLi0QhwhQA#OCikY1lPJBSsPGtaol#e32zAIoWMtTePvrK$NfU" +
		"sjr$b5$jZrFWyKA#tB$yatIz7sD4Sv#slUvcQyPzb0LC5$cJFT$vXwWi7VmAOCrUaLiadAM" +
		"szDTBpZL4mu1Uss3fwkzTBhF#D14xUNJrvjfAG76gAeVMSfq2b2Fid79iysq#gqDtd2uulD" +
		"LdliDdgFMjWtt6VpS3FNSEoP0hZhxAQdsW#TXhrKHQxYC75KcI$5R3PwXvkMAs5SqKVlc3B" +
		"NVFmzxuefTiCQopDDDLDyirKhbkH1viBSgrTzNHqkP0$Quos$EXHpiMIgETP8HZ0AV6pN$L" +
		"zzpcN6ttnnZfBFvzZYts3Bd8bLsaPdMy2fBlUxWk1ecOQtlDkDfnGBdQw36WufpbLnb$xGC" +
		"2qvBsBNC8hENukeyACrodkOgJpwNE5ES8KgBYyL5uaAH9ouGvujSaIDQYEOYMsI9yqGpqLI" +
		"SBQgBQaAM5LZvYZI1lRg07ucXudNSNmMzekJr51r51t6Bk5cq4Qr5At6Jk57S8AuNrubhnJ" +
		"NYQj5IN2Mk55U8oyLbub9nYUWl#WdiaCHhucNnai0UGlGGxKKxqLRSAUuGjulRnAtQUnh6F" +
		"UqTNRxskVOfyeoNTOq3ZP6XqQApw2JkLHXwYQxY2V6W31U8DoH$H8#BV750$2NsYtrYhzWZ" +
		"TejTOgVO8RQBRU9FyOVOAhQ8tyLcyPlO93QA3MAzM2VMYZNYLx5Q$29MYP$5Ih52B1VBn5A" +
		"nHFmdJeZZufZuLnmL$uY$nH5nM1mI1yLiCKlC4O#9Bk8BMVCGCHZtGQ212j$3yhvOtXT0fx" +
		"$4u#9HqKsy89uNpubdnJFYQV6KU5BC5$F4NF6Jc8vyKyKF0YEx#1OqLdmbHecHrdRKFfRIq" +
		"3#r$RRqVQAog0I#7BGCX15MMm92xTeYkozeOqGPRtYXw8hxZzeqRQfFhg$b$GTjd8g$AU#l" +
		"QV023LwW3H0dBBa$alT96dPcsdSIurcYBCBVYAgYYbV6szhhMazns5PFVvcx52XT5DSEQmU" +
		"qGo9Pe0S95uY3c7PS#qVc$LixWXm7TKiXfcb79VzFnKze$uffudlndNPOZ133nPTIyZ3nev" +
		"WfPcYtQhTenqG9f7I5hUTAQq#HzybYefZWetrVd$XkRsWN#LpQTczelZOFzvzaU8usLvib4" +
		"PJJPlgL#L1aY9AMEB1gNsZ3R7a#q6RBqZEq7Jwbjtb3MnNVBDpQIcs59S#VHez0w0$5V$S#" +
		"swBuRw2VPMYSWKQqCoM81$J#9KCFoVjzeCz0Ui$yM0mG7ubF4Eecds4K5srbQ9wORq7nbZR" +
		"H6$xUfiCRsbZSzth695bMZaaofCOakzwwXtl3NQKK7w#rjbJHBuy5W#P1xn8BjJOQvb7nkR" +
		"XVt0D#jxWBI7Jhl2W#51#8zyLxubtnZkWZUektnLlYJONrUUrPxHdjQHLxogl3a$Owj7jiC" +
		"JdYQVThzsdtQ0$8yAFgoTtoVfVMMUkaTKG8UmkjFKYsgeRsqUxKRiFzTkqEcyJdCC#COSM9" +
		"WJZb4mkBnfs2z1AvG5pnP7eUQLPw0lIueYT1Ju5wW31EWnYzW7869TD6o34eIT8IX9SWppB" +
		"mhY3z4zArY7V5ipNWQr1kXIH6qnNzQA4PU3ONvPv1#1c43u8VHFoG91Sj15y8$Y$I$mN$4r" +
		"od8HOw70QzBSb5hqAkGIv5oI2co9F6wEKmw3b9II0NYAkuIr9FfFS4VmLfh#1PBnibWLmo$" +
		"1gUwrIWwFL2Q508D3XCUhS8z7KHg3VeAmjzgUX3HUCLlGVIH#gVmVl0RXDXjua8ZrKq56d3" +
		"m7NQXl0sy7MWTn1UAedHB4cSHeBhD1hXqNWs6cs1cG34Q0p2Ov0sXbBe6FWnf1r1sX7atOx" +
		"mTgHD0b#9$2l19o5z1EW7qFkW3oWLb4pVW0#Kb4pwt3e1UGTI6gWOoAsUURWP$bvICYWDL0" +
		"paLcaUReOtexxLaAjJNuJx0bi$y7xW$S7xWty4MT#2FWVfyz$lo7iSwSSHtu7m3kHR3$t#H" +
		"je0q7UWdKZNwOIYZv7sYPUIw1#KtO9o$#6PJfyY$0KmOQSFOjGDuQtWFqaYcWzka8lcIM8q" +
		"1pGRD1KqKnBHMtZs1i8wQP9SD1bwJaROu6uwYl0KyE6mpukWNn5$Kn87kGZhFn2ZKS0u2cM" +
		"wWtS7$mLfgoHnMWI#oE3CZP7V3Pu2IWLXtGzYB1cKXdm2#VHlxUsoq7xOO3#v6B9Qo2M9uV" +
		"bkuDY3SdkGRmDnnf7EaRuNwNl13u0MW$x2SuDS8Av83oSn5ygvm9DGDWbvzo5z7$YpeAT1c" +
		"q1$W3xxFqSzkg4=");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			{
					
			return new JSParametersNode();
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSRestElementNode e = (JSRestElementNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e COMMA BindingRestElement.r RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final JSRestElementNode r = (JSRestElementNode) _symbol_r.value;
					
			return new JSParametersNode(e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e);
			}
			e.addChild(n);
			return new JSArrayNode(l, r, e);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 76: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 83: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 87: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 91: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 98: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 99: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 100: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 101: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 119: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 120: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 121: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 122: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 123: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 124: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 127: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 128: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 130: // PrimaryExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 131: // PrimaryExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 142: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 143: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 147: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 151: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 152: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 153: // CallExpression = SUPER.s Arguments.r
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(new JSIdentifierNode(s), r);
			}
			case 154: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 155: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 156: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 205: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 220: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 221: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 234: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 235: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 236: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 239: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 242: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 243: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 245: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 246: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 247: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 249: // VariableDeclaration = BindingPattern.p Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 252: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 253: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 254: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 257: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			if (e == null && n == null) {
				return new JSArrayNode(l, r);
			}
			JSElementsNode node;
			if (e != null) {
				node = new JSElementsNode(e);
				if (n != null) {
					node.addChild(n);
				}
			} else {
				node = new JSElementsNode(n);
			}
			return new JSArrayNode(l, r, node);
			}
			case 258: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 259: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			if (e != null) {
				n.addChild(e);
			}
			// TODO Add null node to elision here?
			if (z != null) {
				n.addChild(z);
			}
			return new JSArrayNode(l, r, n);
			}
			case 260: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 261: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 262: // BindingElementList = BindingElementList.l COMMA opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 4];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e != null) {
				l.addChild(e);
			}
			l.addChild(elem);
			return l;
			}
			case 263: // BindingElementList = opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e == null) {
				return new JSElementsNode(elem);
			}
			return new JSElementsNode(e, elem);
			}
			case 265: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 269: // BindingElement = BindingPattern.p opt$Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			if (i == null) {
				return new JSDestructuringNode(p);
			}
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 270: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 271: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 272: // ExpressionStatement = Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 273: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 274: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 275: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 276: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 277: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 280: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 281: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 282: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 283: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 284: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 285: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 286: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 287: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 288: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 289: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 290: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 291: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 292: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 293: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 294: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 295: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 296: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 297: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 298: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 299: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 300: // ForDeclaration = LetOrConst.v ForBinding.l
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final JSNode l = (JSNode) _symbol_l.value;
					
			return new JSVarNode(v, l);
			}
			case 301: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 303: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 304: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 305: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 306: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 307: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 308: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 309: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 310: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 311: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 315: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 316: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 317: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 318: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 319: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 320: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 321: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 326: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 327: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 328: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 329: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 330: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 331: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 332: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 335: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 338: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 340: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 341: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 342: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 344: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 345: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 346: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 350: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 351: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 352: // ArrowFunction = ArrowParameters.p ARROW ConciseBody.body
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSParametersNode p = (JSParametersNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 3];
					final JSNode body = (JSNode) _symbol_body.value;
					
			return new JSArrowFunctionNode(p, body);
			}
			case 353: // ArrowParameters = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSParametersNode(new JSIdentifierNode(i));
			}
			case 357: // MethodDefinition = Identifier.ident LPAREN StrictFormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 1];
					final Symbol _symbol_params = _symbols[offset + 3];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			// TODO Use JSNameValuePairNode to hold name with function as value?
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 359: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 360: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 362: // GeneratorMethod = STAR PropertyName.n LPAREN StrictFormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSGeneratorFunctionNode(n, params, body);
			}
			case 363: // GeneratorDeclaration = FUNCTION STAR Identifier.i LPAREN FormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol i = _symbols[offset + 3];
					final Symbol _symbol_params = _symbols[offset + 5];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 8];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSGeneratorFunctionNode(new JSIdentifierNode(i), params, body);
			}
			case 364: // GeneratorExpression = FUNCTION.f STAR opt$Identifier.i LPAREN FormalParameters.params RPAREN LCURLY GeneratorBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 3];
					final Symbol _symbol_params = _symbols[offset + 5];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 8];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSNode name;
			if (i != null) {
				name = new JSIdentifierNode(i);
			} else {
				name = new JSEmptyNode(f);
			}
			return new JSGeneratorFunctionNode(name, params, body);
			}
			case 366: // YieldExpression = YIELD.y
			{
					final Symbol y = _symbols[offset + 1];
					
			return new JSYieldNode(y);
			}
			case 367: // YieldExpression = YIELD.y SingleExpression.e
			{
					final Symbol y = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSYieldNode(y, e);
			}
			case 368: // YieldExpression = YIELD.y STAR.s SingleExpression.e
			{
					final Symbol y = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSYieldNode(y, s, e);
			}
			case 371: // ClassDeclaration = CLASS Identifier.i LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSIdentifierNode name = new JSIdentifierNode(i);
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			
			return new JSClassNode(name, body);
			}
			case 372: // ClassDeclaration = CLASS Identifier.i EXTENDS SingleExpression.h LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_h = _symbols[offset + 4];
					final JSNode h = (JSNode) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSIdentifierNode name = new JSIdentifierNode(i);
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			
			return new JSClassNode(name, h, body);
			}
			case 373: // ClassExpression = CLASS opt$Identifier.i LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 4];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			if (i != null) {
				JSIdentifierNode name = new JSIdentifierNode(i);
				return new JSClassNode(name, body);
			}
			return new JSClassNode(body);
			}
			case 374: // ClassExpression = CLASS opt$Identifier.i EXTENDS SingleExpression.h LCURLY opt$ClassBody.b RCURLY
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_h = _symbols[offset + 4];
					final JSNode h = (JSNode) _symbol_h.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final ArrayList _list_b = (ArrayList) _symbol_b.value;
					final JSNode[] b = _list_b == null ? new JSNode[0] : (JSNode[]) _list_b.toArray(new JSNode[_list_b.size()]);
					
			JSStatementsNode body;
			if (b != null) {
				body = new JSStatementsNode(b);
			} else {
				body = new JSStatementsNode();
			}
			if (i != null) {
				JSIdentifierNode name = new JSIdentifierNode(i);
				return new JSClassNode(name, h, body);
			}
			return new JSClassNode(h, body);
			}
			case 376: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 377: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 379: // ClassElement = STATIC MethodDefinition.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			if (d instanceof JSFunctionNode) {
				((JSFunctionNode)d).setStatic();
			} else if (d instanceof JSNameValuePairNode) {
				((JSNameValuePairNode)d).setStatic();
			}
			return d;
			}
			case 383: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 387: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 389: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 390: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 394: // ImportDeclaration = IMPORT ImportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] clauses = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSImportNode(clauses, f);
			}
			case 395: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 396: // ImportClause = ImportedDefaultBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 397: // ImportClause = NameSpaceImport.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 398: // ImportClause = NamedImports.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 399: // ImportClause = ImportedDefaultBinding.i COMMA NameSpaceImport.n
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSImportSpecifierNode n = (JSImportSpecifierNode) _symbol_n.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(n);
			return new Symbol(nodes);
			}
			case 400: // ImportClause = ImportedDefaultBinding.i COMMA NamedImports.l
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 401: // ImportedDefaultBinding = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 402: // NameSpaceImport = STAR.s AS ImportedBinding.i
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(s, i);
			}
			case 403: // NamedImports = LCURLY RCURLY
			{
					
			return new JSNamedImportsNode();
			}
			case 404: // NamedImports = LCURLY ImportsList.l opt$COMMA RCURLY
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSImportSpecifierNode[] l = _list_l == null ? new JSImportSpecifierNode[0] : (JSImportSpecifierNode[]) _list_l.toArray(new JSImportSpecifierNode[_list_l.size()]);
					
			return new JSNamedImportsNode(l);
			}
			case 406: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 407: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 408: // ImportSpecifier = IdentifierName.i AS ImportedBinding.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_alias = _symbols[offset + 3];
					final JSIdentifierNode alias = (JSIdentifierNode) _symbol_alias.value;
					
			return new JSImportSpecifierNode(new JSIdentifierNode(i), alias);
			}
			case 409: // ImportSpecifier = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 411: // ImportedBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 412: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 413: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 414: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 415: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 416: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 417: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSFunctionNode d = (JSFunctionNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 418: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 419: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 421: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 422: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 423: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 424: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 232: // opt$StatementList = 
			case 255: // opt$BindingRestElement = 
			case 267: // opt$Initializer = 
			case 278: // opt$Expression = 
			case 312: // opt$CaseClauses = 
			case 336: // opt$Identifier = 
			case 369: // opt$ClassBody = 
			case 381: // opt$ScriptBody = 
			case 385: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 84: // PropertyDefinition = MethodDefinition
			case 85: // PropertyName = LiteralPropertyName
			case 86: // PropertyName = ComputedPropertyName
			case 88: // LiteralPropertyName = StringLiteral
			case 89: // LiteralPropertyName = NumericLiteral
			case 92: // TemplateLiteral = NoSubstitutionTemplate
			case 94: // TemplateSpans = TemplateTail
			case 102: // ArgumentListItem = SingleExpression
			case 103: // ArgumentListItem = SpreadElement
			case 104: // MultiplicativeOperator = STAR
			case 105: // MultiplicativeOperator = FORWARD_SLASH
			case 106: // MultiplicativeOperator = PERCENT
			case 107: // AssignmentOperator = STAR_EQUAL
			case 108: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 109: // AssignmentOperator = PERCENT_EQUAL
			case 110: // AssignmentOperator = PLUS_EQUAL
			case 111: // AssignmentOperator = MINUS_EQUAL
			case 112: // AssignmentOperator = LESS_LESS_EQUAL
			case 113: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 114: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 115: // AssignmentOperator = AMPERSAND_EQUAL
			case 116: // AssignmentOperator = CARET_EQUAL
			case 117: // AssignmentOperator = PIPE_EQUAL
			case 118: // Expression = SingleExpression
			case 125: // SingleExpression = YieldExpression
			case 126: // SingleExpression = ArrowFunction
			case 129: // SingleExpression = LeftHandSideExpression
			case 132: // PrimaryExpression = Literal
			case 133: // PrimaryExpression = ArrayLiteral
			case 134: // PrimaryExpression = ObjectLiteral
			case 135: // PrimaryExpression = FunctionExpression
			case 136: // PrimaryExpression = ClassExpression
			case 137: // PrimaryExpression = GeneratorExpression
			case 138: // PrimaryExpression = RegularExpressionLiteral
			case 139: // PrimaryExpression = TemplateLiteral
			case 140: // PrimaryExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 141: // MemberExpression = PrimaryExpression
			case 144: // MemberExpression = MemberExpression.l TemplateLiteral
			case 145: // MemberExpression = SuperProperty
			case 150: // NewExpression = MemberExpression
			case 158: // LeftHandSideExpression = NewExpression
			case 159: // LeftHandSideExpression = CallExpression
			case 160: // PostUnaryOperator = PLUS_PLUS
			case 161: // PostUnaryOperator = MINUS_MINUS
			case 162: // PreUnaryOperator = PostUnaryOperator
			case 163: // PreUnaryOperator = DELETE
			case 164: // PreUnaryOperator = VOID
			case 165: // PreUnaryOperator = TYPEOF
			case 166: // PreUnaryOperator = PLUS
			case 167: // PreUnaryOperator = MINUS
			case 168: // PreUnaryOperator = TILDE
			case 169: // PreUnaryOperator = EXCLAMATION
			case 170: // BinaryArithmeticOperator = MultiplicativeOperator
			case 171: // BinaryArithmeticOperator = PIPE
			case 172: // BinaryArithmeticOperator = CARET
			case 173: // BinaryArithmeticOperator = AMPERSAND
			case 174: // BinaryArithmeticOperator = PLUS
			case 175: // BinaryArithmeticOperator = MINUS
			case 176: // BinaryArithmeticOperator = LESS_LESS
			case 177: // BinaryArithmeticOperator = GREATER_GREATER
			case 178: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 179: // BinaryBooleanOperator = PIPE_PIPE
			case 180: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 181: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 182: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 183: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 184: // BinaryBooleanOperator = EQUAL_EQUAL
			case 185: // BinaryBooleanOperator = IN
			case 186: // BinaryBooleanOperator = INSTANCEOF
			case 187: // BinaryBooleanOperator = LESS
			case 188: // BinaryBooleanOperator = GREATER
			case 189: // BinaryBooleanOperator = LESS_EQUAL
			case 190: // BinaryBooleanOperator = GREATER_EQUAL
			case 191: // Statement = BlockStatement
			case 192: // Statement = VariableStatement
			case 193: // Statement = EmptyStatement
			case 194: // Statement = ExpressionStatement
			case 195: // Statement = IfStatement
			case 196: // Statement = BreakableStatement
			case 197: // Statement = ContinueStatement
			case 198: // Statement = BreakStatement
			case 199: // Statement = ReturnStatement
			case 200: // Statement = WithStatement
			case 201: // Statement = LabelledStatement
			case 202: // Statement = ThrowStatement
			case 203: // Statement = TryStatement
			case 204: // Statement = DebuggerStatement
			case 206: // Statement_NoIf = BlockStatement
			case 207: // Statement_NoIf = VariableStatement
			case 208: // Statement_NoIf = EmptyStatement
			case 209: // Statement_NoIf = ExpressionStatement
			case 210: // Statement_NoIf = IfStatement_NoIf
			case 211: // Statement_NoIf = BreakableStatement_NoIf
			case 212: // Statement_NoIf = ContinueStatement
			case 213: // Statement_NoIf = BreakStatement
			case 214: // Statement_NoIf = ReturnStatement
			case 215: // Statement_NoIf = WithStatement_NoIf
			case 216: // Statement_NoIf = LabelledStatement_NoIf
			case 217: // Statement_NoIf = ThrowStatement
			case 218: // Statement_NoIf = TryStatement
			case 219: // Statement_NoIf = DebuggerStatement
			case 222: // Declaration = HoistableDeclaration
			case 223: // Declaration = ClassDeclaration
			case 224: // Declaration = LexicalDeclaration
			case 225: // HoistableDeclaration = FunctionDeclaration
			case 226: // HoistableDeclaration = GeneratorDeclaration
			case 227: // BreakableStatement = IterationStatement
			case 228: // BreakableStatement = SwitchStatement
			case 229: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 230: // BreakableStatement_NoIf = SwitchStatement
			case 231: // BlockStatement = Block
			case 233: // opt$StatementList = StatementList
			case 237: // StatementListItem = Statement
			case 238: // StatementListItem = Declaration
			case 240: // LetOrConst = LET
			case 241: // LetOrConst = CONST
			case 244: // LexicalBinding = VariableDeclaration
			case 248: // VariableDeclaration = SingleNameBinding
			case 250: // BindingPattern = ObjectBindingPattern
			case 251: // BindingPattern = ArrayBindingPattern
			case 256: // opt$BindingRestElement = BindingRestElement
			case 264: // BindingProperty = SingleNameBinding
			case 266: // BindingElement = SingleNameBinding
			case 268: // opt$Initializer = Initializer
			case 279: // opt$Expression = Expression
			case 302: // ForBinding = BindingPattern
			case 313: // opt$CaseClauses = CaseClauses
			case 322: // LabelledItem = Statement
			case 323: // LabelledItem = FunctionDeclaration
			case 324: // LabelledItem_NoIf = Statement_NoIf
			case 325: // LabelledItem_NoIf = FunctionDeclaration
			case 333: // CatchParameter = BindingPattern
			case 337: // opt$Identifier = Identifier
			case 339: // StrictFormalParameters = FormalParameters
			case 343: // FormalParameterList = FormalsList.l
			case 347: // FunctionRestParameter = BindingRestElement
			case 348: // FormalParameter = BindingElement
			case 349: // FunctionBody = FunctionStatementList
			case 354: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 355: // ConciseBody = SingleExpression
			case 358: // MethodDefinition = GeneratorMethod
			case 361: // PropertySetParameterList = FormalParameter
			case 365: // GeneratorBody = FunctionBody
			case 370: // opt$ClassBody = ClassBody
			case 375: // ClassBody = ClassElementList
			case 378: // ClassElement = MethodDefinition
			case 380: // ClassElement = EmptyStatement
			case 382: // opt$ScriptBody = ScriptBody
			case 384: // ScriptBody = StatementList
			case 386: // opt$ModuleBody = ModuleBody
			case 388: // ModuleBody = ModuleItemList
			case 391: // ModuleItem = ImportDeclaration
			case 392: // ModuleItem = ExportDeclaration
			case 393: // ModuleItem = StatementListItem
			case 410: // ModuleSpecifier = STRING
			case 425: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 426: // TemplateHead = TEMPLATE_HEAD
			case 427: // TemplateMiddle = TEMPLATE_MIDDLE
			case 428: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 90: // ComputedPropertyName = LBRACKET SingleExpression.e RBRACKET
			case 95: // TemplateSpans = TemplateMiddleList TemplateTail
			case 96: // TemplateMiddleList = TemplateMiddle Expression
			case 157: // CallExpression = CallExpression TemplateLiteral
			case 314: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 334: // DebuggerStatement = DEBUGGER SEMICOLON
			case 356: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 405: // FromClause = FROM ModuleSpecifier.s
			case 420: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 93: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 97: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 146: // MemberExpression = NEW DOT TARGET
			case 149: // SuperProperty = SUPER DOT IdentifierName
			{
				return _symbols[offset + 3];
			}
			case 148: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			{
				return _symbols[offset + 4];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
