package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 100;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy54KNVpENooL0QA9q491GbHPC8cBlNL1HfAdOHHCRYY3OfTaeYeMcqWIiW8eqQGO" +
		"f8YXDEaW74L3gplUVsRcxtUkvt9tYTvlVspVrpV#zUTFsxZP4vvIYiVGxUuu#fS$eOnfDOs" +
		"WSVKBZQGBhHRFPYzI4cj8jr8QVma$bLNaz#f8#fozuQTwGdyNgi4nMbzLZjQajtKgtqJv#9" +
		"c$4o$8ol1nlpEloahmuhyBhyrAyWH3KZmOBW$MZksWGp#0bU7dZEVgLVg4Lj9Acq7AQJ3re" +
		"CIsXdsWf$KpBU0NwaHRoq#W5Uerwqq1wdTvWS#X5Uexw9mQpyRp4J9bMp5GxMioy6BNYJNX" +
		"JzW9xNjTzmbgN7fTrwI5wcgwdgwaBTQ1hwJhwWwfI2KgdufH19QaKbQOoL9PEeN9qAfr6vQ" +
		"a2LQGZT9HEbrgpiwaAkuagiMnQpIxZawWo5MFTw5vMIdnEDQWZJU5VeDrfj9VkfysqXRvZB" +
		"$4l#TcqYVRGLbXr54qCODMEj95r0UQlKBTpdFLucFtAp$7gmJvZbz5SgGVDOvDOAVu97qTt" +
		"Qopti6Qc7dmyhqup#KJeyMquFLWJ#eQcKcTsAhNowSjOwZ69zjC3NZru9Nuf7L9wvBDJ#0#" +
		"iCkKZ55SCx2AqiTMBmL6SdyjI9GO#Zy#7BQlJ8yOmzYixWvt3Mf2BfR4BsPUKZ$Gd#Hp49h" +
		"66SgmGftnZA7kNp#RV8zHAze4QG$6rO7V#6TMrU7GAfP9JMV1PTXRGjsINi7RGxoxs9BkJz" +
		"h9XR09yNLfr8BiTV4zmFs2LuS$rg04rOs$5kGzk0KQB5eW1eHgN3x5NMIds3MjZZ6NTsEsi" +
		"W6PYN1O8ngQnts7zWUY9LQ6qu9zwjFW#pbfypjRoIXOjbi3AxKnl5lkXnM7ECBz0CxuIjZU" +
		"rMC5hyjlOG5uhT5$GKz0YaxMbxzboesVGSfZPQPLxPcTJgHlDe4Ncp4wjwMQwoNzcfshiVJ" +
		"Q23Q8$MMasZewHO0vMasMn#bIBDQSpU2$#9slFEh2vB8VVmH$cZwc#oUVB#I#y6kzD1Kgdc" +
		"goos64PoJlvfRo0AlC3cDc3e2L7VFj3x9PZrD8VQNmLVyVi3pu2$O7#uPTAQ$2p#NhQYzd$" +
		"1xwNRQS5j8iVmrZV4sT$sO8nsjqoyp3Q3WnovZc7Th1Ij9DsyytygF4X7Q2$uI#zw0HzI1#" +
		"HmJ8OOppU#AYdyGDBjzYlE2l1IgfHMOPLWVsgiUgi1clC6c2cELFYOrCaFkvWfoErKRpnyS" +
		"fCCCjgpfgpN7QkmdSUkmxuRc0tijRiFeoRxfIfyEKfV7rPAq58YpU#p$ahx2aBlcV4Q35Au" +
		"RkKNOFLhJjx3NQAxnXOplgnqopZSYvxWo$phcxiJJR06CZUPk#mzzW7s2a4dO6m1dPX8zb7" +
		"R0piE4hQaLt1BZSUPqtYF4gUO9UnLonM$8HzoYOgAvx6fc2KR9Dx6$O5#mgnoQ4qO8z3WvV" +
		"PT3OJ6ipoQ32CVHldSLGNkypE5Wrc6#EDSL83OupniKU3dzZFR1dx9MmVhCIgifvjX4VNvX" +
		"VfbMsLqJqnQmA$cErd1#HwO4p078Gr8OIzSx5cdH2xn3Qi4$l5htmdQy0Bn3AnbCtXTqLhS" +
		"Nu5gy0lvrVogwJ5#RNyEdwzj3XlnLlpc$ZDT8Itvulu#M8nloSODdullvfVms$WD$Bxukoz" +
		"vSKYuntB#ClXv$4BbFSsvXTIcl6LyILl8vgA9gAnQ2JEudSRBoIc9yMPlADeA1g8#gAUg1k" +
		"w9qKTraLaYjhY37wxiKTKCXOOCuofndUYCfjZz4gGvpt87#AF6Ejvlh6EFnaQByTkYNVZtV" +
		"dpnbh#8d$J#8rw6QlKY0#w6uajMeSJPu1V#G0#rXXXh0cDrbZDkXWhZ9N6B$mheuVnBBptH" +
		"xwGB#4V9Wej7yON6myQz$2bnaWZFmpQFDXsXV6mqOLwyRLgFLrdFCGtOOSx9xvZoU4m7ZCU" +
		"jOobHNmttwFMidty3qfBaAs4WnpSaU98CqPW5nJ2LevYncT1CIMePzbqqfSnWYWKMfJunz5" +
		"gg3SGYGecMZw5Vys$uT$ogVmxFerFvpFuJ3uhk0xoYhSVwbQyPsxpakSAUIN83uaYxjaGra" +
		"fmprhHHd6T76ZvLjmIkDRmZVAvdaQhLd9s4I9RBP22F0bMDhsIZUHRU7EWVOlUfY7qdiRHX" +
		"uRIS8b3h4Ifbkm2Swz9msW4lKbzQG2Df7Vf5NgUtg7twLNwW6zGJuA9zHEVqI1wcLv2#2An" +
		"WRRoIWf3O2yyW7d7yYIODm$zz9fdimk06ISeTZ7L3OQPVSSUvginZwmJwrct49Ypt9Zbqsi" +
		"JixvCRQM5#h7pBRtxgqfxpFRqkgq7SoBcz0VG$eCAXNuk4t2iB68BRV4VGGjKg6qYnrA4QE" +
		"yFFQOIF$9Lgr7FKqKvt$3BmfrlWjhY4umbUVtbFT#4dFslb7VZ46v1nX566F5BL0aIAuAF8" +
		"sIRu#W3riapZe8$pSp4oR2k7c6MSOGw8SUH#4dDLs76llZPEtPnXHtxaDav#DWtUWVeu02O" +
		"uzpZOIxUrjlZHK52XukCf5riaB1oHKPoPuoG32yoaiTZX6HiaP7qY16IJKL6ybACa6mhCf8" +
		"#CKAogyX8NeiHaeD5HZ8mHaYE51d9a1WXEL5a91$41WddHKOoCaP8KgFUQPGnTnfyLCGxZR" +
		"eQVB2TXfHsYLb4B0c$qr2NkMhNjQptmJ3KjPyoACnEmuFPb1pqbA7QTBSU7UQGpp8AWvb5X" +
		"DdT3sAVOh75NEWT7Hql5EQTXSPCyS8SRXVgyNSAZTcx2xLW9fjVOHVASstI2etPvvJaYkKf" +
		"IVNCxx5jcUVn9$Zz$1RUmQVbnEZtRsgbqdz8bsGhoLQIhIHR#STd$fEYbGXd$l$IMdbIz4k" +
		"obMGhoLP2jAAE1BADRCe9VEBtFq64FTLTGSJNw1FIbNGLPL5pEfjowHmwbrhIUNG#NK0NqY" +
		"LqALr6bzEPwlnLo1D$ECnyAwJAR#16Uk87PizdeU4n#vtg#CO8C7lFcG4myoss4X6Udla9Z" +
		"LdhoOEUxW9W$YtyKuhGcFqGHuJPO#V8pljr2#qRTJtt09WTwTIBrAV#djDvOPvIc3Midre5" +
		"lYoO7GuJSr6#wy8gHFXTbugXBED83TERjeiRXNn#OoBOmyf7Qfc8UjDx1S9S2otkLUssPnr" +
		"KgQ2OsUxWc46$UMARJmRCgeTwUa8lHuAvID#sEXps6xH5yUzoSPK#EAxIXyTL#jYuIjyKL#" +
		"dRuYfzLrob7uohz2DnbNuYdj8vZwlqr9Dt9k0FX5sbWwqQ6mgxspTsiZL1LbYVYysbnoBJY" +
		"LrbrId4xm6ZGCkVZGZiQg0rKNSBgTDBVYanH1kgPJuwfkqK90OrhQCrCMnf7UiTEsai9GJk" +
		"0jy4iIf1$NnwJDjP5x9tvDKkfXPDZ5UfYmNzHLiqyqHYaCUodIJcn61Ee4$RHgluvV$Rxl$" +
		"tc7iHkN#373NcIBxjhYzsMIWhiMlL6sAE$2l7LLBIVq$IdVz2J4b9IKb9IKb9IKb9IKb9IK" +
		"b9IIUFf4YVHH#oFOjURJi4XKOZJqdxk4kYuHKzQCpJanSDiGyZnS87XS3YFfSPYWKuA$BNk" +
		"SjJx9d0fphUDM8iVzkm13mhyg7Miw85uzagzn3BZhYrshPFEIAivVFPo9pewWMsCy#qnVu2" +
		"ZGbGgavWExEF0wUZHeseKSPGEuroT7JzmzRzypgu#uTj2AuVIfqHLFS$eiOITbPGyiFC2ZO" +
		"iVuRImNs9ebllcLZPdpzTL4ayTbYUApAM5sA6vOs89TrXcxky4jwASlRBYx9Un2k2Jxsl8$" +
		"5PdwjJb6rDZxBUh8ZhFHhL#lDRu3uCUysFKf#3OIMlZTAJdL7MAnjblLeHxy$w57rdm8P4M" +
		"Mze81Eplb5A6nzblQ#ZhBSrodf$HrUFKu9zBs8Vyi5vQvJrefozU9SewpqQPRrNewptTfJr" +
		"XaTPRqB4zUf4DGVKZwfMmwXgdMMhvVxLGAIr6uTOH#IRswu0NQnYZIBwfKEBY5k#9YfjRuo" +
		"grkrHrMeVLQq7eweLtIvWVJIrxD#1Awp7i1q1QmVo68hGO#JAjjEtDhiwijhiQCXTIM6rEn" +
		"PSE$PNrDeTZzesaPwIKuhIfxn5a1E1CrhSHfzehC$xnSEtUFzeQ$DtO#bR$BtWsl71KMltl" +
		"bqxlYhcllLHaNnhSX3V#jYDc#yefDPslv2ojl7jdl1FrYxYXtrxYo$WFriAA0IiRI4HHEUB" +
		"RjorK4Cz7VByEYRenNRxQ#l5JTKJYhjmLmZSINidrjw5Hf34VRBZ3lw#Ks9T0fIFRfN$94m" +
		"xXKFXzqruzuLsGcXaV1AofLx8jNzU5VGN2NmrMYfmlvKu40w#n2Uf5$by6cRxl4ffPBwbMK" +
		"kzt$9vLG5jmdsh$Qt4DkaRFQ7EvZkKsMLkR6mnQ3vhozF1Vr0fywpI8NKJf6wrIFN5Uf$vP" +
		"cRMmvlE5hEsR3xIYvbIsGDi7dkGlQxVc1m4gVtzpeWfAS1QLKhXpLWFO7EtS8#q4Dl3#gl$" +
		"DECdaTthyubUMwjy$RvefJjeXXKb#FKAfTc2jGzhiMVPNgMhpDSjUAGi1Lgt1Mkns#HQmUu" +
		"8fYy$hdaQIfB3nNgoVFOe4DpjeyVDblQhgPIUx6dsg4H3jlM8tSmUuRjKtEyTpypd#yIigp" +
		"N6zLDPDiUJVoinukIW579IAhaeZTAf61Md4Y5#jLM9AbCLgWgKrUbqga4rWV0CgasPL4Uz3" +
		"Qy#DQ266EzdKIDgh6OT#SjmEJSGPXyvFxJ03967c7nkz3ZsWKzILtgAdgPkz0nrfnxqBFM4" +
		"zpr7pzCBEC6tejPq4zqiFqzNdvUtJIZcZZRCiwF6d4Vv4TLzaLwYb#aLUfLwKn$gI$seFxs" +
		"cVhFy9hr50sWW3QB1z3QzGqFeNNgFtgSFQ2Zqa5gFLB$Y$nYprLpCKWVKFBK0S$v4Q91DdN" +
		"Ixgx7tda9VqpUqdbRHTx3QT9f1CqDOTJ6iQjPT5cSzvkECSBD5ZxNG8qlfaOrHE97kfBjmT" +
		"Z3RpVNeiLhr#tpeiJwi7Z$HVlep0NfaOWtqwj41xRdro88UUU3PSSOm7ItCj63OGUk0IcBO" +
		"I$k0GTgi4#oTYLd$TzXo5ivcQr57fWl4DjDVSgmmf$ATB9QEMJwRbL1z8CTGVD4xORDyBtg" +
		"MobmiJQ7lW54r4QDgEaRZJ62RgpmX2tyBb5M$mwao6nuTt0$oeE4m6auZSFACzxYSRTK2CO" +
		"bGQh44k2V2Hx8LRecu5BIudTefJva5BQH$XDAYNSAqo8KU7InQp0AssTgRMq8BQVjizLS0J" +
		"KmjMglKxrHgE2qw0dyxakVinCpiev4x5jHVVHj2pknP5XrsqYwCtone8MFJWCqwabiXVfFI" +
		"lKrGj9tZt1yjbJMi$M6VNMOftv7Mo41eClelYpc0DW$z8SVwZ3ZZEnlUact19#UKN8NlPeK" +
		"l0x42eCn5UdFWoyEVH9C9V7cunnlV6DMo5r#MGYJnbSJVH1tFWBHRC6TAV3SgD4ojblqIW4" +
		"#UexpuCj5UXiANQy7N4kCc6pHPZHutldPglCKVNpjR$xR4dyGdnyD4rTyPSHy3ERPnkKEDN" +
		"#$g9YsKYncW9AnN4ZOAFhDqmbYIfRAKxxaHjyTE8RuQPCEErb4YRNPCQT0I$ZPHxsqEGOiR" +
		"iKg7qa3EeUrGFqlvYHjnfxXha0yDh7sGgsPHgK6M6kUc1YMrluRh0xaMobxeYBKbJwziFoL" +
		"iJHYhsfRhWRIYN1D2xn$obC#R#xnMiDTDAjucpXPlJoUKnODXayyevBVulgIluena2t1asV" +
		"g#fEvxEKEQUm8vkxl$ZYUi9vlRsWtTaytHRlE0VsqIXjUSeqpK9SFWpKIxqazbUVEU1vAz7" +
		"7mt4bkqSivghdetjn3MDTy1tvvMGdOrr4WKshFf3#JBlroq7XfjUxHx1#xjOTFbogQopXtu" +
		"Y$Ue7gDQzOubqqvoB4a#CK6sMWvzzq3RF3MMGzag3$d1yXBLioM5lYWN508jSlznj1ffHml" +
		"Qk#aUkfVke$lf0NgG7g8kz30z4bm7LJ$EVgXRyVYXZiCF5K#G7meHQS#6ibPYUzQALaHndH" +
		"neAG#KsBK6qaoqy7lf2TCHdcb15Ce3vAw#W5O0RJ0SBL5g6stNUytWE7RB9y4ewtaIZF1qx" +
		"7zcKeVW6DHPqleaU4MOfzSIIIcTbnyKSmxDfGoqAdUR2q9WplJ7h6scj5MX7Ea5dlGSTJze" +
		"mvoNq2Vkez7#M8L2FvS9w8NVqbHR$7lG7BT$9cuiHOesp9XA#CXNhKO$JyLt9nHYBAdshUU" +
		"Ra6DVtJD1mUoMh$m$MvLh6SfkUXoLj8pzu3tM4JsMh#SJopX2dT3ZgAMQhyAD$PRUiOloOS" +
		"U#cZSZ6lkU$42O4x3d2E5n2JlH9f4aaIIH994aaVm$88dTJaFk95GeoAgjyd9qcGXs6ggS#" +
		"NsJVCjw7GnlllsK4MwduSQizoX1Jncgd6uzEinXdcKKPdUK6H5cTp#qLFUOOevYHnTdp9RU" +
		"YJNcSBlGVDk8ZM0NwiMiOq5teL5WZkCfIO$On9mcawqaMqcsacmbsKgobMGhoLQIhIHRIRR" +
		"oBsj5dGXq6u5F$05E465ETVAixVc5YVjNSnVHnPvVpbsXVbrtDLsZVX5zlVhaeh0d$Z2OFS" +
		"zQ8Zpn5nAptwcEnaI0sNFE3DYR1TOIaPwUFPZTUkwE$FJCU0Idvv2OVH57YJaquln2#qQ##" +
		"nxGpZdkJ$qzf$F2F5anQrW#jGfy1VIDn7pN9PHbzeJkJVl5KWht$4R7ycXBf9Q9f3SjDGFr" +
		"fkqpwz0UIDE2OmOjzCIMdWoOLKfXCSVt2NHIUb9wKdfIUb9wuJ#bYsgt7sgTjQm4BQBKASR" +
		"Vv8e8wrngeKCBGfPRvPSIGxGXMywAPJjqUu9Gor#mngutOoijCnHklvGOVdwLo7uErPPgBo" +
		"UceoqXDjB8iqy#vB7itIJc165Ec4$RHskCFp4$#Up#VuxPyoiHx9xYYTaZSqn8Avc$GGxrk" +
		"xz$R5mb9IKb9IKb9IKb9IKb9IKb9IKb9IKb9INPJrFHFL#tdO52eb4bv1iVR6XqJGyQX2V5" +
		"0ei7qs$g7k2iAB5umXs2dEgYnHBmh6XYSPyLBUaZrLs#aIMwrgBzR2IMTbvaZR7YI9aQeDI" +
		"6O7OEd8wS8$y6xTmeevGPjKV7JWTt$mItTAZ#ASge33yhAFbXPWKxbb0wU4grBAhrrDjqOs" +
		"B$eizfiPiL$mjOOkAN$$YO3El1nacYMn7xCAmTfiRBvhJe9B5mGdicrZk3ayHMoNh9Ul$5U" +
		"l$#MkvpQWpM4VDTPF9RkIhMCg9VEjnm4jWeMIjc7kFzbOg$nu17v36gP9QVlxMBqDzOo5t9" +
		"lrIxI6l$ixD04N1d$2UiVnBwbde#TrBv5XKKibTibbFrTj8kJ$WFMnzvlddfhiM8MNfL8yW" +
		"h98BelCbjERzVnuJmiMd#sbfmBqmaxj18$P27mfsqTqBjNMW4ITmdEUxWJug5y3ufBZBk4D" +
		"yDbEqK3aNmRv2hjIBui##iK2sf$$nX#xmgv2yIiYGAywt4WN1GDPyKlq$3h9zNcHfvtYGdo" +
		"re#hm8EzMxiuFCJBVQ4bfdlKAOnRcpcEvIXtJpm7rJAZpRfesawZPLltlRy1jC7gvGkfLhJ" +
		"wNj8d8EubWefFqBAOLDACAJszpiZfgG0gvAYOZzwMXWjBOGKyrkU$hyKzVr4ByygNxylMhy" +
		"$seuI$6yJfTc2HSPesWGjfAuoNxVWbG8qRWkEnWeW9HqDfg#vimLVIjE4$Apb5oLNjM3JOw" +
		"EbVVNB8BEaH6ENIXjfZNvxdzyxdcKRjlWQMworvcqyARyGEKhqKl#wmo7$Jsqp8bTpSFcVF" +
		"5k2#YFUN#R7WuXO2cxJTFW#RperCVaPZn4rxwl3xo2y47mQ#3RmJIXc4DLs4LNS72#C$fXh" +
		"DuHvwdhZwMsGTYCmz0vVjyOPg7inoZ#9o7BG88JVC$FEVb7sYDR$MzZZ33DSl8EsJnxApaI" +
		"vOJg#J#FPIiIV8yeiXhmDI1y6#X9q36cDaBT5oqUy$dx4BpVZZaL4bVvCbDt#AO8DRe8jfd" +
		"ZZT4YdFmrRP9d$bpTpACBRpVJgnv5MrGoVtWzscc66KrSN3OVZ4EGrDiFPvseCin66$nJ$E" +
		"d2TCcyIfTG6OPoad8cnk0MSctafJgAq5cQOlQpJca3cTiJX3wUyWNXnyDbscMKtwBAdcxnI" +
		"JnslPV8QxRJCfIRFmBoGyZ1HJXdmwq3mtRIbu5TxPQR0bdKoKESbjFUNcUQiGLIkdey#pw1" +
		"iDyYw5FmMqBCOFtN1MvlvTPf2nfhWDam1uz8MkJgkvuRqdWWFCCCboY8ytbullJ9k1tMT#R" +
		"3tFF2XtloCETwmixR6kiikemxwgLbvRKE9Vm7AOdvA6GLQJ5JiLF0FjGoCRTxR3ASsj#3lw" +
		"QzJXhOthwVZatrq7WuP$IpnvpGVWpeFWRzYoOE$Ejs#y0Nobu3FjEJlyeRvPc#OReDEc3TI" +
		"VWTXRgtnFEIygkiSWD#sCSFPxsZzZo2$AleHOyi9dtDsXFx0uipI#cCDATSE$7BGdR1TT$J" +
		"h1eIlrlcTaJO261gZtEiwxGcCFVYNimFQ$mRy3l3ru9XRotsloqn1FVGTbsr#ezFWJtoLnd" +
		"eHuXgZKzkfpYxaGvyIzvlnCilW3$1LvmhWHrqdxEHS0$mOYyuzTjixeRlp8EfZ7NJ0Dvr$w" +
		"$J3tZAfjI2dDzAm5gLcmhSg8NpCaf#6jcVgS2cCuNp8sqDKynJ4CKPgveANWuvwNdAWlRgb" +
		"KMOmqQbrpRIwi6SphCcdtkwLct45sjc9#brG7$QlEG2y5SgyPkOtUndrsaBENgJDqd8mJff" +
		"zZBXxB63zgViHokmZEgsEBbD0bCKGRsl6NGKQE#P99#nG5kkVumF4Eo6CDXn8JqLVdT8QkY" +
		"Ej#70GVAdXSRij#MIYodgkEHthK$4BTVWFdN$4v3NdcppxIukk66#fy9cQku6XEiBt8Mq8#" +
		"FtWm506$PZwFcW3QAUttYdO6wHQVBukR95rgTQhFEQnqv7$9y9Lj8w7GV3jzCwM$ZiAmjgP" +
		"YdKXzGG8$Up2kk52VxYoGJaWzA7h7D1Le6j0ruBWoox8huT#vf1ncjnBNGy#4$m64FpQXJ5" +
		"I3$KTCXs#vaB$EJSJbOSVkM1F5yQN2$PrOQuiZp7gWiwkhr2dFUf86UW7r#iWZ8jwy747P9" +
		"R77E32kk726AgEldPzJbIh7ZXiNWljk31VbPy1FXhwTqKTp6krNa1y4lXOS51vQPDny0$iB" +
		"UgXdEDMeWfOXrpZ4SSUB0jzKG5fBkJNMWl#DVPZ3d3C7HNwWkz06OaJ#mt7PqYRZZJOjVvf" +
		"ICVugu1q5soQ1hlLRu4oA5iHUoCNR5mVFjGS#vQAmEKweVjgkzsNwcETSMtonYklyePTHtK" +
		"PuCy#QAqNZe07$Pg6iPPwWtzUpd38NeNyiheirfIqgq7exxHhpJGdS1V7lYgj0WZhMXhwCV" +
		"rHy0PcViK#2ClnWxv9Gx#cOKwfk4NBGztqUHOiUg#GTW$eNZESYxag3UCzRPJsJVXzsZX$h" +
		"6TaUyFDyqnU3BxXs6I6AvrdSeViWqKwJS#RQUZlAisyzIkjH1hylXXyBlqwRphJvmRcITEO" +
		"UaHgxy8ITCdrXlaoTnZRvkLcMXEvVrYhmnY3$09mp1NE2U3myM8OMqr6ee$QnWkZF#OcMCC" +
		"oYbkmOYve0ih82L#tAVOK6HXdJR5Ebj7#SERx9Y#3$g1Bp32zvAsJSukbFlopp2EwJ2zTNv" +
		"#tciAlolJnbYNiWS#qZACoKu1reIL$2$pbvtZPwTz2i07swVIgHU$g9ZzBZs4#1#7BlVaDp" +
		"lE6pxhB6tQyN3GSXBdZh6VDS9aj9c#AVNqPx0zowWIkuppD7dUqiCVJQldNEUjJavSOO$8g" +
		"rNnaBFE9h$If$vizpYunUSv3bZfz0xHxMBTthJUjqbeVMNg$cFEwHTOQRxXHEL#vzlef738" +
		"m5pk#qF4CpQTvowJV6w3UNUupe1alDiG7LoDBM9$7dLtjPPfYFrAsZ1ckfVUgEOCjRJJmXd" +
		"DTbh1bZcFl#MFB#TedliE$JF6$B3Bsw3JiCNDB#fQrb0FUN3$$iEGVz8O9Pu$wIxpnwfKiv" +
		"R27QgJdgh9wdSaPh$c5bd8JxFAhTFU66rrjpTDfUWsiyeathNudapVGUzK64tIPrPPwUZ#S" +
		"ib1ZntgSiaPZgEyjbwBt6et6cTnPpUIy6EWsZN#6jpmlxOlHZhVuiE1vEPQz2t$CFz$Pqnk" +
		"kV8FMJU$36vOoUTLqYuxpT5gEoPjEXUsn$wnwhxSCn$xH#GhgwtciORwkCzZaPT#37Bq$g3" +
		"hNvCtg8nrzNTNIzuqCarVJpmlaEQCYrjXghRHkjcTAs0$WF9HQNuSRUjEhwVEPeuR9ATFV3" +
		"YarJTvOdgbMQZlKifTfSC3a5GVurs#CFNggFhCtt##Rxr##s3fxN9wLAlxcZJkrtwGEjPTp" +
		"s9vp58M0MTinOuJcl$laFspoafRv8zLlBm7xVcQfqyS$lx7UGvRCywRLrsaD5sY#IvUPPFB" +
		"AUcoSMLfp$Posv56BN7rMBtM#oPlXB50HvzrIB#ewjsZULPVJVbq9VTLudHakNTBaMTZxLB" +
		"eCyTOM#Nf$NrhlL#KvenBECQLjQuTTroO#wsBAe$vbvBcaqXl1P8GYo7icW3oSWLqTlN5Nh" +
		"y1r#J2VU0TlkA9#fkMoFByiDieRTlZD7Jwov3dhW0N3tu7BrT$j3LVIRJgwWqxHQTeNqvfu" +
		"owLPvdoNnOVIXcW#pflcA44#bpXLd2BAYWl51U9ySPveASuLBSGv8bVaY6nnjcWkiaGpKLF" +
		"K4AUBYgfySL0naOOxplJY8u6PJE0KA5xKybuGdKH7SOkuMTmaMejMuaPnWxXUN2Uk5TU8gy" +
		"LLuafnXRXSN2Ok5PU8YyL5ucqnM0n2lPV5y#8vyIn2lKG7qLwq4xUBjk8sSQjeOmmmtY8ot" +
		"fJoZU46pjhY2zNMfw09AZHUt2dk4FTe3A#Axk9nyO0AFofwA$wmZ8jyiL$y8VQ9lMAFs2rs" +
		"YPrYXzWkjedVnLQnHMmMcyH6iK6i5#l4Ml6RM2DMYrLYfLWXVXM$YELYcVXPB1K$YILYiLW" +
		"aJeZZufWuAew8m#9lyPSu90wA0#9FCLjyB#Q8FD55VAXQ7Yb6u3uSD5JZUqZT5wfx0NJQBn" +
		"uJZuWUuXdHJJmjdX9TnPFY2V63c2$cYRa2PtRndVX6u6mllWHD59#8SMAiyPuuxkr7urqbh" +
		"HP2VrZxrzWdgeegu4j1Fu6MW1Q3S3es5jfzmPWeodd2FmhudJ7Jc6vCyodrkRf$AsQ8MMAc" +
		"SOjniuf$Oqp1VP92SPeeZ$0NehgeflBUq3LVC$hX$eg1bSgGFZD6Z1QZL8sFVTeOebBBW4g" +
		"A4iOXuq$Ze4WLJiHJG0uGDuuRXrNPlus$KEA0j1DYmZYYkA7Z9uoZOfgO9Bv2cMCY0pKFmg" +
		"Rpb5MdglktOegOxDF#spxntPxGBlAvZEsUK87n0#xpL7YkCT#OhRIeO7plLsUmA2rAMU8uw" +
		"niV6QDiPGOPSrJjMSOEdzhRFA4jccyKwSOousTBcTzDlqTeg#QRF7cRDTy0MeuskYkS2eze" +
		"xvKXxfVZI8KULFTxGNBqOOSgtXL3n3i2UnNHG#NT3cgdGlE5jCABngkgZVv6NyM$zhIkRMr" +
		"yQknrppkgdfftL4ZFEtQjfHTxmWgnhsTQ#wdebzj#8Sly25fWj3Pk0XycxXDtWtSMEBKOqa" +
		"OznK0nGBmbtXHlYDV5QwA$w2VwYZuQwpF6qyPJHbSTUzAZmnFsDeoxRJ4rgndt6VSQTnltg" +
		"$0ZEgUpkjzbt6dSONH2gAFH0VVsncUulmvIlMEWduosHXlSRpLkyqZj9iy1h0Gn4ASyOeMY" +
		"CVz2waKE4DVSITsGPgN7G8zgUXpq1AWdQ2xCCHVy6TGpoKch8CUa54KB45w0Cel0kuFa9yZ" +
		"B4U#El6NWor1liI96KpHzRQ5la3SRzReYt1NX$U3x4VzJaOFcWyy7FuBq8#0Rm2MDiD21Gb" +
		"1VHGvw4N9DScXoWfWcTngZvoAafnMbW1mWhkCEHSyZ$Ndm5v3s0l9UiL4AoA72Bo5VKhwcb" +
		"yFGi0XeU27fjIBGfqMWDq2VMEXZJGCqVQxfTH3MRX2ZVh3RPDXjCi8JDNs8j8$09Mr4U2Fu" +
		"Bw3#22zKn6YQ8avZmIMDHtWyyiQZBzP0zXgaJK1u0j8cK2eT1J#Aj8D8EuYocn3UXBHlmR6" +
		"70364EOq6JGMz2NgBN20dVGR#WI8doHt199JzWD91nK1fEi$DlU6l53b1wQ1Ye3ITvkRUy6" +
		"zeRodaIXg8y41W6mG#27mm#63mjo7h2z1Gq5hWM8konv1#3F7D26z6kL#Xto6alGFw4hG5w" +
		"PAEQng2j7Szb49$eUuwr3k1F4dl8JmIc6P1$Yp4Uo1y67oU8g8VmKroq0#A6Cq1VG$w3ZH3" +
		"4L4VvBsAi2H3aOEcWq#7hjCXys#4PuAFWcsU1VsCU6z57EIWSUHWnS6t0kDMnILn#Xsq3UM" +
		"sA#Aq0do5oHbsyI36Ka4kK374Yu4xGUae9r1EVeDlXuNsGlvUj8MY5d8eOiZVYNPteTukb5" +
		"j9d76aSwJlHhhy7o1$W0f0#v1laWF4DJaqfJ07wZh0Kr0$1UNt87qF#5EW9q6hGUj1x$yFN" +
		"CZZHW==");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			{
					
			return new JSParametersNode();
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSRestElementNode e = (JSRestElementNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e COMMA BindingRestElement.r RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final JSRestElementNode r = (JSRestElementNode) _symbol_r.value;
					
			return new JSParametersNode(e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e);
			}
			e.addChild(n);
			return new JSArrayNode(l, r, e);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 76: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 83: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 87: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 91: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 98: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 99: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 100: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 101: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 119: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 120: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 121: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 122: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 123: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 124: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 127: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 128: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 130: // PrimaryExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 131: // PrimaryExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 141: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 142: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 146: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 150: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 151: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 153: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 154: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 155: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 204: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 219: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 220: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 233: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 234: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 235: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 238: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			// FIXME Determine if this was let or const and use special subclass!
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 241: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 242: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 244: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 245: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 246: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 248: // VariableDeclaration = BindingPattern.p Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 251: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 252: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 253: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 256: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			if (e == null && n == null) {
				return new JSArrayNode(l, r);
			}
			JSElementsNode node;
			if (e != null) {
				node = new JSElementsNode(e);
				if (n != null) {
					node.addChild(n);
				}
			} else {
				node = new JSElementsNode(n);
			}
			return new JSArrayNode(l, r, node);
			}
			case 257: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 258: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSElementsNode n = (JSElementsNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			if (e != null) {
				n.addChild(e);
			}
			// TODO Add null node to elision here?
			if (z != null) {
				n.addChild(z);
			}
			return new JSArrayNode(l, r, n);
			}
			case 259: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 260: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 261: // BindingElementList = BindingElementList.l COMMA opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 4];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e != null) {
				l.addChild(e);
			}
			l.addChild(elem);
			return l;
			}
			case 262: // BindingElementList = opt$Elision.e BindingElement.elem
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_elem = _symbols[offset + 2];
					final JSNode elem = (JSNode) _symbol_elem.value;
					
			if (e == null) {
				return new JSElementsNode(elem);
			}
			return new JSElementsNode(e, elem);
			}
			case 264: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 268: // BindingElement = BindingPattern.p opt$Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			if (i == null) {
				return new JSDestructuringNode(p);
			}
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 269: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 270: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 271: // ExpressionStatement = Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 272: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 273: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 274: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 275: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 276: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 279: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 280: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 281: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 282: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 283: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 284: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 285: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 286: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 287: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 288: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 289: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 290: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 291: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 292: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 293: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 294: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 295: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 296: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 297: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 298: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 299: // ForDeclaration = LetOrConst.v ForBinding.l
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final JSNode l = (JSNode) _symbol_l.value;
					
			// FIXME Determine if this was let or const and use special subclass!
			return new JSVarNode(v, l);
			}
			case 300: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 302: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 303: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 304: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 305: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 306: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 307: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 308: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 309: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 310: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 314: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 315: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 316: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 317: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 318: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 319: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 320: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 325: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 326: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 327: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 328: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 329: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 330: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 331: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 334: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 337: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 339: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 340: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 341: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 343: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 344: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 345: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 349: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 350: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 351: // ArrowFunction = ArrowParameters.p ARROW ConciseBody.body
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSParametersNode p = (JSParametersNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 3];
					final JSNode body = (JSNode) _symbol_body.value;
					
			return new JSArrowFunctionNode(p, body);
			}
			case 352: // ArrowParameters = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSParametersNode(new JSIdentifierNode(i));
			}
			case 357: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 358: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 367: // ClassDeclaration = CLASS Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 368: // ClassExpression = CLASS opt$Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			if (i == null) {
				return new JSClassNode(t);
			}
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 375: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 376: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 382: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 386: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 388: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 389: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 393: // ImportDeclaration = IMPORT ImportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] clauses = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSImportNode(clauses, f);
			}
			case 394: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 395: // ImportClause = ImportedDefaultBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 396: // ImportClause = NameSpaceImport.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 397: // ImportClause = NamedImports.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 398: // ImportClause = ImportedDefaultBinding.i COMMA NameSpaceImport.n
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSImportSpecifierNode n = (JSImportSpecifierNode) _symbol_n.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(n);
			return new Symbol(nodes);
			}
			case 399: // ImportClause = ImportedDefaultBinding.i COMMA NamedImports.l
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 400: // ImportedDefaultBinding = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 401: // NameSpaceImport = STAR.s AS ImportedBinding.i
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(s, i);
			}
			case 402: // NamedImports = LCURLY RCURLY
			{
					
			return new JSNamedImportsNode();
			}
			case 403: // NamedImports = LCURLY ImportsList.l opt$COMMA RCURLY
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSImportSpecifierNode[] l = _list_l == null ? new JSImportSpecifierNode[0] : (JSImportSpecifierNode[]) _list_l.toArray(new JSImportSpecifierNode[_list_l.size()]);
					
			return new JSNamedImportsNode(l);
			}
			case 405: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 406: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 407: // ImportSpecifier = IdentifierName.i AS ImportedBinding.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_alias = _symbols[offset + 3];
					final JSIdentifierNode alias = (JSIdentifierNode) _symbol_alias.value;
					
			return new JSImportSpecifierNode(new JSIdentifierNode(i), alias);
			}
			case 408: // ImportSpecifier = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 410: // ImportedBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 411: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 412: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 413: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 414: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 415: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 416: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 417: // ExportDeclaration = EXPORT DEFAULT ClassExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSClassNode e = (JSClassNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 418: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 419: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 421: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 422: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 423: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 424: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 231: // opt$StatementList = 
			case 254: // opt$BindingRestElement = 
			case 266: // opt$Initializer = 
			case 277: // opt$Expression = 
			case 311: // opt$CaseClauses = 
			case 335: // opt$Identifier = 
			case 380: // opt$ScriptBody = 
			case 384: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 84: // PropertyDefinition = MethodDefinition
			case 85: // PropertyName = LiteralPropertyName
			case 86: // PropertyName = ComputedPropertyName
			case 88: // LiteralPropertyName = StringLiteral
			case 89: // LiteralPropertyName = NumericLiteral
			case 92: // TemplateLiteral = NoSubstitutionTemplate
			case 94: // TemplateSpans = TemplateTail
			case 102: // ArgumentListItem = SingleExpression
			case 103: // ArgumentListItem = SpreadElement
			case 104: // MultiplicativeOperator = STAR
			case 105: // MultiplicativeOperator = FORWARD_SLASH
			case 106: // MultiplicativeOperator = PERCENT
			case 107: // AssignmentOperator = STAR_EQUAL
			case 108: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 109: // AssignmentOperator = PERCENT_EQUAL
			case 110: // AssignmentOperator = PLUS_EQUAL
			case 111: // AssignmentOperator = MINUS_EQUAL
			case 112: // AssignmentOperator = LESS_LESS_EQUAL
			case 113: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 114: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 115: // AssignmentOperator = AMPERSAND_EQUAL
			case 116: // AssignmentOperator = CARET_EQUAL
			case 117: // AssignmentOperator = PIPE_EQUAL
			case 118: // Expression = SingleExpression
			case 125: // SingleExpression = YieldExpression
			case 126: // SingleExpression = ArrowFunction
			case 129: // SingleExpression = LeftHandSideExpression
			case 132: // PrimaryExpression = Literal
			case 133: // PrimaryExpression = ArrayLiteral
			case 134: // PrimaryExpression = ObjectLiteral
			case 135: // PrimaryExpression = FunctionExpression
			case 136: // PrimaryExpression = GeneratorExpression
			case 137: // PrimaryExpression = RegularExpressionLiteral
			case 138: // PrimaryExpression = TemplateLiteral
			case 139: // PrimaryExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 140: // MemberExpression = PrimaryExpression
			case 143: // MemberExpression = MemberExpression.l TemplateLiteral
			case 144: // MemberExpression = SuperProperty
			case 149: // NewExpression = MemberExpression
			case 157: // LeftHandSideExpression = NewExpression
			case 158: // LeftHandSideExpression = CallExpression
			case 159: // PostUnaryOperator = PLUS_PLUS
			case 160: // PostUnaryOperator = MINUS_MINUS
			case 161: // PreUnaryOperator = PostUnaryOperator
			case 162: // PreUnaryOperator = DELETE
			case 163: // PreUnaryOperator = VOID
			case 164: // PreUnaryOperator = TYPEOF
			case 165: // PreUnaryOperator = PLUS
			case 166: // PreUnaryOperator = MINUS
			case 167: // PreUnaryOperator = TILDE
			case 168: // PreUnaryOperator = EXCLAMATION
			case 169: // BinaryArithmeticOperator = MultiplicativeOperator
			case 170: // BinaryArithmeticOperator = PIPE
			case 171: // BinaryArithmeticOperator = CARET
			case 172: // BinaryArithmeticOperator = AMPERSAND
			case 173: // BinaryArithmeticOperator = PLUS
			case 174: // BinaryArithmeticOperator = MINUS
			case 175: // BinaryArithmeticOperator = LESS_LESS
			case 176: // BinaryArithmeticOperator = GREATER_GREATER
			case 177: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 178: // BinaryBooleanOperator = PIPE_PIPE
			case 179: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 180: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 181: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 182: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 183: // BinaryBooleanOperator = EQUAL_EQUAL
			case 184: // BinaryBooleanOperator = IN
			case 185: // BinaryBooleanOperator = INSTANCEOF
			case 186: // BinaryBooleanOperator = LESS
			case 187: // BinaryBooleanOperator = GREATER
			case 188: // BinaryBooleanOperator = LESS_EQUAL
			case 189: // BinaryBooleanOperator = GREATER_EQUAL
			case 190: // Statement = BlockStatement
			case 191: // Statement = VariableStatement
			case 192: // Statement = EmptyStatement
			case 193: // Statement = ExpressionStatement
			case 194: // Statement = IfStatement
			case 195: // Statement = BreakableStatement
			case 196: // Statement = ContinueStatement
			case 197: // Statement = BreakStatement
			case 198: // Statement = ReturnStatement
			case 199: // Statement = WithStatement
			case 200: // Statement = LabelledStatement
			case 201: // Statement = ThrowStatement
			case 202: // Statement = TryStatement
			case 203: // Statement = DebuggerStatement
			case 205: // Statement_NoIf = BlockStatement
			case 206: // Statement_NoIf = VariableStatement
			case 207: // Statement_NoIf = EmptyStatement
			case 208: // Statement_NoIf = ExpressionStatement
			case 209: // Statement_NoIf = IfStatement_NoIf
			case 210: // Statement_NoIf = BreakableStatement_NoIf
			case 211: // Statement_NoIf = ContinueStatement
			case 212: // Statement_NoIf = BreakStatement
			case 213: // Statement_NoIf = ReturnStatement
			case 214: // Statement_NoIf = WithStatement_NoIf
			case 215: // Statement_NoIf = LabelledStatement_NoIf
			case 216: // Statement_NoIf = ThrowStatement
			case 217: // Statement_NoIf = TryStatement
			case 218: // Statement_NoIf = DebuggerStatement
			case 221: // Declaration = HoistableDeclaration
			case 222: // Declaration = ClassDeclaration
			case 223: // Declaration = LexicalDeclaration
			case 224: // HoistableDeclaration = FunctionDeclaration
			case 225: // HoistableDeclaration = GeneratorDeclaration
			case 226: // BreakableStatement = IterationStatement
			case 227: // BreakableStatement = SwitchStatement
			case 228: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 229: // BreakableStatement_NoIf = SwitchStatement
			case 230: // BlockStatement = Block
			case 232: // opt$StatementList = StatementList
			case 236: // StatementListItem = Statement
			case 237: // StatementListItem = Declaration
			case 239: // LetOrConst = LET
			case 240: // LetOrConst = CONST
			case 243: // LexicalBinding = VariableDeclaration
			case 247: // VariableDeclaration = SingleNameBinding
			case 249: // BindingPattern = ObjectBindingPattern
			case 250: // BindingPattern = ArrayBindingPattern
			case 255: // opt$BindingRestElement = BindingRestElement
			case 263: // BindingProperty = SingleNameBinding
			case 265: // BindingElement = SingleNameBinding
			case 267: // opt$Initializer = Initializer
			case 278: // opt$Expression = Expression
			case 301: // ForBinding = BindingPattern
			case 312: // opt$CaseClauses = CaseClauses
			case 321: // LabelledItem = Statement
			case 322: // LabelledItem = FunctionDeclaration
			case 323: // LabelledItem_NoIf = Statement_NoIf
			case 324: // LabelledItem_NoIf = FunctionDeclaration
			case 332: // CatchParameter = BindingPattern
			case 336: // opt$Identifier = Identifier
			case 338: // StrictFormalParameters = FormalParameters
			case 342: // FormalParameterList = FormalsList.l
			case 346: // FunctionRestParameter = BindingRestElement
			case 347: // FormalParameter = BindingElement
			case 348: // FunctionBody = FunctionStatementList
			case 353: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 354: // ConciseBody = SingleExpression
			case 356: // MethodDefinition = GeneratorMethod
			case 359: // PropertySetParameterList = FormalParameter
			case 363: // GeneratorBody = FunctionBody
			case 364: // YieldExpression = YIELD
			case 374: // ClassBody = ClassElementList
			case 377: // ClassElement = MethodDefinition
			case 379: // ClassElement = SEMICOLON
			case 381: // opt$ScriptBody = ScriptBody
			case 383: // ScriptBody = StatementList
			case 385: // opt$ModuleBody = ModuleBody
			case 387: // ModuleBody = ModuleItemList
			case 390: // ModuleItem = ImportDeclaration
			case 391: // ModuleItem = ExportDeclaration
			case 392: // ModuleItem = StatementListItem
			case 409: // ModuleSpecifier = STRING
			case 425: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 426: // TemplateHead = TEMPLATE_HEAD
			case 427: // TemplateMiddle = TEMPLATE_MIDDLE
			case 428: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 95: // TemplateSpans = TemplateMiddleList TemplateTail
			case 96: // TemplateMiddleList = TemplateMiddle Expression
			case 152: // CallExpression = SUPER Arguments
			case 156: // CallExpression = CallExpression TemplateLiteral
			case 313: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 333: // DebuggerStatement = DEBUGGER SEMICOLON
			case 355: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 365: // YieldExpression = YIELD SingleExpression
			case 372: // ClassTail = LCURLY RCURLY
			case 373: // ClassHeritage = EXTENDS SingleExpression
			case 378: // ClassElement = STATIC MethodDefinition
			case 404: // FromClause = FROM ModuleSpecifier.s
			case 420: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 90: // ComputedPropertyName = LBRACKET SingleExpression RBRACKET
			case 93: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 97: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 145: // MemberExpression = NEW DOT TARGET
			case 148: // SuperProperty = SUPER DOT IdentifierName
			case 366: // YieldExpression = YIELD STAR SingleExpression
			case 370: // ClassTail = LCURLY ClassBody RCURLY
			case 371: // ClassTail = ClassHeritage LCURLY RCURLY
			{
				return _symbols[offset + 3];
			}
			case 147: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			case 369: // ClassTail = ClassHeritage LCURLY ClassBody RCURLY
			{
				return _symbols[offset + 4];
			}
			case 360: // GeneratorMethod = STAR PropertyName LPAREN StrictFormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 8];
			}
			case 361: // GeneratorDeclaration = FUNCTION STAR Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			case 362: // GeneratorExpression = FUNCTION STAR opt$Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
