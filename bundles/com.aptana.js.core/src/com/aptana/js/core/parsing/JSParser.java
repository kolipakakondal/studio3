package com.aptana.js.core.parsing;

import com.aptana.parsing.IRecoveryStrategy;
import com.aptana.parsing.ast.IParseNode;
import com.aptana.core.build.IProblem;
import com.aptana.js.core.JSCorePlugin;
import com.aptana.parsing.WorkingParseResult;
import com.aptana.js.core.preferences.IPreferenceConstants;
import java.io.IOException;
import com.aptana.parsing.ast.ParseError;
import java.util.ArrayList;
import java.util.List;
import com.aptana.parsing.IParser;
import com.aptana.parsing.ParseResult;
import org.eclipse.core.runtime.Platform;
import com.aptana.js.core.IJSConstants;
import com.aptana.parsing.IParseState;
import beaver.*;
import com.aptana.js.core.parsing.ast.*;
import com.aptana.parsing.util.ParseUtil;
import com.aptana.parsing.ast.IParseError;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "JS.grammar".
 */
@SuppressWarnings({ "unchecked", "rawtypes" })
public class JSParser extends Parser implements IParser {
	static public class AltGoals {
		static public final short Script = 100;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjNGTy54KNVpENv18WGH0BNOgXzs0ICUfdmLueDhgANJH1R8Y8ebYnWXq4HIa2DaH4Uf4" +
		"YLK0wIaSwAbNS#VuxEtUxUxdRt6tk3lc#s$pUlQbl$k$Dp9kPtTiBqRaPD9AsiMVe2$gIFg" +
		"NXD896qUSqciQmfsacUuwQK5EwaMxYvVZfl0glIz$GL$GrByCRy4Qi5ijajLaTTZQrevlf5" +
		"jh76$B6$5HUbf$6c$0wl3GlnIlpUlmKNby8UeNU5XhhJxVJG9x1q$cPMX$wXLRGIbf5tz5o" +
		"6azFqY9QJ4jeAVrCotXv#eaMy3EeBxrABz80UerUPxFfMNgQ#iS7i$QqZfaohPZfRBUOUKb" +
		"gpPloPknPrbVLVTXQbtheTUb#Ufokewke6tMYQ#XQsa#LgHIbKKbAfmmgJQTG6IfBfr8vEe" +
		"rEfpFeJ2fFH#aOdQLhpSwXIgmjLM3Pj8QrvEEf8fLWFUakLbfyHTLO1$gEVuDs9zDUkeSsq" +
		"nQQnFhnSQmzRQ8zj1LM$Op61h5gPzh8kW7pEDJj6cCz7k2Z#UUc7jeSrf8Ew7fG0HMmqgmX" +
		"Uv6VRs1XFLapfKS1FukcyIze4vjGb1wi2V#I7gEkx3Hg7T2NqTJZMvR2Lffwy8hiAvejzVY" +
		"H3l9vRBok3y#EBGfs4LhPQgBmbABEhAQEWi$XSrbfMEr1TYfmNgAN8ozlmVx3nW5NIrQHps" +
		"RdiXPil3vRYBFRQGQxZS$YCwcFree#eM7iSdOPtH5R$FmhdiTQMaPr4gLGiXpLgVWhpHwXx" +
		"RB$xyGeBw2zx0C#XjN7E9d81j94TYD6TSYnm1x7MBY9lgSVs5inxeMlCVDgcrgm3knXfEXQ" +
		"tC#6G8knG5mHr9xk1UsbUOAnLTe8DeKDPFErmOvQzC3Ch4Frg1cR6MCjKja6RP15Y#Ri1RP" +
		"4Qd4wsmuFSm0zK8qTvIluBtfVI2qgSawzq1S5udT7BPvdtRJ1h1ryxGgjTyXoyEwqskVTsI" +
		"JgILDfeU7TgGtTG6qBUtUgmWQnZzdRz0SxXNrEVvDW7bQTPR6wL0CeQx9K$YVho3gn7raEh" +
		"y7RyTjuJJap7#HLUG#4vY7y4bNdBT4$vcpU1Mypdohol#3TGw0bJspxG#p6x7t4qXzB#DFy" +
		"FSDJmjkKvcjuI$wndBq5$3VQAxxYsLIDxwEvj8iVPoreJupdxXhgJVCjDjFHzfBuTdYulYB" +
		"n5lnl#frsqcxjOuoNF$bgsNU$itGwJF$46XzfR2jZ5j$IcszXN8xdD5OAix8aos1bM2LMXL" +
		"LbrO2l3ski#psUnCvYzLZ3cEDxYXDhOEdVngmHQohnDMUvm7SUEvzTowvdhLWRojJnuLF7z" +
		"mfhpUw6fMFTlvNu2opVn2U8zMAFINoNigknmZqXXelFa1PRhzIVVGB$Ouwo7zbhx0rpXMDl" +
		"iW7QM#nTzXxxa0t6VY6a3uB$wGPPdxAHwEdXlXLE$CQQn5Y3njYftM7fvz7iI$Q5jEC4zWq" +
		"hRQnmx5l4lcDJYzHW1flEPc6D$jolmNBsGun7QcreiDooPnkf3TU6IGsMicNeWska1ilPBs" +
		"mrlAY31cmJDFXDUmWZ#Mps1$kBNwpMjZNQ4$5P5VWbscXu1Nr5o1Mxz5N1OJVv3#icjlEgu" +
		"XTMZ$yXbl5TV1YVBvQAHMmsx#hMulmATYQ$d5$9hz8jpg$br$7hTOlpDhmjlu7VI4Tv9xw8" +
		"3#4Nyhj2OUDtywlvDRmLRytlYV4gj92TeRrZcN#v$0B#7zdtZVb5bAfzettDRnPDHHFHM3G" +
		"I3KK3VgVsJ7pwKjJdNKGzKLVK4RL5BUU#59deoxD5JTv1soqgQFEqATf4xGTHaT$FPcjFnM" +
		"diTUFvsWRUNLlF7#MFE#FbJx1k$4dULrl7d#DlQckrLPZpA#IS3xaZYJBQh$a0Aj3MQAkr8" +
		"TelpcYrbTZVBUUZj5xyM#r9ZDu5r8SlZ2TQJmfVmXThzsftQ4FvpqMWpGVQ1$aghHjiUhzS" +
		"KpVmNxNx#6OsExQpoPCa3cZTBPwq0BRQ8rUplNm$fSQfPmzui7drU3p9sX1FcgEjAcbVXCo" +
		"BLy#MP5D9NjeG8YUqA772qHf8wNeYSQQ1ba$Wt$E9$0S#YK$cK$XKFerFvpD2ww1ViHw7gX" +
		"LpRsnS#jvTl#8q3ib$5Tcp3jQASyzQqRgu4cX3egrjHMlSsR902N57MAAyGg$Bpm7QD#aTU" +
		"ey#K3XUei4qHCUXTfbvx4BzxYDzH4Ff3NgPtgAFwNrwdfwXT#b3Ue46GPX#HvXOV$4b3QH#" +
		"z1nVQzHL64Bx7SiTOPHql8iDh2lP5VefYbqCv24miydqfzJk8l4hB14ICs$kmwpVnPQOpr4" +
		"syoF7AUe2Qx$o77QXs62xYztEZpaE$Stk1QRx939rRoRew5l85jdY2q0$oL2xU8xEyD0Yzv" +
		"v$pLmoMtKzyujpmk6N5NN22McBqPXB#dN8FE4uUlyhz4$jBto4clkwRxXKbY2nCeovFvXrC" +
		"UOHXPpnE1lYF079nWmBFlU3rXHBTCn5pNtniyNhKD5p7pAx#Z4RbsNkQoy4wU0Wc6FSuqLS" +
		"lBtPuyL1GaUAZQHZT92mSiL6SdkKa0mjDfA7euHaLB6Hz8uIait5Hj8lIaXs51l9or52ihl" +
		"OI5wB4fA3nKOoC4f8ZXKRoVjHGg8L6ydWw23Xdc8Z#IHAIBokTnfbZ9q67nxsJgEs0Xzgfw" +
		"5BkzGe8XONlTEGbx5grmxZb54xv2d36RCXEVGfGxzyhRl3x7Wl8nBCB2pClduG#oIBBkQ8T" +
		"tHqNEr2dUtyWCAya$MC43En9rKyvCX0cOSYnrpKBbJQsHoNOUn2JSpgikn2#Ras1n2ndGDE" +
		"ITvedf9apsoBRikyW3$2x#KtySu1BST7ltzJAnN#XtH9j99e9T5AefKJxlbFYbR2zFp$Isl" +
		"bIT4lYLOIhIHQSMX57WdqDh8f9$Y9l$09eiXJtUL4V9qw8Lr1Lr8MDQTpA9VEfVCeZywd2#" +
		"X2#WzTGfTIIxgC6iZpLuGd$Z0mrxQTpCB0x7iM6WRco4$FziiPSxXsniKrtqbKVtF4yVGS#" +
		"KdKWaYi2e7PZjZfz5pHXzblv$3kKTIEsCwr$Pz1C7jAM30RBKHobyAeONrgPRzyEK4m5#Ux" +
		"BkpCCB$hKZuCopYDm31xCwHbYEq5dM5ay6tu#8I6sMH6TzRKG6lo$fZ#p9flSiBCzeIwVoC" +
		"nhvU8joAqfP0T8iRCjuUB6MNNky4iM#dZ3pqV3kPYVTlgI97V02$E#2uNK#dln5Jwq9XA7n" +
		"LJwPjZAdr7JANlZgdqWp6LVYocqhLOIkUUc4htdhoUWDzNv2eTQjNuBTBTllOxMrV8vmUzs" +
		"8$qK7WwiIkjEZcy4#W2BNygBB1hWDP0tTDHftw5KgA8rgbbFYAgxSoB3shQG6kZsD86zbBq" +
		"fB4a1zpp0XF4wZZrSxMejhF1iNVqgqDKBHgVKIKlrYkQVY8#oAFPJW9pV337SKpRPgjOyVz" +
		"jz$zxp7s8$ByKuXPpEDzsLnThwMGbuora7iMTP49IGfA3fDl#XPWIaXAI4f8IaXAI4f8IaX" +
		"AI4f9E7adXtei#PBiNlTPs2794exyrpVRpL1qDh#17OvoUJ3J4XeMBXRyT6ellhMacvDFS8" +
		"6T5$ZfFHRxnZlSJAYtBVghZZuMDvOWDIz2p8lz8ONjL$cBLTNwiyervVeXbXzrQfkqf1uLR" +
		"B#3fo2ntzG9wtT2jLa3yC1yPf5JWzrBC$leiL0wlxXfbrBJpenpXheVOhoTU1ryFiOsXzKE" +
		"fiqFgVi0r5cSlvPFlw1VitrbXVphfuBl46lVMazzPqVs2UmdMtmyXtjEj9AxwY$UArbZWpn" +
		"HN4dysQbZU25lIhG4#poVXBPVUBzzblKTTrfiGpfWjT7LnsTeKb$McXrslkwrUkBNM1U$58" +
		"guvBhNvAmpPwrsEvMINzSgwh5SZx3tQowvwnjxQ#oxhVHJCnEmLbzB6kAptlSjwsrpME#Ak" +
		"7cTn7djXZw40d66V3mBgtUgotWCkwptaijwBBkkzwxBUK9VrnePThvOh7r3NLQtwhcerjDN" +
		"olJaGRkt63kl8HQ3BGHVBMAEmtdPe4NRBLxlIjfMhMkrTrUhegjPzhcgvsmNywgQM$NjmaO" +
		"uOjZDexM0ZXi8SCVhAjYkmDhiglDhiRyTTIQJQ7G#j7JliMhj$NDict7DoSd7wb9yNuaoGu" +
		"XQtzg8Rw$F#iHXR$5MtjVa7qHnR$CFGsl5tN6itoAuTNnFriVLfiSRMTo76rcS#t7ndX5hR" +
		"nuKXRGV$tHzUQaa$MgYtYF$4b$bJ9GBMBa84Xhtxe9PnBoKot3LGewRUcF66ZDF5zfYuFTP" +
		"laXe8ghh27Uae2s9lZzSPjzNUiBY8YhtTudPfRzjrWkqTnkM4Er842TmdE#xGltbAh5kGyk" +
		"vM#L55j1CPYaBVXlTTQCT18ssKOqjza6j$PXNohGI#5YtDy$qoiVtIqxHHV4b0SXyAU29cU" +
		"sObDU8hJGdgF#7vSlMxurljlqoiyWoVjT6VrjNu7MNMqeUDBGRDXVGIx1Ocss5phD8XTHEa" +
		"RYtizTZDAd2tyUlChBUf0rlCskbIMGcGRebxsHpv$Ezr9zzPw3UUVL8gAoczWStNmfswXVH" +
		"tKXNA0DtPNHOTsWNALxyPhNHdq#merMyx6orO#x06Uuhjaxhg#Qe5lvIV3IaeDOTgibkKb5" +
		"iBe#F$#3MyXQTvKcMe3#lE2e3WZW0zRb15gnYbv2TA1bWEfVXkzc2ul$7C7lM5#46LCfiOS" +
		"V9G4YLJ2dafbTAe19MaKWxlQbMWYbI9AWDRLJgBgb5rZBUQT3PbKYtvwtfrgHxLnmnlY5D$" +
		"O#bdzBU#TMz0y3UwHsW1dv2FM7Vi0tjWv$S8FKgFqUFKavwWNlGazQQdC3UUfcUeByxihQa" +
		"DjQKRzAVeyYbvkxXYxcp3FDCrvdmg2Alki$GSzQFdwGLwaLwYb#aLwa#loZULtw0twIqQG0" +
		"FfRNg7tgNtw7twW3waGJGOUkXQVontb9$2Fys6N$fBUgRvyF9ZeK4si1ljhi5k#pkQGD$Jh" +
		"xIQ9c7NFOMcqZG7gow2LOswosAinnowZMwtw94BFJAb7jbIZnkXsSsgtVb#FR9bly#17gsA" +
		"r6C9TS1VxFN8nFd6rACJhSUAQEYH1JssI7tIOunY2jgOPa6naxeeQ#wZ$K2XMoqBE8roup5" +
		"ULm9dDb3bCw9jj1quCLjO2j8wK2uhmKeY9zsFU7cCyNUY3UX$FtxcPQaiJUAVZh#n60j6$#" +
		"VAKJuUkgoXmmZbOLJ$2asdEeo5pT0zc$wWFt7UZAqMkPXv1PPUc2ddegx5OZaMigJ5in7B0" +
		"usdzh1r6wJcGujiz9YJ5XsWnKSqX8R6N8lfi6SNYnQPm3PTQf4djSYJ8pgBTj5ksHUw5lc8" +
		"9qijyehKeWjATuOM52VlFXoeHaA3$l9R4Bftpv9$sKgFEJBSNeOdo$unTMyD76sbxZU5HDi" +
		"rnlsH9wrXOjBxn#TXEg4$ygNrTMjao$x8XVsoMHBI9icPFJN6#FA18j#2BqFEDnrVXbgHRW" +
		"3cBA3AnTzufCwJQ1dmDKVDMEFBnDgUR$FGyvHlp00cVLRc8fIX48v7MSFlwVXUmJeKQtmZW" +
		"6#31LywwkLAV9beUQn4vKFNMUBhxCUdpyLuuEjWmTT1hX4wFdq#Z9LpFazwjbYYo84Dycmh" +
		"N8QQ1SOAPuoksaZD18rty2rTC3upv1pAnwSFSHxs2x7L81sMpBFDatGwBZLeHOUWWM#5QuL" +
		"rkcWDqkMurMT#$3GeW0PMxsZuKMCcPVarq7iYJtgYq1faGODCweYHF5FrXB6sBOdRgZ1Ijg" +
		"gl2Fb0gwyAeTlDHxjvM2VoOATCVBP6sRPorDyKOujtnDpJOF5GsFHx4$htzxwXSJ5VXRR2O" +
		"jRzkc$#wVvgh1m96V3dvjy$SUlBvhQMdVkoETfj7kIlDleoNdXrxsDWraFEU3FbpbqlRtpg" +
		"AsPpsS#XToJHHJj2xe$qbdF3jAx#lUvSK4TQvVUnyKDRXGwWH2OG56NRZcYt8zqAoWVfA9U" +
		"ZbfuIwtazGhPgpgQEqbR6chyAioa#jigK#ku55dqbSRALlZyAbHUldisd324loWKve4Nk2K" +
		"Uha7QseBs3xgIxw6wwX#wb##X#waOFq8EXTP3rOpmELIl#SQZY68UInsaS2lzLLCywMIk#F" +
		"Mj5ArnS2RIXq5A1RIJ8ErOM94uZeBHUbrO2RIWSnYvp1$qkxpuwuD3l2EFJl2ESRjHrnW1R" +
		"MEu88#vu5rlABwto2a9YpZ7y7YoHHzCSlNaWvfNAPYRo7Dsk5clgbiYptSNEZ#kTz#70C58" +
		"YKVTcWew#YVI3BJu3D4k6ykCvEiD3YzmVWgV7VovPMdK$ysEx4tBOSSZshISSnxalFpD1eU" +
		"nM8CT$jYoN5yRSp$3Dez0p7ZtMMVSwogz4CFSfJ$ghekP#dZbtKRx8kQ$xJHzcLIVat5Vvm" +
		"J37OS$XCEBYTgPD84aWII1984aW#Nz04hsTXd522RtJa7avgamOEmrPpjYn5nHzoa2P24yP" +
		"1cQrHmbvof3bLElkC1TnBoEItL5cM9Xz$P0dFwEAsSMEBjFOXHQ1URP$NCoF33FuPXKFEJA" +
		"GTz25dOlQXHROzf5Xx49Dp2eM#WGQkPrZU4fIFHEVqsIYbKGhYLOIhIHQIRIIQ2NHIgALH2" +
		"k9LlvbhSWJWMeZ#8a$o0cYY5ETVjRsFwFplIzt4LtiVsVkSlbUtLLqjNmN#Zfv$ehqn5yaP" +
		"lMSDSmJVuIO8pxL1LZG4NEuTfPbp6Su6UePKNHF$Fvx4C4nsn4xdfux1M8Eynv5GSHZey3t" +
		"6NJMv9YOLGkHt5anQbYUMWNexzFf13rt2lrTIlluYivCBsmPuvarRLKvUXWQssH6TTO4FBC" +
		"UuJW29uUyVwFZN213yq1B2zaXOioq9rpCGZ2F6ymoPO4$51xcMByfaP2Ua9wGdf2Ua1xfKp" +
		"fNk$t2AtQm2wk6EvsY$4skiB3EfXOgDD#ntEf2AL54wzXoLZJReVPnGgs$nHgzteokj4mdt" +
		"8LIelZyAfxzxDIMR2ydghCjBZPIoBDFFkJHxDq4vZXXZjkOji$MA3ynF$di$d#EsNSNGzyz" +
		"nHApN#O8HoiPRo4xlVTtmkPLGb92Ka9IGb92Ka9IGb92Ka9IGb92KaAI$JJbxlwwxGpaZ4O" +
		"$h#c$#613eshwqI3yRLImgAUvjCxujQN2PqKTYr1lJLCdbJOZu5Jd5alGioAjivqLZ$ZJFv" +
		"QV#Y#ok6fDVrBkykb852ojT5XeZxDID358gT#2sSMmTCYSOoTUEnEbIvckntJqUoYqfOlg8" +
		"TSwEFe5ltn7ls3$pegp3dw9UUwjPynW#HkJRYNCYvBrzXHNGlHwCdeIYYifAfOzuNCoZ34S" +
		"Tz$kibunUx48AqoCdSrfuKbYuRZsJ7H7#V#yZHFr4lN#pVN#$RLyPzKeh2F6xv7ftyoLiRo" +
		"mtdQu$YImKQ9Mr4QC#QPAuH437jQ8aIMp2est3c6ED#QuA$cNQXTkxHFh1Og1E$r$mleduT" +
		"YI9$oJQcpHl0XxnMOvLNCNxVQ73rZI$T##D6innhW$rK2G7o42VotZNafak0FVa74SOvCjx" +
		"m9QxeOg10lSu8vu5WIpzrvdt5Pxm#B9qR2tMznkxMrBFy7sBlfomXqnWWJkanntw7l5GfZt" +
		"YekDs#7xWNexaQ48$IrokLQ4llkTvTII$FyVjcTMZcybPEaeZ5yc3i2WhwjPL2L8gbswrKj" +
		"BZVo$9gUNbS#i$3Ycu7DQCFzafD4YNnejCtv7cKRuiFb#Hvb#XC#QArD#iaaVJbCWOLfXhq" +
		"Sh5DUbGwfL1ve1UqcfeBbIoa$o#TzH9zzP#3UU0wJaGuglXU7oFLQV5eLqj#cG7oXV$MQqN" +
		"tSxIaEAlGLbYqsmXQwhdgzQ22w59YifVnT6P#ngPNmoBQLoXZMbNDc2JO#DgcGjq#Q1TZ9A" +
		"OLrPAyByZMUzf0grKVmc8a#w$DUZvD7$ksyp8g$#$plq$#EP1#gF#1jwVYo8Y2NXOx8Atss" +
		"cKnE3rtoKgFaRAlmXmZ#3JmVV0xwDg2dgdrsIgFpsM64iZFdinZ1FGpEUrXvfDm13$wBhLg" +
		"kDkbUWV4z4baFdTn3#oCWxH#vlbVuJYNWT8rpoDeFp5r5s5ifzgkorN#7vtVW$kfaPo8DDU" +
		"3veFFfpCTBGdwoAKIwR4TKzYFHwHZmfawZ2eNZPxKGHR70pR7Ys6QTjAlr9sAAbyHzsCpy6" +
		"ds2admLYJwlmwoWpomYdh2yU3e#0l2mZd7sHmZ07uOx0DobudJ83qK$rG1ZZIVhSt06UQkG" +
		"bfH6bNc24cQzFCMypToF#7D6f0n0$3NoENMRPBQhiZGQlq5V5knYyckAidy7JhqJU4qGvPu" +
		"33bacmM#eAyBQcp2ImMcLGPm7QEsQayIr4vHe4wFCKoZuDMLU1Tm0zY$bJ7$mM8x$MEVf$M" +
		"mvjmwGNa8znd7IfYiynU5fVX0SPuLAd8$oDlLvQLTJxIjN1l2Wv7toOcPy#rmmdrr9Ozzbb" +
		"rC8yRrPPsH1pE6a9oZu2$Zbe6L69yk0Zb8oLqFyo8voIOy7Vjx1EwJvxhrFnYG4wZu6Cron" +
		"nrIz9uz360#0pB7dw$$lszUTUX9U2pxVa7xJBvjlDCDq2lJv1cVsW0nW7$P2lvahI4OpTza" +
		"OuUx2omJ$Gintw4fJS77GRR03VavojR923$ky2Zl6JV0ViXsJU5E5hLVvTIFiKQI#Zt5igx" +
		"J6Yggt1RqNxay6xWcy6RuioFweoy8srq7ySQrFo99NM2$77b1tH$ydlgtHbYrhxaDy0OwER" +
		"4I#3$ad3U4s6lVJkIOOjazS0F#PZyfTs6oL$1uBVvEzY3cSXV4Yb7pRBf9m5EQyXxM#4Qs5" +
		"yLK7uk4N6KRGzIvK5UH#6F62gZZcLKXqSQsrAMUXuLDdxCgBQvL06VNXQVIEjDjRbPkSXtj" +
		"cKcturPEz2$GBKXp#lZlKa1UFmj3UD$6Qle9x#Vyd$HDfi9GTpfHd6x6b7L5keKti4oW3xw" +
		"SgFr5v8bEL5l9CHzovKsD4FoJNHzrW3FHyXVZt2Bw7k8OJH$wTYFv6C$Yiv38Hvre3PRUa1" +
		"deggJyw2NIjqL#6$L7uhWrV$oU3PtrjqnPnBmNYeZl6P$0t263$fWy3l0mU6ChqHlX#q2RJ" +
		"7h7SgV6VANZDU#m$eTfNIgm9y6VH9GVzwgoeTzJuyZl5XsO#aOAodQ23uSAzU3px8oq4Ouz" +
		"vpGIr0w1il#j5xFkXQ46pZRGMgGLG7$Uo1NKv$0t6TOnttjW71djuko4TT3#Ad7qOSwr4o$" +
		"FSPTH6#4GIRUk5tlPYVPs2jy49lBsnN1tF4e#SD0Rq9mhoeWpdhqSjXtVB2$tidOJwD1CSy" +
		"gu7nx$qMN6yNQMVC11y5$U7RFLEH$ZpY4y3XRxoZaOy#zIASj1roCLuyQFlCEaWRYpXyNzQ" +
		"zYCE7Uxz4dOtWFs1F1kDuiHyv4tF1knDbT4pwdkDhfCr06iPgNTWyQpNYkisnZqi1jheNe0" +
		"pAbiV#o0jRrqK$DuTFAG#VwrLxejI0iLGN#o6lnNzLN6#6lPeg0wpPnwprYYAqWpKe5VsQq" +
		"gPmNivdaBqE#QUhikYVLFHpAlevjOsHbeprjoJw8nNhMcf34DRlDAmJgOsD$FAl8Wm$w86z" +
		"Kk4xKxEHjaF9Wtz9i$Zhr3iLnnXFBJ32kTZRfNO7ZL5ZKr#FDnV6MhE56Mx#YC5BO6nvL5i" +
		"Lr1uaoOFwFwkq3rLxwFzAsMRz2j0vxHJKnvXBQsEcirAANsTlEwLF93QFXA3B1MQOh$25iN" +
		"LURgGrGTznfLkJDhe$1ySwMGBhI1ECcPAOkqtWxqfsYXN6mfYRR8MFAct1YlK0Gu3IpokwR" +
		"jEAA8TvrXJZiepQFpOOQl0ow0#wn0YpAyqwEHqizJ4sopnaXAcFgZz3vS5VbddLB4k3aRV1" +
		"Z9VHJvmBBFbRC5vgni96$oQ23Ox1dltDEAcreQ4wb$BP25zZvjUxs0mtlCSCUwOK3mTXJM$" +
		"uh14ke#PjK$ZfCjYFvJG8NeUDiCSzUVPuQgt2THgECtYfqGQlL3r0nbfxF2aZeFwc00ng$v" +
		"NJtIAZqFaOzPIVhjJAJAkmCK3M1qhMG8iiYwzlL25GRY1MoC3#oAFEoqbNA3xDB9DsNv1wM" +
		"DzOBJDUOb00hiQMy2K6JovlBzCKvygofwcydWQlQz4ZgO4PpYrfXdCizg2cXR7bJ0c8xojS" +
		"fkGnCyps6RmCzZ2vvGBBMigzX$mweV9LcKDccE17QqmsurMhMFBUGj#SOuJBzb6wBrDuBxF" +
		"8#y8klr8VCzoebJLFfQazVAKlpBIwNGrUhxFYNwio5b$MQ831anOfV3W39ArI6EgPvPBKVg" +
		"FHbmPFhcPmZhM4TrJuPvlbUTb0Z7Qy9Jy9dPUpmoBduSBvoS#OuOfjbMuAV$ro1g#SRj5nW" +
		"Kexp#1DfyFssATNliyim#0xad6Ehg$s8$NLtg2ochDbiVOtKhwcyZo3DyD#lppMYif7J3cD" +
		"amnUHPsNzRD6UPmbggZx2Zd#iaPSFvUaL59XoxYlyfpIVuh1AREm7P9wg3RF0lRLoWwrx6N" +
		"ggVDC#GE5wpV6$Zf5xTcQ7mxCBro#P83$qyzB5SuruyaRb1v3xUKyDOgI7Iu1yyq6JrVt#z" +
		"9t1kGhcsGqCjDIMbZB66bLnbdgl1wa7UNpCtgOQNL76Rp#OiMLxyputk0LnngyWV9j3TGyp" +
		"z0iSkSQlFJ51c#6ysw5An5$GTLHznCQz5Bbr1cp0iuZZRSOuLFA6ZmBPzWAEC#SSfCfludY" +
		"fwWzgtxMg83nTufj$R3hsgIIFUxjKRYCVZQfC2oK32VIxuq5aOVpZVSsIvlF1g$B0zPfJoy" +
		"pNB6TgZl5JAjlwLTFqFk75jau$tijSzTxF7YvklijRIg$vz7laofVqrpXI3t7B9TgyVdUdo" +
		"pfwhvsgaMc9vq2Bd6QE5MK5VyH5ueBnFaYJvmdMeXpHQx84TdY7D5SP8bcehge9iuIvMLvd" +
		"EP52P6AJvmrnJ21tP30QLayg#Jr5Lr4Pt6Zk46q5Mr4Qz5AN2#k4zUAQyJLuYfnfRX2N2uk" +
		"4ot5fU8ISR6uIBmZtXO3KQ#VU4OyBNeZr4Tq4Xr51z5Uj1EtY9l5JTgR6ixjskkwVEqZxKE" +
		"K#LgszGLeZ0oD5hU9MyMT2iCBefVe8UwLuUxYHSaVqEEYG1mG#yK#iLVi4Rl5Bh5J$2vsYE" +
		"rYczWgjeZDOfFOA7uJlueDOhrO9zQADMArM2LMYb$42h5SB1C$YwLYYLWi5ec5uXznNFmjZ" +
		"ecZueWuB0w9W#8lyQVuGymKCyGiaI#wYKzaon#BeVWS0XgiyDqlFnV8ptdGQRzuI3medXHF" +
		"Y9xYSV6OU5Gy8XuMSyKSyQEOBQQWr2JnlPW0$WrehFXSZ18ZjVV5SRCVjVUaj1e8xRFshxP" +
		"NL1QLm9U05eCMWHQ2qBhsatqiQ6D4ENzulkY5pwdQP6rIGAalvUVtOggOBgPfDsXjPNo2Xd" +
		"EnDawYE5sSWV1Negge8lDUKpNxQo$Ziv#6yQ9Xl8WHOhZuJDRuDA2DTsLg6L26AANzfHtG$" +
		"XGf8Xdn911Ep89hnxN3ikmXxI1A$A7R2J6X7P5SK$5$j6DYilXMZDEEejJV0ZC0$JGRbjNj" +
		"#eFyd2Y#4#C34BmT4D$b3#saW4lRxW$DrURWSxOCpz9#r6P8FSxKfXUgCr2S8afRuh23zeb" +
		"ciuCsG9ifQq$JTWJKtkOFRLRyDv6c$QmjjPJPQenyXBOelj6VjqdnNq7Bq4OlYLFY4HrD6U" +
		"8UVIR9q7toyoxG890#1zyNxubtnGS8FIdpseCwoD0SCHTo#shFopPUqLwI$3j$wzygFbRRu" +
		"$CyifxqF3AaF8zTQtqS#yCISU3OjFPJyI#V$HpBO0w9#Lfh3RjJyP6uMzm1tbNS3YIwPPuI" +
		"0yHRuatnXdXTl2PU5Vt5A#9byPB2sbDxJ7jKUqJ57lRhqCFUXjRL5hj7VjwbtQbrrUwMuGT" +
		"KpktoypRjLgsBrXcXJXhwKkkWmKzghuBQo$nse5kq6$5vatQpN#hZs9cEPUd4G9poYKL48$" +
		"w5r8Sy8AvuClL4cfKU0dLNr0FqCEWfa3vxPuC$WNe69TDgo34eIT9yXEUZp4BmNg3bf3zFP" +
		"WWdqJBmPQYtI1AZxnHDiD3to9k9UeyY$2Z2Vu3$WVYVaZmq1tmE#36a7mF$3LodeHRwAm9w" +
		"MPA7deLSWpoAaa5CaI#DqTDXqkEIaa0U45TnZwHdaFuCU5#azKNUypPA0dba#3dawrIWg5y" +
		"Hz54OD2H2UhKOz4Knw7NGvnRwLD5RYhvIz1e8ApY8qIkmstZORJp2OnLzWhHXu3fjH7WZ#0" +
		"fGVuGNI68qMHAdaU0wZKPuDF96eo$MGlPQf8r1U0pInb0A$Gt#Dz8EWXy4tupocy0t8Vu3E" +
		"7OJ88Omf#6WYQ0tG6#I5vHCNu8FafHCkiV$5cK7KHge12XLvVcu6HudAHcK1Ye1IbLfFcw6" +
		"rw6zfP2hqm241m3RGF21u6#3lmt#3cHz3HeCMWySwr7sEDAF8xu5uIqezmlqFeIqTq7VWBO" +
		"YNQT$5Bs7jFVzb4I7KNS3wcd8q#a3X3y69dsTduxuamWV1VzH4j5Fu0PvQAuaHhD0Cq2JG5" +
		"Cb4Rs4l1SGrab8yj0Ky2dGTGfa7a5u6lXdi4rlqC#8loY9WpmqYZoi5FWsODmckKwSjeDse" +
		"DplaZYj15zfS9O6pvy6xWMbWh331p6M0YeX7$Tp4AET5je7#VlG5aE#IHv97FcxqEvkoD#D" +
		"SgjGtuDq3zBt87qF#07GFD1#v1la0N557aL9B0bray2JKJyPvVSYVI$uOw17G6j0lu8#$2$" +
		"yNU1V");

	private WorkingParseResult fWorking;

	// Collect the errors into a list of IParseErrors and let the custom error recovery mechanism handle it
	private class JSEvents extends Events
	{
		public void scannerError(Scanner.Exception e)
		{
		}

		public void syntaxError(Symbol token)
		{
			if (token != null && fWorking != null)
			{
				fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, token, IParseError.Severity.ERROR));
			}
		}

		public void unexpectedTokenRemoved(Symbol token)
		{
		}

		public void missingTokenInserted(Symbol token)
		{
		}

		public void missingTokensInserted(List<Symbol> tokens)
		{
			if (tokens != null && tokens.size() == 1 && tokens.get(0).getId() == Terminals.SEMICOLON)
			{
				// remove last error
				if (fWorking != null)
				{
					List<IParseError> errors = fWorking.getErrors();
					IParseError lastError = (errors.isEmpty()) ? null : errors.get(errors.size() - 1);

					if (lastError != null)
					{
						fWorking.removeError(lastError);
					}
				}
			}

			super.missingTokensInserted(tokens);
		}

		public void misspelledTokenReplaced(Symbol token)
		{
		}

		public void errorPhraseRemoved(Symbol error)
		{
		}
	}

	private final List<IRecoveryStrategy> recoveryStrategies;
	private JSFlexScanner fScanner;
	private IProblem.Severity fSemicolonSeverity = IProblem.Severity.WARNING;

    /**
     * attachPostDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPostDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each post-documentation block
        for (Symbol block : this.fScanner.getVSDocComments())
        {
            int index = block.getStart() - 1;

            while (index >= 0 && Character.isWhitespace(source.charAt(index)))
            {
                index--;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                switch (node.getNodeType())
                {
                    case IJSNodeTypes.STATEMENTS:
                        IParseNode parent = node.getParent();

                        if (parent.getNodeType() == IJSNodeTypes.FUNCTION)
                        {
                            ((JSNode) parent).setPostDocumentation(block);
                        }
                        break;

                    default:
                        ((JSNode) node).setPostDocumentation(block);
                        break;
                }
            }
        }
    }

    /**
     * attachPreDocumentationBlocks
     * 
     * @param root
     * @param source
     */
    private void attachPreDocumentationBlocks(JSParseRootNode root, String source)
    {
        // process each pre-documentation block
        List<Symbol> sDocComments = fScanner.getSDocComments();
        for (Symbol comment : sDocComments)
        {
            int index = comment.getEnd() + 1;

            while (index < source.length() && Character.isWhitespace(source.charAt(index)))
            {
                index++;
            }

            IParseNode node = root.getNodeAtOffset(index);

            if (node instanceof JSNode)
            {
                if (node instanceof JSGroupNode && node.getFirstChild() instanceof JSFunctionNode)
                {
                    ((JSNode) node.getFirstChild()).setPreDocumentation(comment);
                }
                else if (node instanceof JSIdentifierNode && node.getParent() instanceof JSNameValuePairNode)
                {
                    // associate documentation with property's value
                    JSNameValuePairNode entry = (JSNameValuePairNode) node.getParent();
                    ((JSNode) entry.getValue()).setPreDocumentation(comment);
                }
                else
                {
                    IParseNode statement = ((JSNode) node).getContainingStatementNode();

                    if (statement instanceof JSAssignmentNode)
                    {
                        ((JSNode) statement.getLastChild()).setPreDocumentation(comment);
                    }
                    else
                    {
                        switch (node.getNodeType())
                        {
                            case IJSNodeTypes.VAR:
                                // associate documentation with first declared variable's value
                                JSVarNode varNode = (JSVarNode) node;
                                ((JSNode) varNode.getFirstChild().getLastChild()).setPreDocumentation(comment);
                                break;

                            default:
                                ((JSNode) node).setPreDocumentation(comment);
                                break;
                        }
                    }
                }
            }
        }
    }

	/**
	 * getNextSymbolIndex
	 * 
	 * @return
	 */
	protected Symbol getLastSymbol()
	{
		Symbol result = null;

		if (0 <= this.top && this.top < this._symbols.length)
		{
			result = this._symbols[this.top];
		}

		return result;
	}

    public synchronized ParseResult parse(IParseState parseState) throws java.lang.Exception
    {
        WorkingParseResult working = new WorkingParseResult();
        parse(parseState, working);
        return working.getImmutableResult();
    }


	/*
	 * (non-Javadoc)
	 * @see com.aptana.parsing.IParser#parse(com.aptana.parsing.IParseState)
	 */
	protected synchronized void parse(IParseState parseState, WorkingParseResult working) throws java.lang.Exception
	{
		fWorking = working;
		String severity = Platform.getPreferencesService().getString(JSCorePlugin.PLUGIN_ID, IPreferenceConstants.PREF_MISSING_SEMICOLON_SEVERITY, null, null);
		fSemicolonSeverity = IProblem.Severity.create(severity);

		// make sure we have some source
		String source = parseState.getSource();

		// create scanner and send source to it
		fScanner = new JSFlexScanner();
		fScanner.setSource(source);

		// determine if we need to collect and/or attach comments
		boolean attachComments = true;
		boolean collectComments = true;

		if (parseState instanceof JSParseState)
		{
			JSParseState jsParseState = (JSParseState) parseState;

			// NOTE: In order to attach comments, we have to collect them, hence the OR in collectComments
			attachComments = jsParseState.attachComments();
			collectComments = jsParseState.attachComments() || jsParseState.collectComments();
		}

		fScanner.setCollectComments(collectComments);

		try
		{
			JSParseRootNode result;
			try
			{
				// parse
				result = (JSParseRootNode) parse(fScanner);

				if (attachComments)
				{
					attachComments(source, result);
				}

				if (collectComments)
				{
					collectComments(result);
				}
			}
			finally
			{
				// clear scanner for garbage collection
				if (fScanner != null)
				{
					fScanner.yyclose();
					fScanner = null;
				}
			}

			// update node offsets
			int start = parseState.getStartingOffset();
			int length = source.length();

			// align root with zero-based offset
			result.setLocation(0, length - 1);

			if (start != 0)
			{
				// shift all offsets to the correct position
				ParseUtil.addOffset(result, start);
			}

			// store results in the parse state
			fWorking.setParseResult(result);
		}
		finally
		{
			fWorking = null;
		}
	}

	
    private void attachComments(String source, JSParseRootNode result)
    {
        // attach documentation
        attachPreDocumentationBlocks(result, source);
        attachPostDocumentationBlocks(result, source);
    }

    private void collectComments(JSParseRootNode result)
    {
        // create a list of all comments and attach to root node

        List<Symbol> sDocComments = fScanner.getSDocComments();
        List<Symbol> vsDocComments = fScanner.getVSDocComments();
        List<Symbol> singleLineComments = fScanner.getSingleLineComments();
        List<Symbol> multiLineComments = fScanner.getMultiLineComments();

        List<JSCommentNode> comments = new ArrayList<JSCommentNode>(sDocComments.size() + vsDocComments.size()
                + singleLineComments.size() + multiLineComments.size());

        for (Symbol symbol : sDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : vsDocComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.VSDOC_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : singleLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.SINGLE_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        for (Symbol symbol : multiLineComments)
        {
            comments.add(new JSCommentNode(IJSNodeTypes.MULTI_LINE_COMMENT, symbol.getStart(), symbol.getEnd()));
        }

        result.setCommentNodes(comments.toArray(new IParseNode[comments.size()]));
    }

	/*
	 * (non-Javadoc)
	 * @see beaver.Parser#recoverFromError(beaver.Symbol, beaver.Parser.TokenStream)
	 */
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws IOException, Parser.Exception
	{
		boolean success = false;

		if (this.recoveryStrategies != null)
		{
			// NOTE: Consider building a Map<Object,List<IRecoveryStrategy>> which
			// would allow us to reduce the number of recovery strategies that will
			// be attempted based on the last symbol on the stack. We may need
			// catch-all cases: 1) try these before the mapped strategies, 2)
			// try the strategies, 3) try these after the mapped strategies
			for (IRecoveryStrategy strategy : this.recoveryStrategies)
			{
				if (strategy.recover(this, getLastSymbol(), token, in, report))
				{
					success = true;
					break;
				}
			}
		}

		if (success == false)
		{
			super.recoverFromError(token, in);
		}
	}

	public JSParser() {
		super(PARSING_TABLES);


		report = new JSEvents();

		// @formatter:off
		recoveryStrategies = new ArrayList<IRecoveryStrategy>(10);

		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.SEMICOLON, ";")
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Events report)
					throws IOException
			{
				boolean recovered = super.recover(parser, lastToken, currentToken, in, report);
				if (recovered && fSemicolonSeverity != IProblem.Severity.IGNORE)
				{
					fWorking.addError(new ParseError(IJSConstants.CONTENT_TYPE_JS, lastToken, Messages.JSParser_MissingSemicolonMsg, fSemicolonSeverity));
				}
				return recovered;
			}
		});
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.RPAREN, ")", JSTokenType.SEMICOLON, ";"));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.SEMICOLON, ";", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.DOT, JSTokenType.NEW, JSTokenType.EQUAL));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.LPAREN));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "", JSTokenType.COLON, ":", JSTokenType.DOT));
		recoveryStrategies.add(new JSInsertionRecoveryStrategy(JSTokenType.LCURLY, "{", JSTokenType.RCURLY, "}", JSTokenType.RPAREN));
		recoveryStrategies.add(new IRecoveryStrategy()
		{
			public boolean recover(IParser parser, Symbol lastToken, Symbol currentToken, TokenStream in, Parser.Events report) throws IOException
			{
				boolean result = false;

				if (top >= 2)
				{
					Symbol symbol1 = _symbols[top - 2];
					Symbol symbol2 = _symbols[top - 1];

					if (lastToken.getId() == JSTokenType.COMMA.getIndex() && symbol2.value instanceof List<?> && symbol1.getId() == JSTokenType.LPAREN.getIndex())
					{
						Symbol term = new Symbol(JSTokenType.IDENTIFIER.getIndex(), currentToken.getStart(), currentToken.getStart() - 1, "");
						Simulator sim = new Simulator();

						in.alloc(2);
						in.insert(term, currentToken);
						in.rewind();

						if (sim.parse(in))
						{
							result = true;

							in.rewind();

							report.missingTokenInserted(term);
						}
					}
				}

				return result;
			}
		});

		JSInsertionRecoveryStrategy completeProperty = new JSInsertionRecoveryStrategy(JSTokenType.IDENTIFIER, "");
		completeProperty.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty);

		JSInsertionRecoveryStrategy completeProperty2 = new JSInsertionRecoveryStrategy(JSTokenType.COLON, ":", JSTokenType.IDENTIFIER, "");
		completeProperty2.addCurrentTokenTypes(JSTokenType.RCURLY);
		recoveryStrategies.add(completeProperty2);
		// @formatter:on
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		switch(rule_num) {
			case 51: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 52: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN RPAREN
			{
					
			return new JSParametersNode();
			}
			case 53: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN BindingRestElement.e RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSRestElementNode e = (JSRestElementNode) _symbol_e.value;
					
			return new JSParametersNode(e);
			}
			case 54: // CoverParenthesizedExpressionAndArrowParameterList = LPAREN Expression.e COMMA BindingRestElement.r RPAREN
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 4];
					final JSRestElementNode r = (JSRestElementNode) _symbol_r.value;
					
			return new JSParametersNode(e, r);
			}
			case 59: // NullLiteral = NULL.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNullNode(n);
			}
			case 60: // BooleanLiteral = TRUE.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSTrueNode(t);
			}
			case 61: // BooleanLiteral = FALSE.f
			{
					final Symbol f = _symbols[offset + 1];
					
			return new JSFalseNode(f);
			}
			case 62: // NumericLiteral = NUMBER.n
			{
					final Symbol n = _symbols[offset + 1];
					
			return new JSNumberNode(n);
			}
			case 63: // StringLiteral = STRING.s
			{
					final Symbol s = _symbols[offset + 1];
					
			return new JSStringNode(s);
			}
			case 64: // RegularExpressionLiteral = REGEX.r
			{
					final Symbol r = _symbols[offset + 1];
					
			return new JSRegexNode(r);
			}
			case 67: // ArrayLiteral = LBRACKET.l opt$Elision.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			if (e == null) {
				return new JSArrayNode(l, r);
			}
			e.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e);
			}
			case 68: // ArrayLiteral = LBRACKET.l ElementList.e RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, e);
			}
			case 69: // ArrayLiteral = LBRACKET.l ElementList.e COMMA opt$Elision.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElementsNode e = (JSElementsNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 4];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 5];
					
			if (n == null) {
				return new JSArrayNode(l, r, e, new JSNullNode());
			}
			n.addChild(new JSNullNode());
			return new JSArrayNode(l, r, e, n);
			}
			case 70: // ElementList = opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 71: // ElementList = opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n == null) {
				return new JSElementsNode(e);
			}
			return new JSElementsNode(n, e);
			}
			case 72: // ElementList = ElementList.l COMMA opt$Elision.n SingleExpression.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSNode e = (JSNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 73: // ElementList = ElementList.l COMMA opt$Elision.n SpreadElement.e
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSElementsNode l = (JSElementsNode) _symbol_l.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSElisionNode n = (JSElisionNode) _symbol_n.value;
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSSpreadElementNode e = (JSSpreadElementNode) _symbol_e.value;
					
			if (n != null) {
				l.addChild(n);
			}
			l.addChild(e);

			return l;
			}
			case 74: // Elision = Elision.e COMMA
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					
			e.addChild(new JSNullNode());

			return e;
			}
			case 75: // Elision = COMMA
			{
					
			return new JSElisionNode(new JSNullNode());
			}
			case 76: // SpreadElement = DOT_DOT_DOT.d SingleExpression.e
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSSpreadElementNode(d, e);
			}
			case 77: // ObjectLiteral = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 80: // ObjectLiteral = LCURLY.l PropertyDefinitionList.p opt$COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 81: // PropertyDefinitionList = PropertyDefinition
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 82: // PropertyDefinitionList = PropertyDefinitionList COMMA PropertyDefinition
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 83: // PropertyDefinition = PropertyName.n COLON.c SingleExpression.v
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_v = _symbols[offset + 3];
					final JSNode v = (JSNode) _symbol_v.value;
					
			return new JSNameValuePairNode(n, c, v);
			}
			case 87: // LiteralPropertyName = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 91: // Initializer = EQUAL.e SingleExpression.expr
			{
					final Symbol e = _symbols[offset + 1];
					final Symbol _symbol_expr = _symbols[offset + 2];
					final JSNode expr = (JSNode) _symbol_expr.value;
					
			return new JSInitializerNode(e, expr);
			}
			case 98: // Arguments = LPAREN RPAREN
			{
					
			return new JSArgumentsNode();
			}
			case 99: // Arguments = LPAREN ArgumentList.a RPAREN
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			return new JSArgumentsNode(a);
			}
			case 100: // ArgumentList = ArgumentListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 101: // ArgumentList = ArgumentList COMMA ArgumentListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 119: // Expression = Expression.l COMMA SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSCommaNode(l, r);
			}
			case 120: // SingleExpression = SingleExpression.e PostUnaryOperator.o
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol o = _symbols[offset + 2];
					
			return new JSPostUnaryOperatorNode(o, e);
			}
			case 121: // SingleExpression = PreUnaryOperator.o SingleExpression.e
			{
					final Symbol o = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSPreUnaryOperatorNode(o, e);
			}
			case 122: // SingleExpression = SingleExpression.l BinaryArithmeticOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryArithmeticOperatorNode(l, o, r);
			}
			case 123: // SingleExpression = SingleExpression.l BinaryBooleanOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSBinaryBooleanOperatorNode(l, o, r);
			}
			case 124: // SingleExpression = SingleExpression.l QUESTION.q SingleExpression.t COLON.c SingleExpression.f
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol q = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					final Symbol c = _symbols[offset + 4];
					final Symbol _symbol_f = _symbols[offset + 5];
					final JSNode f = (JSNode) _symbol_f.value;
					
			return new JSConditionalNode(l, q, t, c, f);
			}
			case 127: // SingleExpression = LeftHandSideExpression.l EQUAL.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 128: // SingleExpression = LeftHandSideExpression.l AssignmentOperator.o SingleExpression.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					
			return new JSAssignmentNode(l, o, r);
			}
			case 130: // PrimaryExpression = THIS.t
			{
					final Symbol t = _symbols[offset + 1];
					
			return new JSThisNode(t);
			}
			case 131: // PrimaryExpression = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 141: // MemberExpression = MemberExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 142: // MemberExpression = MemberExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 146: // MemberExpression = NEW MemberExpression.e Arguments.r
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSConstructNode(e, r);
			}
			case 150: // NewExpression = NEW NewExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSConstructNode(e, new JSEmptyNode(e));
			}
			case 151: // CallExpression = MemberExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 153: // CallExpression = CallExpression.l Arguments.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol _symbol_r = _symbols[offset + 2];
					final JSArgumentsNode r = (JSArgumentsNode) _symbol_r.value;
					
			return new JSInvokeNode(l, r);
			}
			case 154: // CallExpression = CallExpression.l LBRACKET.lb Expression.r RBRACKET.rb
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol lb = _symbols[offset + 2];
					final Symbol _symbol_r = _symbols[offset + 3];
					final JSNode r = (JSNode) _symbol_r.value;
					final Symbol rb = _symbols[offset + 4];
					
			return new JSGetElementNode(l, lb, r, rb);
			}
			case 155: // CallExpression = CallExpression.l DOT.o IdentifierName.r
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNode l = (JSNode) _symbol_l.value;
					final Symbol o = _symbols[offset + 2];
					final Symbol r = _symbols[offset + 3];
					
			return new JSGetPropertyNode(l, o, new JSIdentifierNode(r));
			}
			case 204: // Statement = error
			{
					
			return new JSErrorNode();
			}
			case 219: // Statement_NoIf = error
			{
					
			return new JSErrorNode();
			}
			case 220: // EmptyStatement = SEMICOLON.s
			{
					final Symbol s = _symbols[offset + 1];
					
			JSNode node = new JSEmptyNode(s);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 233: // Block = LCURLY opt$StatementList.a RCURLY
			{
					final Symbol _symbol_a = _symbols[offset + 2];
					final ArrayList _list_a = (ArrayList) _symbol_a.value;
					final JSNode[] a = _list_a == null ? new JSNode[0] : (JSNode[]) _list_a.toArray(new JSNode[_list_a.size()]);
					
			if (a == null) {
				return new JSStatementsNode();
			}
			return new JSStatementsNode(a);
			}
			case 234: // StatementList = StatementList StatementListItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 235: // StatementList = StatementListItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 238: // LexicalDeclaration = LetOrConst.v BindingList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			// FIXME Determine if this was let or const and use special subclass!
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 241: // BindingList = BindingList COMMA LexicalBinding
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 242: // BindingList = LexicalBinding
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 244: // VariableStatement = VAR.v VariableDeclarationList.l SEMICOLON
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					
			JSNode node = new JSVarNode(v, l);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 245: // VariableDeclarationList = VariableDeclarationList COMMA VariableDeclaration
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 246: // VariableDeclarationList = VariableDeclaration
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 251: // ObjectBindingPattern = LCURLY.l RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol r = _symbols[offset + 2];
					
			return new JSObjectNode(l, r);
			}
			case 252: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSObjectNode(l, r, p);
			}
			case 253: // ObjectBindingPattern = LCURLY.l BindingPropertyList.p COMMA RCURLY.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_p = _symbols[offset + 2];
					final ArrayList _list_p = (ArrayList) _symbol_p.value;
					final JSNode[] p = _list_p == null ? new JSNode[0] : (JSNode[]) _list_p.toArray(new JSNode[_list_p.size()]);
					final Symbol r = _symbols[offset + 4];
					
			return new JSObjectNode(l, r, p);
			}
			case 256: // ArrayBindingPattern = LBRACKET.l opt$Elision.e opt$BindingRestElement.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSRestElementNode n = (JSRestElementNode) _symbol_n.value;
					final Symbol r = _symbols[offset + 4];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, e);
			}
			case 257: // ArrayBindingPattern = LBRACKET.l BindingElementList.n RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol r = _symbols[offset + 3];
					
			return new JSArrayNode(l, r, n);
			}
			case 258: // ArrayBindingPattern = LBRACKET.l BindingElementList.n COMMA opt$Elision.e opt$BindingRestElement.z RBRACKET.r
			{
					final Symbol l = _symbols[offset + 1];
					final Symbol _symbol_n = _symbols[offset + 2];
					final ArrayList _list_n = (ArrayList) _symbol_n.value;
					final JSNode[] n = _list_n == null ? new JSNode[0] : (JSNode[]) _list_n.toArray(new JSNode[_list_n.size()]);
					final Symbol _symbol_e = _symbols[offset + 4];
					final JSElisionNode e = (JSElisionNode) _symbol_e.value;
					final Symbol _symbol_z = _symbols[offset + 5];
					final JSRestElementNode z = (JSRestElementNode) _symbol_z.value;
					final Symbol r = _symbols[offset + 6];
					
			// FIXME Handle elision, rest element
			return new JSArrayNode(l, r, n);
			}
			case 259: // BindingPropertyList = BindingPropertyList COMMA BindingProperty
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 260: // BindingPropertyList = BindingProperty
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 261: // BindingElementList = BindingElementList COMMA BindingElisionElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 262: // BindingElementList = BindingElisionElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 265: // BindingProperty = PropertyName.n COLON.c BindingElement.e
			{
					final Symbol _symbol_n = _symbols[offset + 1];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSNameValuePairNode(n, c, e);
			}
			case 269: // BindingElement = BindingPattern.p opt$Initializer.i
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_i = _symbols[offset + 2];
					final JSInitializerNode i = (JSInitializerNode) _symbol_i.value;
					
			if (i == null) {
				return new JSDestructuringNode(p);
			}
			return new JSDestructuringNode(p, i.getExpression());
			}
			case 270: // SingleNameBinding = Identifier.i opt$Initializer.z
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_z = _symbols[offset + 2];
					final JSInitializerNode z = (JSInitializerNode) _symbol_z.value;
					
			if (z == null) {
				return new JSIdentifierNode(i);
			}
			return new JSDeclarationNode(new JSIdentifierNode(i), z.getEquals(), z.getExpression());
			}
			case 271: // BindingRestElement = DOT_DOT_DOT.d Identifier.i
			{
					final Symbol d = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 2];
					
			return new JSRestElementNode(d, new JSIdentifierNode(i));
			}
			case 272: // ExpressionStatement = Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 1];
					final JSNode e = (JSNode) _symbol_e.value;
					
			e.setSemicolonIncluded(true);
			return e;
			}
			case 273: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 274: // IfStatement = IF LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, s, new JSEmptyNode(s));
			}
			case 275: // IfStatement_NoIf = IF LPAREN.l Expression.e RPAREN.r Statement_NoIf.sn ELSE Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_sn = _symbols[offset + 5];
					final JSNode sn = (JSNode) _symbol_sn.value;
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSIfNode(l, e, r, sn, s);
			}
			case 276: // IterationStatement = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 277: // IterationStatement = WHILE LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 280: // IterationStatement = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 281: // IterationStatement = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 282: // IterationStatement = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 283: // IterationStatement = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 284: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 285: // IterationStatement = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 286: // IterationStatement = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 287: // IterationStatement = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 288: // IterationStatement = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 289: // IterationStatement_NoIf = DO Statement.s WHILE LPAREN.l Expression.e RPAREN.r SEMICOLON.s1
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final JSNode s = (JSNode) _symbol_s.value;
					final Symbol l = _symbols[offset + 4];
					final Symbol _symbol_e = _symbols[offset + 5];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol s1 = _symbols[offset + 7];
					
 			JSNode node = new JSDoNode(s, l, e, r);
 			node.setSemicolonIncluded(true);
 			return node;
			}
			case 290: // IterationStatement_NoIf = WHILE LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSWhileNode(l, e, r, s);
			}
			case 291: // IterationStatement_NoIf = FOR LPAREN.l opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 SEMICOLON.s2 opt$Expression.e3 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e1 = _symbols[offset + 3];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 4];
					final Symbol _symbol_e2 = _symbols[offset + 5];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol s2 = _symbols[offset + 6];
					final Symbol _symbol_e3 = _symbols[offset + 7];
					final JSNode e3 = (JSNode) _symbol_e3.value;
					final Symbol r = _symbols[offset + 8];
					final Symbol _symbol_s = _symbols[offset + 9];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			JSNode expr3 = e3;
			if (expr3 == null) {
				expr3 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, expr1, s1, expr2, s2, expr3, r, s);
			}
			case 292: // IterationStatement_NoIf = FOR LPAREN.l VAR.v VariableDeclarationList.i SEMICOLON.s1 opt$Expression.e1 SEMICOLON.s2 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final ArrayList _list_i = (ArrayList) _symbol_i.value;
					final JSNode[] i = _list_i == null ? new JSNode[0] : (JSNode[]) _list_i.toArray(new JSNode[_list_i.size()]);
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e1 = _symbols[offset + 6];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s2 = _symbols[offset + 7];
					final Symbol _symbol_e2 = _symbols[offset + 8];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 9];
					final Symbol _symbol_s = _symbols[offset + 10];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(s1);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s2);
			}
 			return new JSForNode(l, new JSVarNode(v, i), s1, expr1, s2, expr2, r, s);
			}
			case 293: // IterationStatement_NoIf = FOR LPAREN.l LexicalDeclaration.decl opt$Expression.e1 SEMICOLON.s1 opt$Expression.e2 RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSVarNode decl = (JSVarNode) _symbol_decl.value;
					final Symbol _symbol_e1 = _symbols[offset + 4];
					final JSNode e1 = (JSNode) _symbol_e1.value;
					final Symbol s1 = _symbols[offset + 5];
					final Symbol _symbol_e2 = _symbols[offset + 6];
					final JSNode e2 = (JSNode) _symbol_e2.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode expr1 = e1;
			if (expr1 == null) {
				expr1 = new JSEmptyNode(l);
			}
			JSNode expr2 = e2;
			if (expr2 == null) {
				expr2 = new JSEmptyNode(s1);
			}
			// FIXME Grab semicolon from decl to inject here?
 			return new JSForNode(l, decl, null, expr1, s1, expr2, r, s);
			}
			case 294: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, i, in, o, r, s);
			}
			case 295: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol in = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, new JSVarNode(v, i), in, o, r, s);
			}
			case 296: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl IN.in Expression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol in = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForInNode(l, decl, in, o, r, s);
			}
			case 297: // IterationStatement_NoIf = FOR LPAREN.l SingleExpression.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, i, of, o, r, s);
			}
			case 298: // IterationStatement_NoIf = FOR LPAREN.l VAR.v ForBinding.i OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol v = _symbols[offset + 3];
					final Symbol _symbol_i = _symbols[offset + 4];
					final JSNode i = (JSNode) _symbol_i.value;
					final Symbol of = _symbols[offset + 5];
					final Symbol _symbol_o = _symbols[offset + 6];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 7];
					final Symbol _symbol_s = _symbols[offset + 8];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, new JSVarNode(v, i), of, o, r, s);
			}
			case 299: // IterationStatement_NoIf = FOR LPAREN.l ForDeclaration.decl OF.of SingleExpression.o RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_decl = _symbols[offset + 3];
					final JSNode decl = (JSNode) _symbol_decl.value;
					final Symbol of = _symbols[offset + 4];
					final Symbol _symbol_o = _symbols[offset + 5];
					final JSNode o = (JSNode) _symbol_o.value;
					final Symbol r = _symbols[offset + 6];
					final Symbol _symbol_s = _symbols[offset + 7];
					final JSNode s = (JSNode) _symbol_s.value;
					
 			return new JSForOfNode(l, decl, of, o, r, s);
			}
			case 300: // ForDeclaration = LetOrConst.v ForBinding.l
			{
					final Symbol v = _symbols[offset + 1];
					final Symbol _symbol_l = _symbols[offset + 2];
					final JSNode l = (JSNode) _symbol_l.value;
					
			// FIXME Determine if this was let or const and use special subclass!
			return new JSVarNode(v, l);
			}
			case 301: // ForBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 303: // ContinueStatement = CONTINUE SEMICOLON
			{
					
			JSNode node = new JSContinueNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 304: // ContinueStatement = CONTINUE Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSContinueNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 305: // BreakStatement = BREAK SEMICOLON
			{
					
			JSNode node = new JSBreakNode();
			node.setSemicolonIncluded(true);
			return node;
			}
			case 306: // BreakStatement = BREAK Identifier.i SEMICOLON
			{
					final Symbol i = _symbols[offset + 2];
					
			JSNode node = new JSBreakNode(i);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 307: // ReturnStatement = RETURN.r SEMICOLON
			{
					final Symbol r = _symbols[offset + 1];
					
			JSNode node = new JSReturnNode(new JSEmptyNode(r));
			node.setSemicolonIncluded(true);
			return node;
			}
			case 308: // ReturnStatement = RETURN Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSReturnNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 309: // WithStatement = WITH LPAREN.l Expression.e RPAREN.r Statement.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 310: // WithStatement_NoIf = WITH LPAREN.l Expression.e RPAREN.r Statement_NoIf.s
			{
					final Symbol l = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol r = _symbols[offset + 4];
					final Symbol _symbol_s = _symbols[offset + 5];
					final JSNode s = (JSNode) _symbol_s.value;
					
			return new JSWithNode(l, e, r, s);
			}
			case 311: // SwitchStatement = SWITCH LPAREN.lp Expression.e RPAREN.rp CaseBlock.children
			{
					final Symbol lp = _symbols[offset + 2];
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol rp = _symbols[offset + 4];
					final Symbol _symbol_children = _symbols[offset + 5];
					final ArrayList children = (ArrayList) _symbol_children.value;
					
			final JSNode[] c1 = children == null ? new JSNode[0] : (JSNode[]) children.toArray(new JSNode[children.size()]);
			return new JSSwitchNode(lp, e, rp, null, null, c1);
			}
			case 315: // CaseBlock = LCURLY opt$CaseClauses.c1 DefaultClause.d opt$CaseClauses.c2 RCURLY
			{
					final Symbol _symbol_c1 = _symbols[offset + 2];
					final ArrayList _list_c1 = (ArrayList) _symbol_c1.value;
					final JSCaseNode[] c1 = _list_c1 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c1.toArray(new JSCaseNode[_list_c1.size()]);
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSDefaultNode d = (JSDefaultNode) _symbol_d.value;
					final Symbol _symbol_c2 = _symbols[offset + 4];
					final ArrayList _list_c2 = (ArrayList) _symbol_c2.value;
					final JSCaseNode[] c2 = _list_c2 == null ? new JSCaseNode[0] : (JSCaseNode[]) _list_c2.toArray(new JSCaseNode[_list_c2.size()]);
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			if (c1 != null) {
				for (JSNode statement : c1)
				{
					nodes.add(statement);
				}
			}
			nodes.add(d);
			if (c2 != null) {
				for (JSNode statement : c2)
				{
					nodes.add(statement);
				}
			}
			return new Symbol(nodes);
			}
			case 316: // CaseClauses = CaseClause
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 317: // CaseClauses = CaseClauses CaseClause
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 318: // CaseClause = CASE Expression.e COLON.c opt$StatementList.s
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					final Symbol c = _symbols[offset + 3];
					final Symbol _symbol_s = _symbols[offset + 4];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSCaseNode(e, c);
			}
			return new JSCaseNode(e, c, s);
			}
			case 319: // DefaultClause = DEFAULT COLON.c opt$StatementList.s
			{
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			if (s == null) {
				return new JSDefaultNode(c);
			}
			return new JSDefaultNode(c, s);
			}
			case 320: // LabelledStatement = Identifier.i COLON.c LabelledItem.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 321: // LabelledStatement_NoIf = Identifier.i COLON.c LabelledItem_NoIf.s
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol _symbol_s = _symbols[offset + 3];
					final JSNode s = (JSNode) _symbol_s.value;
					
			JSNode id = new JSIdentifierNode(i);
			id.setLocation(i.getStart(), i.getEnd());

			return new JSLabelledNode(id, c, s);
			}
			case 326: // ThrowStatement = THROW Expression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 2];
					final JSNode e = (JSNode) _symbol_e.value;
					
			JSNode node = new JSThrowNode(e);
			node.setSemicolonIncluded(true);
			return node;
			}
			case 327: // TryStatement = TRY Block.b Catch.c
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					
			return new JSTryNode(b, c, new JSEmptyNode(c));
			}
			case 328: // TryStatement = TRY Block.b Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, new JSEmptyNode(b), f);
			}
			case 329: // TryStatement = TRY Block.b Catch.c Finally.f
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final JSCatchNode c = (JSCatchNode) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 4];
					final JSFinallyNode f = (JSFinallyNode) _symbol_f.value;
					
			return new JSTryNode(b, c, f);
			}
			case 330: // Catch = CATCH LPAREN CatchParameter.p RPAREN Block.b
			{
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSCatchNode(p, b);
			}
			case 331: // Finally = FINALLY Block.b
			{
					final Symbol _symbol_b = _symbols[offset + 2];
					final JSStatementsNode b = (JSStatementsNode) _symbol_b.value;
					
			return new JSFinallyNode(b);
			}
			case 332: // CatchParameter = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 335: // FunctionDeclaration = FUNCTION Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSFunctionNode(
				new JSIdentifierNode(ident),
				params,
				body
			);
			}
			case 338: // FunctionExpression = FUNCTION.f opt$Identifier.ident LPAREN FormalParameters.params RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol f = _symbols[offset + 1];
					final Symbol ident = _symbols[offset + 2];
					final Symbol _symbol_params = _symbols[offset + 4];
					final JSParametersNode params = (JSParametersNode) _symbol_params.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			if (ident != null) {
				return new JSFunctionNode(
					new JSIdentifierNode(ident),
					params,
					body
				);
			}
			return new JSFunctionNode(
				new JSEmptyNode(f),
				params,
				body
			);
			}
			case 340: // FormalParameters = FormalParameterList.params
			{
					final Symbol _symbol_params = _symbols[offset + 1];
					final ArrayList params = (ArrayList) _symbol_params.value;
					
			final JSNode[] p = params == null ? new JSNode[0] : (JSNode[]) params.toArray(new JSNode[params.size()]);
			return new JSParametersNode(p);
			}
			case 341: // FormalParameters = 
			{
					
			return new JSParametersNode();
			}
			case 342: // FormalParameterList = FunctionRestParameter.p
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			ArrayList lst = new ArrayList();
			lst.add(p);
			return new Symbol(lst);
			}
			case 344: // FormalParameterList = FormalsList.l COMMA FunctionRestParameter.p
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSNode[] l = _list_l == null ? new JSNode[0] : (JSNode[]) _list_l.toArray(new JSNode[_list_l.size()]);
					final Symbol _symbol_p = _symbols[offset + 3];
					final JSRestElementNode p = (JSRestElementNode) _symbol_p.value;
					
			_list_l.add(p);
			return _symbol_l;
			}
			case 345: // FormalsList = FormalsList COMMA FormalParameter
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 346: // FormalsList = FormalParameter
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 350: // FunctionStatementList = StatementList.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSStatementsNode(s);
			}
			case 351: // FunctionStatementList = 
			{
					
			return new JSStatementsNode();
			}
			case 352: // ArrowFunction = ArrowParameters.p ARROW ConciseBody.body
			{
					final Symbol _symbol_p = _symbols[offset + 1];
					final JSParametersNode p = (JSParametersNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 3];
					final JSNode body = (JSNode) _symbol_body.value;
					
			return new JSArrowFunctionNode(p, body);
			}
			case 353: // ArrowParameters = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSParametersNode(new JSIdentifierNode(i));
			}
			case 358: // MethodDefinition = GET PropertyName.n LPAREN RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_body = _symbols[offset + 6];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			return new JSNameValuePairNode(n, body);
			}
			case 359: // MethodDefinition = SET PropertyName.n LPAREN PropertySetParameterList.p RPAREN LCURLY FunctionBody.body RCURLY
			{
					final Symbol _symbol_n = _symbols[offset + 2];
					final JSNode n = (JSNode) _symbol_n.value;
					final Symbol _symbol_p = _symbols[offset + 4];
					final JSNode p = (JSNode) _symbol_p.value;
					final Symbol _symbol_body = _symbols[offset + 7];
					final JSStatementsNode body = (JSStatementsNode) _symbol_body.value;
					
			JSParametersNode params = new JSParametersNode(p);
			params.setLocation(p.getStartingOffset(), p.getEndingOffset());
			return new JSNameValuePairNode(n, params, body);
			}
			case 368: // ClassDeclaration = CLASS Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 369: // ClassExpression = CLASS opt$Identifier.i ClassTail.t
			{
					final Symbol i = _symbols[offset + 2];
					final Symbol _symbol_t = _symbols[offset + 3];
					final JSNode t = (JSNode) _symbol_t.value;
					
			if (i == null) {
				return new JSClassNode(t);
			}
			return new JSClassNode(new JSIdentifierNode(i), t);
			}
			case 376: // ClassElementList = ClassElement
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
			}
			case 377: // ClassElementList = ClassElementList ClassElement
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
			}
			case 383: // Script = opt$ScriptBody.s
			{
					final Symbol _symbol_s = _symbols[offset + 1];
					final ArrayList _list_s = (ArrayList) _symbol_s.value;
					final JSNode[] s = _list_s == null ? new JSNode[0] : (JSNode[]) _list_s.toArray(new JSNode[_list_s.size()]);
					
			return new JSParseRootNode(s);
			}
			case 387: // Module = opt$ModuleBody.m
			{
					final Symbol _symbol_m = _symbols[offset + 1];
					final ArrayList _list_m = (ArrayList) _symbol_m.value;
					final JSNode[] m = _list_m == null ? new JSNode[0] : (JSNode[]) _list_m.toArray(new JSNode[_list_m.size()]);
					
			return new JSParseRootNode(m);
			}
			case 389: // ModuleItemList = ModuleItemList ModuleItem
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2].value); return _symbols[offset + 1];
			}
			case 390: // ModuleItemList = ModuleItem
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 394: // ImportDeclaration = IMPORT ImportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] clauses = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSImportNode(clauses, f);
			}
			case 395: // ImportDeclaration = IMPORT ModuleSpecifier.s SEMICOLON
			{
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					
			return new JSImportNode(s);
			}
			case 396: // ImportClause = ImportedDefaultBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 397: // ImportClause = NameSpaceImport.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			return new Symbol(nodes);
			}
			case 398: // ImportClause = NamedImports.l
			{
					final Symbol _symbol_l = _symbols[offset + 1];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 399: // ImportClause = ImportedDefaultBinding.i COMMA NameSpaceImport.n
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_n = _symbols[offset + 3];
					final JSImportSpecifierNode n = (JSImportSpecifierNode) _symbol_n.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(n);
			return new Symbol(nodes);
			}
			case 400: // ImportClause = ImportedDefaultBinding.i COMMA NamedImports.l
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSImportSpecifierNode i = (JSImportSpecifierNode) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final JSNamedImportsNode l = (JSNamedImportsNode) _symbol_l.value;
					
			List<JSNode> nodes = new ArrayList<JSNode>();
			nodes.add(i);
			nodes.add(l);
			return new Symbol(nodes);
			}
			case 401: // ImportedDefaultBinding = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 402: // NameSpaceImport = STAR.s AS ImportedBinding.i
			{
					final Symbol s = _symbols[offset + 1];
					final Symbol _symbol_i = _symbols[offset + 3];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(s, i);
			}
			case 403: // NamedImports = LCURLY RCURLY
			{
					
			return new JSNamedImportsNode();
			}
			case 404: // NamedImports = LCURLY ImportsList.l opt$COMMA RCURLY
			{
					final Symbol _symbol_l = _symbols[offset + 2];
					final ArrayList _list_l = (ArrayList) _symbol_l.value;
					final JSImportSpecifierNode[] l = _list_l == null ? new JSImportSpecifierNode[0] : (JSImportSpecifierNode[]) _list_l.toArray(new JSImportSpecifierNode[_list_l.size()]);
					
			return new JSNamedImportsNode(l);
			}
			case 406: // ImportsList = ImportsList COMMA ImportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 407: // ImportsList = ImportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 408: // ImportSpecifier = IdentifierName.i AS ImportedBinding.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol _symbol_alias = _symbols[offset + 3];
					final JSIdentifierNode alias = (JSIdentifierNode) _symbol_alias.value;
					
			return new JSImportSpecifierNode(new JSIdentifierNode(i), alias);
			}
			case 409: // ImportSpecifier = ImportedBinding.i
			{
					final Symbol _symbol_i = _symbols[offset + 1];
					final JSIdentifierNode i = (JSIdentifierNode) _symbol_i.value;
					
			return new JSImportSpecifierNode(i);
			}
			case 411: // ImportedBinding = Identifier.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSIdentifierNode(i);
			}
			case 412: // ExportDeclaration = EXPORT STAR.s FromClause.f SEMICOLON
			{
					final Symbol s = _symbols[offset + 2];
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			return new JSExportNode(false, s, f);
			}
			case 413: // ExportDeclaration = EXPORT ExportClause.c FromClause.f SEMICOLON
			{
					final Symbol _symbol_c = _symbols[offset + 2];
					final ArrayList c = (ArrayList) _symbol_c.value;
					final Symbol _symbol_f = _symbols[offset + 3];
					final String f = (String) _symbol_f.value;
					
			final JSNode[] p = c == null ? new JSNode[0] : (JSNode[]) c.toArray(new JSNode[c.size()]);
			return new JSExportNode(false, p, f);
			}
			case 414: // ExportDeclaration = EXPORT ExportClause.d SEMICOLON
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final ArrayList d = (ArrayList) _symbol_d.value;
					
			final JSNode[] p = d == null ? new JSNode[0] : (JSNode[]) d.toArray(new JSNode[d.size()]);
			return new JSExportNode(false, p);
			}
			case 415: // ExportDeclaration = EXPORT VariableStatement.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSVarNode d = (JSVarNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 416: // ExportDeclaration = EXPORT Declaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 2];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(false, d);
			}
			case 417: // ExportDeclaration = EXPORT DEFAULT HoistableDeclaration.d
			{
					final Symbol _symbol_d = _symbols[offset + 3];
					final JSNode d = (JSNode) _symbol_d.value;
					
			return new JSExportNode(true, d);
			}
			case 418: // ExportDeclaration = EXPORT DEFAULT ClassExpression.e
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSClassNode e = (JSClassNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 419: // ExportDeclaration = EXPORT DEFAULT SingleExpression.e SEMICOLON
			{
					final Symbol _symbol_e = _symbols[offset + 3];
					final JSNode e = (JSNode) _symbol_e.value;
					
			return new JSExportNode(true, e);
			}
			case 420: // ExportClause = LCURLY RCURLY
			{
					
			return new Symbol(new ArrayList());
			}
			case 422: // ExportsList = ExportsList COMMA ExportSpecifier
			{
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3].value); return _symbols[offset + 1];
			}
			case 423: // ExportsList = ExportSpecifier
			{
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1].value); return new Symbol(lst);
			}
			case 424: // ExportSpecifier = IdentifierName.i AS IdentifierName.alias
			{
					final Symbol i = _symbols[offset + 1];
					final Symbol alias = _symbols[offset + 3];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i), new JSIdentifierNode(alias));
			}
			case 425: // ExportSpecifier = IdentifierName.i
			{
					final Symbol i = _symbols[offset + 1];
					
			return new JSExportSpecifierNode(new JSIdentifierNode(i));
			}
			case 65: // opt$Elision = 
			case 78: // opt$COMMA = 
			case 231: // opt$StatementList = 
			case 254: // opt$BindingRestElement = 
			case 267: // opt$Initializer = 
			case 278: // opt$Expression = 
			case 312: // opt$CaseClauses = 
			case 336: // opt$Identifier = 
			case 381: // opt$ScriptBody = 
			case 385: // opt$ModuleBody = 
			{
				return new Symbol(null);
			}
			case 0: // $goal = Module
			case 2: // Identifier = IDENTIFIER
			case 3: // Identifier = GET
			case 4: // Identifier = IMPLEMENTS
			case 5: // Identifier = INTERFACE
			case 6: // Identifier = OF
			case 7: // Identifier = PACKAGE
			case 8: // Identifier = PRIVATE
			case 9: // Identifier = PROTECTED
			case 10: // Identifier = PUBLIC
			case 11: // Identifier = SET
			case 12: // Identifier = STATIC
			case 13: // Identifier = TARGET
			case 14: // IdentifierName = Identifier
			case 15: // IdentifierName = AWAIT
			case 16: // IdentifierName = BREAK
			case 17: // IdentifierName = CASE
			case 18: // IdentifierName = CATCH
			case 19: // IdentifierName = CLASS
			case 20: // IdentifierName = CONST
			case 21: // IdentifierName = CONTINUE
			case 22: // IdentifierName = DEBUGGER
			case 23: // IdentifierName = DEFAULT
			case 24: // IdentifierName = DELETE
			case 25: // IdentifierName = DO
			case 26: // IdentifierName = ELSE
			case 27: // IdentifierName = ENUM
			case 28: // IdentifierName = EXPORT
			case 29: // IdentifierName = EXTENDS
			case 30: // IdentifierName = FINALLY
			case 31: // IdentifierName = FOR
			case 32: // IdentifierName = FUNCTION
			case 33: // IdentifierName = IF
			case 34: // IdentifierName = IMPORT
			case 35: // IdentifierName = INSTANCEOF
			case 36: // IdentifierName = IN
			case 37: // IdentifierName = NEW
			case 38: // IdentifierName = RETURN
			case 39: // IdentifierName = SUPER
			case 40: // IdentifierName = SWITCH
			case 41: // IdentifierName = THIS
			case 42: // IdentifierName = THROW
			case 43: // IdentifierName = TRY
			case 44: // IdentifierName = TYPEOF
			case 45: // IdentifierName = VAR
			case 46: // IdentifierName = VOID
			case 47: // IdentifierName = WHILE
			case 48: // IdentifierName = WITH
			case 49: // IdentifierName = BooleanLiteral
			case 50: // IdentifierName = NullLiteral
			case 55: // Literal = NullLiteral
			case 56: // Literal = BooleanLiteral
			case 57: // Literal = NumericLiteral
			case 58: // Literal = StringLiteral
			case 66: // opt$Elision = Elision
			case 79: // opt$COMMA = COMMA
			case 84: // PropertyDefinition = MethodDefinition
			case 85: // PropertyName = LiteralPropertyName
			case 86: // PropertyName = ComputedPropertyName
			case 88: // LiteralPropertyName = StringLiteral
			case 89: // LiteralPropertyName = NumericLiteral
			case 92: // TemplateLiteral = NoSubstitutionTemplate
			case 94: // TemplateSpans = TemplateTail
			case 102: // ArgumentListItem = SingleExpression
			case 103: // ArgumentListItem = SpreadElement
			case 104: // MultiplicativeOperator = STAR
			case 105: // MultiplicativeOperator = FORWARD_SLASH
			case 106: // MultiplicativeOperator = PERCENT
			case 107: // AssignmentOperator = STAR_EQUAL
			case 108: // AssignmentOperator = FORWARD_SLASH_EQUAL
			case 109: // AssignmentOperator = PERCENT_EQUAL
			case 110: // AssignmentOperator = PLUS_EQUAL
			case 111: // AssignmentOperator = MINUS_EQUAL
			case 112: // AssignmentOperator = LESS_LESS_EQUAL
			case 113: // AssignmentOperator = GREATER_GREATER_EQUAL
			case 114: // AssignmentOperator = GREATER_GREATER_GREATER_EQUAL
			case 115: // AssignmentOperator = AMPERSAND_EQUAL
			case 116: // AssignmentOperator = CARET_EQUAL
			case 117: // AssignmentOperator = PIPE_EQUAL
			case 118: // Expression = SingleExpression
			case 125: // SingleExpression = YieldExpression
			case 126: // SingleExpression = ArrowFunction
			case 129: // SingleExpression = LeftHandSideExpression
			case 132: // PrimaryExpression = Literal
			case 133: // PrimaryExpression = ArrayLiteral
			case 134: // PrimaryExpression = ObjectLiteral
			case 135: // PrimaryExpression = FunctionExpression
			case 136: // PrimaryExpression = GeneratorExpression
			case 137: // PrimaryExpression = RegularExpressionLiteral
			case 138: // PrimaryExpression = TemplateLiteral
			case 139: // PrimaryExpression = CoverParenthesizedExpressionAndArrowParameterList
			case 140: // MemberExpression = PrimaryExpression
			case 143: // MemberExpression = MemberExpression.l TemplateLiteral
			case 144: // MemberExpression = SuperProperty
			case 149: // NewExpression = MemberExpression
			case 157: // LeftHandSideExpression = NewExpression
			case 158: // LeftHandSideExpression = CallExpression
			case 159: // PostUnaryOperator = PLUS_PLUS
			case 160: // PostUnaryOperator = MINUS_MINUS
			case 161: // PreUnaryOperator = PostUnaryOperator
			case 162: // PreUnaryOperator = DELETE
			case 163: // PreUnaryOperator = VOID
			case 164: // PreUnaryOperator = TYPEOF
			case 165: // PreUnaryOperator = PLUS
			case 166: // PreUnaryOperator = MINUS
			case 167: // PreUnaryOperator = TILDE
			case 168: // PreUnaryOperator = EXCLAMATION
			case 169: // BinaryArithmeticOperator = MultiplicativeOperator
			case 170: // BinaryArithmeticOperator = PIPE
			case 171: // BinaryArithmeticOperator = CARET
			case 172: // BinaryArithmeticOperator = AMPERSAND
			case 173: // BinaryArithmeticOperator = PLUS
			case 174: // BinaryArithmeticOperator = MINUS
			case 175: // BinaryArithmeticOperator = LESS_LESS
			case 176: // BinaryArithmeticOperator = GREATER_GREATER
			case 177: // BinaryArithmeticOperator = GREATER_GREATER_GREATER
			case 178: // BinaryBooleanOperator = PIPE_PIPE
			case 179: // BinaryBooleanOperator = AMPERSAND_AMPERSAND
			case 180: // BinaryBooleanOperator = EXCLAMATION_EQUAL_EQUAL
			case 181: // BinaryBooleanOperator = EQUAL_EQUAL_EQUAL
			case 182: // BinaryBooleanOperator = EXCLAMATION_EQUAL
			case 183: // BinaryBooleanOperator = EQUAL_EQUAL
			case 184: // BinaryBooleanOperator = IN
			case 185: // BinaryBooleanOperator = INSTANCEOF
			case 186: // BinaryBooleanOperator = LESS
			case 187: // BinaryBooleanOperator = GREATER
			case 188: // BinaryBooleanOperator = LESS_EQUAL
			case 189: // BinaryBooleanOperator = GREATER_EQUAL
			case 190: // Statement = BlockStatement
			case 191: // Statement = VariableStatement
			case 192: // Statement = EmptyStatement
			case 193: // Statement = ExpressionStatement
			case 194: // Statement = IfStatement
			case 195: // Statement = BreakableStatement
			case 196: // Statement = ContinueStatement
			case 197: // Statement = BreakStatement
			case 198: // Statement = ReturnStatement
			case 199: // Statement = WithStatement
			case 200: // Statement = LabelledStatement
			case 201: // Statement = ThrowStatement
			case 202: // Statement = TryStatement
			case 203: // Statement = DebuggerStatement
			case 205: // Statement_NoIf = BlockStatement
			case 206: // Statement_NoIf = VariableStatement
			case 207: // Statement_NoIf = EmptyStatement
			case 208: // Statement_NoIf = ExpressionStatement
			case 209: // Statement_NoIf = IfStatement_NoIf
			case 210: // Statement_NoIf = BreakableStatement_NoIf
			case 211: // Statement_NoIf = ContinueStatement
			case 212: // Statement_NoIf = BreakStatement
			case 213: // Statement_NoIf = ReturnStatement
			case 214: // Statement_NoIf = WithStatement_NoIf
			case 215: // Statement_NoIf = LabelledStatement_NoIf
			case 216: // Statement_NoIf = ThrowStatement
			case 217: // Statement_NoIf = TryStatement
			case 218: // Statement_NoIf = DebuggerStatement
			case 221: // Declaration = HoistableDeclaration
			case 222: // Declaration = ClassDeclaration
			case 223: // Declaration = LexicalDeclaration
			case 224: // HoistableDeclaration = FunctionDeclaration
			case 225: // HoistableDeclaration = GeneratorDeclaration
			case 226: // BreakableStatement = IterationStatement
			case 227: // BreakableStatement = SwitchStatement
			case 228: // BreakableStatement_NoIf = IterationStatement_NoIf
			case 229: // BreakableStatement_NoIf = SwitchStatement
			case 230: // BlockStatement = Block
			case 232: // opt$StatementList = StatementList
			case 236: // StatementListItem = Statement
			case 237: // StatementListItem = Declaration
			case 239: // LetOrConst = LET
			case 240: // LetOrConst = CONST
			case 243: // LexicalBinding = VariableDeclaration
			case 247: // VariableDeclaration = SingleNameBinding
			case 249: // BindingPattern = ObjectBindingPattern
			case 250: // BindingPattern = ArrayBindingPattern
			case 255: // opt$BindingRestElement = BindingRestElement
			case 264: // BindingProperty = SingleNameBinding
			case 266: // BindingElement = SingleNameBinding
			case 268: // opt$Initializer = Initializer
			case 279: // opt$Expression = Expression
			case 302: // ForBinding = BindingPattern
			case 313: // opt$CaseClauses = CaseClauses
			case 322: // LabelledItem = Statement
			case 323: // LabelledItem = FunctionDeclaration
			case 324: // LabelledItem_NoIf = Statement_NoIf
			case 325: // LabelledItem_NoIf = FunctionDeclaration
			case 333: // CatchParameter = BindingPattern
			case 337: // opt$Identifier = Identifier
			case 339: // StrictFormalParameters = FormalParameters
			case 343: // FormalParameterList = FormalsList.l
			case 347: // FunctionRestParameter = BindingRestElement
			case 348: // FormalParameter = BindingElement
			case 349: // FunctionBody = FunctionStatementList
			case 354: // ArrowParameters = CoverParenthesizedExpressionAndArrowParameterList
			case 355: // ConciseBody = SingleExpression
			case 357: // MethodDefinition = GeneratorMethod
			case 360: // PropertySetParameterList = FormalParameter
			case 364: // GeneratorBody = FunctionBody
			case 365: // YieldExpression = YIELD
			case 375: // ClassBody = ClassElementList
			case 378: // ClassElement = MethodDefinition
			case 380: // ClassElement = SEMICOLON
			case 382: // opt$ScriptBody = ScriptBody
			case 384: // ScriptBody = StatementList
			case 386: // opt$ModuleBody = ModuleBody
			case 388: // ModuleBody = ModuleItemList
			case 391: // ModuleItem = ImportDeclaration
			case 392: // ModuleItem = ExportDeclaration
			case 393: // ModuleItem = StatementListItem
			case 410: // ModuleSpecifier = STRING
			case 426: // NoSubstitutionTemplate = NO_SUB_TEMPLATE
			case 427: // TemplateHead = TEMPLATE_HEAD
			case 428: // TemplateMiddle = TEMPLATE_MIDDLE
			case 429: // TemplateTail = TEMPLATE_TAIL
			{
				return _symbols[offset + 1];
			}
			case 1: // $goal = $Script Script
			case 95: // TemplateSpans = TemplateMiddleList TemplateTail
			case 96: // TemplateMiddleList = TemplateMiddle Expression
			case 152: // CallExpression = SUPER Arguments
			case 156: // CallExpression = CallExpression TemplateLiteral
			case 248: // VariableDeclaration = BindingPattern Initializer
			case 263: // BindingElisionElement = opt$Elision BindingElement
			case 314: // CaseBlock = LCURLY opt$CaseClauses.c RCURLY
			case 334: // DebuggerStatement = DEBUGGER SEMICOLON
			case 356: // ConciseBody = LCURLY FunctionBody.body RCURLY
			case 366: // YieldExpression = YIELD SingleExpression
			case 373: // ClassTail = LCURLY RCURLY
			case 374: // ClassHeritage = EXTENDS SingleExpression
			case 379: // ClassElement = STATIC MethodDefinition
			case 405: // FromClause = FROM ModuleSpecifier.s
			case 421: // ExportClause = LCURLY ExportsList.l opt$COMMA RCURLY
			{
				return _symbols[offset + 2];
			}
			case 90: // ComputedPropertyName = LBRACKET SingleExpression RBRACKET
			case 93: // TemplateLiteral = TemplateHead Expression TemplateSpans
			case 97: // TemplateMiddleList = TemplateMiddleList TemplateMiddle Expression
			case 145: // MemberExpression = NEW DOT TARGET
			case 148: // SuperProperty = SUPER DOT IdentifierName
			case 367: // YieldExpression = YIELD STAR SingleExpression
			case 371: // ClassTail = LCURLY ClassBody RCURLY
			case 372: // ClassTail = ClassHeritage LCURLY RCURLY
			{
				return _symbols[offset + 3];
			}
			case 147: // SuperProperty = SUPER LBRACKET Expression RBRACKET
			case 370: // ClassTail = ClassHeritage LCURLY ClassBody RCURLY
			{
				return _symbols[offset + 4];
			}
			case 361: // GeneratorMethod = STAR PropertyName LPAREN StrictFormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 8];
			}
			case 362: // GeneratorDeclaration = FUNCTION STAR Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			case 363: // GeneratorExpression = FUNCTION STAR opt$Identifier LPAREN FormalParameters RPAREN LCURLY GeneratorBody RCURLY
			{
				return _symbols[offset + 9];
			}
			default:
				throw new IllegalArgumentException("unknown production #" + rule_num);
		}
	}
}
